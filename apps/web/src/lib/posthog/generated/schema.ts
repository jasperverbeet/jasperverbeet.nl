/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/organizations/": {
    get: operations["list"];
    post: operations["create"];
  };
  "/api/organizations/{id}/": {
    get: operations["retrieve"];
    put: operations["update"];
    delete: operations["destroy"];
    patch: operations["partial_update"];
  };
  "/api/organizations/{organization_id}/batch_exports/": {
    get: operations["batch_exports_list"];
    post: operations["batch_exports_create"];
  };
  "/api/organizations/{organization_id}/batch_exports/{id}/": {
    get: operations["batch_exports_retrieve"];
    put: operations["batch_exports_update"];
    delete: operations["batch_exports_destroy"];
    patch: operations["batch_exports_partial_update"];
  };
  "/api/organizations/{organization_id}/batch_exports/{id}/backfill/": {
    /** @description Trigger a backfill for a BatchExport. */
    post: operations["batch_exports_backfill_create"];
  };
  "/api/organizations/{organization_id}/batch_exports/{id}/pause/": {
    /** @description Pause a BatchExport. */
    post: operations["batch_exports_pause_create"];
  };
  "/api/organizations/{organization_id}/batch_exports/{id}/unpause/": {
    /** @description Unpause a BatchExport. */
    post: operations["batch_exports_unpause_create"];
  };
  "/api/organizations/{organization_id}/domains/": {
    get: operations["domains_list"];
    post: operations["domains_create"];
  };
  "/api/organizations/{organization_id}/domains/{id}/": {
    get: operations["domains_retrieve"];
    put: operations["domains_update"];
    delete: operations["domains_destroy"];
    patch: operations["domains_partial_update"];
  };
  "/api/organizations/{organization_id}/domains/{id}/verify/": {
    post: operations["domains_verify_create"];
  };
  "/api/organizations/{organization_id}/invites/": {
    get: operations["invites_list"];
    post: operations["invites_create"];
  };
  "/api/organizations/{organization_id}/invites/{id}/": {
    delete: operations["invites_destroy"];
  };
  "/api/organizations/{organization_id}/invites/bulk/": {
    post: operations["invites_bulk_create"];
  };
  "/api/organizations/{organization_id}/members/": {
    get: operations["members_list"];
  };
  "/api/organizations/{organization_id}/members/{user__uuid}/": {
    put: operations["members_update"];
    delete: operations["members_destroy"];
    patch: operations["members_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/": {
    get: operations["pipeline_destinations_list"];
    post: operations["pipeline_destinations_create"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/{id}/": {
    get: operations["pipeline_destinations_retrieve"];
    put: operations["pipeline_destinations_update"];
    delete: operations["pipeline_destinations_destroy"];
    patch: operations["pipeline_destinations_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/{id}/check_for_updates/": {
    get: operations["pipeline_destinations_check_for_updates_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/{id}/source/": {
    get: operations["pipeline_destinations_source_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/{id}/update_source/": {
    patch: operations["pipeline_destinations_update_source_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/{id}/upgrade/": {
    post: operations["pipeline_destinations_upgrade_create"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/activity/": {
    get: operations["pipeline_destinations_activity_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/exports_unsubscribe_configs/": {
    get: operations["pipeline_destinations_exports_unsubscribe_configs_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/repository/": {
    get: operations["pipeline_destinations_repository_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_destinations/unused/": {
    get: operations["pipeline_destinations_unused_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/": {
    get: operations["pipeline_frontend_apps_list"];
    post: operations["pipeline_frontend_apps_create"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/{id}/": {
    get: operations["pipeline_frontend_apps_retrieve"];
    put: operations["pipeline_frontend_apps_update"];
    delete: operations["pipeline_frontend_apps_destroy"];
    patch: operations["pipeline_frontend_apps_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/{id}/check_for_updates/": {
    get: operations["pipeline_frontend_apps_check_for_updates_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/{id}/source/": {
    get: operations["pipeline_frontend_apps_source_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/{id}/update_source/": {
    patch: operations["pipeline_frontend_apps_update_source_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/{id}/upgrade/": {
    post: operations["pipeline_frontend_apps_upgrade_create"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/activity/": {
    get: operations["pipeline_frontend_apps_activity_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/exports_unsubscribe_configs/": {
    get: operations["pipeline_frontend_apps_exports_unsubscribe_configs_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/repository/": {
    get: operations["pipeline_frontend_apps_repository_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_frontend_apps/unused/": {
    get: operations["pipeline_frontend_apps_unused_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/": {
    get: operations["pipeline_import_apps_list"];
    post: operations["pipeline_import_apps_create"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/{id}/": {
    get: operations["pipeline_import_apps_retrieve"];
    put: operations["pipeline_import_apps_update"];
    delete: operations["pipeline_import_apps_destroy"];
    patch: operations["pipeline_import_apps_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/{id}/check_for_updates/": {
    get: operations["pipeline_import_apps_check_for_updates_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/{id}/source/": {
    get: operations["pipeline_import_apps_source_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/{id}/update_source/": {
    patch: operations["pipeline_import_apps_update_source_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/{id}/upgrade/": {
    post: operations["pipeline_import_apps_upgrade_create"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/activity/": {
    get: operations["pipeline_import_apps_activity_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/exports_unsubscribe_configs/": {
    get: operations["pipeline_import_apps_exports_unsubscribe_configs_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/repository/": {
    get: operations["pipeline_import_apps_repository_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_import_apps/unused/": {
    get: operations["pipeline_import_apps_unused_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/": {
    get: operations["pipeline_transformations_list"];
    post: operations["pipeline_transformations_create"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/{id}/": {
    get: operations["pipeline_transformations_retrieve"];
    put: operations["pipeline_transformations_update"];
    delete: operations["pipeline_transformations_destroy"];
    patch: operations["pipeline_transformations_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/{id}/check_for_updates/": {
    get: operations["pipeline_transformations_check_for_updates_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/{id}/source/": {
    get: operations["pipeline_transformations_source_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/{id}/update_source/": {
    patch: operations["pipeline_transformations_update_source_partial_update"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/{id}/upgrade/": {
    post: operations["pipeline_transformations_upgrade_create"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/activity/": {
    get: operations["pipeline_transformations_activity_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/exports_unsubscribe_configs/": {
    get: operations["pipeline_transformations_exports_unsubscribe_configs_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/repository/": {
    get: operations["pipeline_transformations_repository_retrieve"];
  };
  "/api/organizations/{organization_id}/pipeline_transformations/unused/": {
    get: operations["pipeline_transformations_unused_retrieve"];
  };
  "/api/organizations/{organization_id}/plugins/": {
    get: operations["plugins_list"];
    post: operations["plugins_create"];
  };
  "/api/organizations/{organization_id}/plugins/{id}/": {
    get: operations["plugins_retrieve"];
    put: operations["plugins_update"];
    delete: operations["plugins_destroy"];
    patch: operations["plugins_partial_update"];
  };
  "/api/organizations/{organization_id}/plugins/{id}/check_for_updates/": {
    get: operations["plugins_check_for_updates_retrieve"];
  };
  "/api/organizations/{organization_id}/plugins/{id}/source/": {
    get: operations["plugins_source_retrieve"];
  };
  "/api/organizations/{organization_id}/plugins/{id}/update_source/": {
    patch: operations["plugins_update_source_partial_update"];
  };
  "/api/organizations/{organization_id}/plugins/{id}/upgrade/": {
    post: operations["plugins_upgrade_create"];
  };
  "/api/organizations/{organization_id}/plugins/activity/": {
    get: operations["plugins_activity_retrieve"];
  };
  "/api/organizations/{organization_id}/plugins/exports_unsubscribe_configs/": {
    get: operations["plugins_exports_unsubscribe_configs_retrieve"];
  };
  "/api/organizations/{organization_id}/plugins/repository/": {
    get: operations["plugins_repository_retrieve"];
  };
  "/api/organizations/{organization_id}/plugins/unused/": {
    get: operations["plugins_unused_retrieve"];
  };
  "/api/organizations/{organization_id}/projects/": {
    /** @description Projects for the current organization. */
    get: operations["list_2"];
    /** @description Projects for the current organization. */
    post: operations["create_2"];
  };
  "/api/organizations/{organization_id}/projects/{id}/": {
    /** @description Projects for the current organization. */
    get: operations["retrieve_2"];
    /** @description Projects for the current organization. */
    put: operations["update_2"];
    /** @description Projects for the current organization. */
    delete: operations["destroy_2"];
    /** @description Projects for the current organization. */
    patch: operations["partial_update_2"];
  };
  "/api/organizations/{organization_id}/projects/{id}/activity/": {
    /** @description Projects for the current organization. */
    get: operations["activity_retrieve"];
  };
  "/api/organizations/{organization_id}/projects/{id}/is_generating_demo_data/": {
    /** @description Projects for the current organization. */
    get: operations["is_generating_demo_data_retrieve"];
  };
  "/api/organizations/{organization_id}/projects/{id}/reset_token/": {
    /** @description Projects for the current organization. */
    patch: operations["reset_token_partial_update"];
  };
  "/api/organizations/{organization_id}/roles/": {
    get: operations["roles_list"];
    post: operations["roles_create"];
  };
  "/api/organizations/{organization_id}/roles/{id}/": {
    get: operations["roles_retrieve"];
    put: operations["roles_update"];
    delete: operations["roles_destroy"];
    patch: operations["roles_partial_update"];
  };
  "/api/organizations/{organization_id}/roles/{role_id}/role_memberships/": {
    get: operations["roles_role_memberships_list"];
    post: operations["roles_role_memberships_create"];
  };
  "/api/organizations/{organization_id}/roles/{role_id}/role_memberships/{id}/": {
    delete: operations["roles_role_memberships_destroy"];
  };
  "/api/projects/{project_id}/actions/": {
    get: operations["actions_list"];
    post: operations["actions_create"];
  };
  "/api/projects/{project_id}/actions/{id}/": {
    get: operations["actions_retrieve"];
    put: operations["actions_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["actions_destroy"];
    patch: operations["actions_partial_update"];
  };
  "/api/projects/{project_id}/activity_log/": {
    get: operations["activity_log_list"];
  };
  "/api/projects/{project_id}/activity_log/bookmark_activity_notification/": {
    post: operations["activity_log_bookmark_activity_notification_create"];
  };
  "/api/projects/{project_id}/activity_log/important_changes/": {
    get: operations["activity_log_important_changes_retrieve"];
  };
  "/api/projects/{project_id}/annotations/": {
    /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    get: operations["annotations_list"];
    /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    post: operations["annotations_create"];
  };
  "/api/projects/{project_id}/annotations/{id}/": {
    /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    get: operations["annotations_retrieve"];
    /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    put: operations["annotations_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["annotations_destroy"];
    /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    patch: operations["annotations_partial_update"];
  };
  "/api/projects/{project_id}/app_metrics/{id}/": {
    get: operations["app_metrics_retrieve"];
  };
  "/api/projects/{project_id}/app_metrics/{id}/error_details/": {
    get: operations["app_metrics_error_details_retrieve"];
  };
  "/api/projects/{project_id}/app_metrics/{plugin_config_id}/historical_exports/": {
    get: operations["app_metrics_historical_exports_retrieve"];
  };
  "/api/projects/{project_id}/app_metrics/{plugin_config_id}/historical_exports/{id}/": {
    get: operations["app_metrics_historical_exports_retrieve_2"];
  };
  "/api/projects/{project_id}/batch_exports/": {
    get: operations["batch_exports_list_2"];
    post: operations["batch_exports_create_2"];
  };
  "/api/projects/{project_id}/batch_exports/{batch_export_id}/logs/": {
    get: operations["batch_exports_logs_list"];
  };
  "/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/": {
    get: operations["batch_exports_runs_list"];
  };
  "/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/{id}/": {
    get: operations["batch_exports_runs_retrieve"];
  };
  "/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/{run_id}/logs/": {
    get: operations["batch_exports_runs_logs_list"];
  };
  "/api/projects/{project_id}/batch_exports/{id}/": {
    get: operations["batch_exports_retrieve_2"];
    put: operations["batch_exports_update_2"];
    delete: operations["batch_exports_destroy_2"];
    patch: operations["batch_exports_partial_update_2"];
  };
  "/api/projects/{project_id}/batch_exports/{id}/backfill/": {
    /** @description Trigger a backfill for a BatchExport. */
    post: operations["batch_exports_backfill_create_2"];
  };
  "/api/projects/{project_id}/batch_exports/{id}/pause/": {
    /** @description Pause a BatchExport. */
    post: operations["batch_exports_pause_create_2"];
  };
  "/api/projects/{project_id}/batch_exports/{id}/unpause/": {
    /** @description Unpause a BatchExport. */
    post: operations["batch_exports_unpause_create_2"];
  };
  "/api/projects/{project_id}/cohorts/": {
    get: operations["cohorts_list"];
    post: operations["cohorts_create"];
  };
  "/api/projects/{project_id}/cohorts/{id}/": {
    get: operations["cohorts_retrieve"];
    put: operations["cohorts_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["cohorts_destroy"];
    patch: operations["cohorts_partial_update"];
  };
  "/api/projects/{project_id}/cohorts/{id}/duplicate_as_static_cohort/": {
    get: operations["cohorts_duplicate_as_static_cohort_retrieve"];
  };
  "/api/projects/{project_id}/cohorts/{id}/persons/": {
    get: operations["cohorts_persons_retrieve"];
  };
  "/api/projects/{project_id}/dashboard_templates/": {
    get: operations["dashboard_templates_list"];
    post: operations["dashboard_templates_create"];
  };
  "/api/projects/{project_id}/dashboard_templates/{id}/": {
    get: operations["dashboard_templates_retrieve"];
    put: operations["dashboard_templates_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["dashboard_templates_destroy"];
    patch: operations["dashboard_templates_partial_update"];
  };
  "/api/projects/{project_id}/dashboard_templates/json_schema/": {
    get: operations["dashboard_templates_json_schema_retrieve"];
  };
  "/api/projects/{project_id}/dashboards/": {
    get: operations["dashboards_list"];
    post: operations["dashboards_create"];
  };
  "/api/projects/{project_id}/dashboards/{dashboard_id}/collaborators/": {
    get: operations["dashboards_collaborators_list"];
    post: operations["dashboards_collaborators_create"];
  };
  "/api/projects/{project_id}/dashboards/{dashboard_id}/collaborators/{user__uuid}/": {
    delete: operations["dashboards_collaborators_destroy"];
  };
  "/api/projects/{project_id}/dashboards/{dashboard_id}/sharing/": {
    get: operations["dashboards_sharing_list"];
  };
  "/api/projects/{project_id}/dashboards/{id}/": {
    get: operations["dashboards_retrieve"];
    put: operations["dashboards_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["dashboards_destroy"];
    patch: operations["dashboards_partial_update"];
  };
  "/api/projects/{project_id}/dashboards/{id}/move_tile/": {
    patch: operations["dashboards_move_tile_partial_update"];
  };
  "/api/projects/{project_id}/dashboards/create_from_template_json/": {
    post: operations["dashboards_create_from_template_json_create"];
  };
  "/api/projects/{project_id}/early_access_feature/": {
    get: operations["early_access_feature_list"];
    post: operations["early_access_feature_create"];
  };
  "/api/projects/{project_id}/early_access_feature/{id}/": {
    get: operations["early_access_feature_retrieve"];
    put: operations["early_access_feature_update"];
    delete: operations["early_access_feature_destroy"];
    patch: operations["early_access_feature_partial_update"];
  };
  "/api/projects/{project_id}/event_definitions/": {
    get: operations["event_definitions_retrieve"];
  };
  "/api/projects/{project_id}/event_definitions/{id}/": {
    get: operations["event_definitions_retrieve_2"];
    put: operations["event_definitions_update"];
    delete: operations["event_definitions_destroy"];
    patch: operations["event_definitions_partial_update"];
  };
  "/api/projects/{project_id}/events/": {
    /**
     * @description
     *         This endpoint allows you to list and filter events.
     *         It is effectively deprecated and is kept only for backwards compatibility.
     *         If you ever ask about it you will be advised to not use it...
     *         If you want to ad-hoc list or aggregate events, use the Query endpoint instead.
     *         If you want to export all events or many pages of events you should use our CDP/Batch Exports products instead.
     */
    get: operations["events_list"];
  };
  "/api/projects/{project_id}/events/{id}/": {
    get: operations["events_retrieve"];
  };
  "/api/projects/{project_id}/events/values/": {
    get: operations["events_values_retrieve"];
  };
  "/api/projects/{project_id}/experiments/": {
    get: operations["experiments_list"];
    post: operations["experiments_create"];
  };
  "/api/projects/{project_id}/experiments/{id}/": {
    get: operations["experiments_retrieve"];
    put: operations["experiments_update"];
    delete: operations["experiments_destroy"];
    patch: operations["experiments_partial_update"];
  };
  "/api/projects/{project_id}/experiments/{id}/create_exposure_cohort_for_experiment/": {
    post: operations["experiments_create_exposure_cohort_for_experiment_create"];
  };
  "/api/projects/{project_id}/experiments/{id}/results/": {
    get: operations["experiments_results_retrieve"];
  };
  "/api/projects/{project_id}/experiments/{id}/secondary_results/": {
    get: operations["experiments_secondary_results_retrieve"];
  };
  "/api/projects/{project_id}/experiments/requires_flag_implementation/": {
    get: operations["experiments_requires_flag_implementation_retrieve"];
  };
  "/api/projects/{project_id}/explicit_members/": {
    get: operations["explicit_members_list"];
    post: operations["explicit_members_create"];
  };
  "/api/projects/{project_id}/explicit_members/{parent_membership__user__uuid}/": {
    get: operations["explicit_members_retrieve"];
    put: operations["explicit_members_update"];
    delete: operations["explicit_members_destroy"];
    patch: operations["explicit_members_partial_update"];
  };
  "/api/projects/{project_id}/exports/": {
    get: operations["exports_list"];
    post: operations["exports_create"];
  };
  "/api/projects/{project_id}/exports/{id}/": {
    get: operations["exports_retrieve"];
  };
  "/api/projects/{project_id}/exports/{id}/content/": {
    get: operations["exports_content_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_list"];
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    post: operations["feature_flags_create"];
  };
  "/api/projects/{project_id}/feature_flags/{feature_flag_id}/role_access/": {
    get: operations["feature_flags_role_access_list"];
    post: operations["feature_flags_role_access_create"];
  };
  "/api/projects/{project_id}/feature_flags/{feature_flag_id}/role_access/{id}/": {
    get: operations["feature_flags_role_access_retrieve"];
    delete: operations["feature_flags_role_access_destroy"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_retrieve"];
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    put: operations["feature_flags_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["feature_flags_destroy"];
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    patch: operations["feature_flags_partial_update"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/activity/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/create_static_cohort_for_flag/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    post: operations["feature_flags_create_static_cohort_for_flag_create"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/dashboard/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    post: operations["feature_flags_dashboard_create"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/enrich_usage_dashboard/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    post: operations["feature_flags_enrich_usage_dashboard_create"];
  };
  "/api/projects/{project_id}/feature_flags/activity/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_activity_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/evaluation_reasons/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_evaluation_reasons_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/local_evaluation/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_local_evaluation_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/my_flags/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_my_flags_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/user_blast_radius/": {
    /**
     * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    post: operations["feature_flags_user_blast_radius_create"];
  };
  "/api/projects/{project_id}/groups/": {
    /** @description List all groups of a specific group type. You must pass ?group_type_index= in the URL. To get a list of valid group types, call /api/:project_id/groups_types/ */
    get: operations["groups_list"];
  };
  "/api/projects/{project_id}/groups/find/": {
    get: operations["groups_find_retrieve"];
  };
  "/api/projects/{project_id}/groups/property_definitions/": {
    get: operations["groups_property_definitions_retrieve"];
  };
  "/api/projects/{project_id}/groups/property_values/": {
    get: operations["groups_property_values_retrieve"];
  };
  "/api/projects/{project_id}/groups/related/": {
    get: operations["groups_related_retrieve"];
  };
  "/api/projects/{project_id}/groups_types/": {
    get: operations["groups_types_list"];
  };
  "/api/projects/{project_id}/groups_types/update_metadata/": {
    patch: operations["groups_types_update_metadata_partial_update"];
  };
  "/api/projects/{project_id}/insights/": {
    get: operations["insights_list"];
    post: operations["insights_create"];
  };
  "/api/projects/{project_id}/insights/{insight_id}/sharing/": {
    get: operations["insights_sharing_list"];
  };
  "/api/projects/{project_id}/insights/{id}/": {
    get: operations["insights_retrieve"];
    put: operations["insights_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["insights_destroy"];
    patch: operations["insights_partial_update"];
  };
  "/api/projects/{project_id}/insights/{id}/activity/": {
    get: operations["insights_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/insights/{id}/viewed/": {
    post: operations["insights_viewed_create"];
  };
  "/api/projects/{project_id}/insights/activity/": {
    get: operations["insights_activity_retrieve"];
  };
  "/api/projects/{project_id}/insights/cancel/": {
    post: operations["insights_cancel_create"];
  };
  "/api/projects/{project_id}/insights/funnel/": {
    get: operations["insights_funnel_retrieve"];
    post: operations["Funnels"];
  };
  "/api/projects/{project_id}/insights/funnel/correlation/": {
    get: operations["insights_funnel_correlation_retrieve"];
    post: operations["insights_funnel_correlation_create"];
  };
  "/api/projects/{project_id}/insights/my_last_viewed/": {
    /** @description Returns basic details about the last 5 insights viewed by this user. Most recently viewed first. */
    get: operations["insights_my_last_viewed_retrieve"];
  };
  "/api/projects/{project_id}/insights/path/": {
    get: operations["insights_path_retrieve"];
    post: operations["insights_path_create"];
  };
  "/api/projects/{project_id}/insights/retention/": {
    get: operations["insights_retention_retrieve"];
    post: operations["insights_retention_create"];
  };
  "/api/projects/{project_id}/insights/timing/": {
    post: operations["insights_timing_create"];
  };
  "/api/projects/{project_id}/insights/trend/": {
    get: operations["insights_trend_retrieve"];
    post: operations["Trends"];
  };
  "/api/projects/{project_id}/notebooks/": {
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    get: operations["notebooks_list"];
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    post: operations["notebooks_create"];
  };
  "/api/projects/{project_id}/notebooks/{short_id}/": {
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    get: operations["notebooks_retrieve"];
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    put: operations["notebooks_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["notebooks_destroy"];
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    patch: operations["notebooks_partial_update"];
  };
  "/api/projects/{project_id}/notebooks/{short_id}/activity/": {
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    get: operations["notebooks_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/notebooks/activity/": {
    /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
    get: operations["notebooks_activity_retrieve"];
  };
  "/api/projects/{project_id}/persons/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_list"];
  };
  "/api/projects/{project_id}/persons/{id}/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_retrieve"];
    /**
     * @description Only for setting properties on the person. "properties" from the request data will be updated via a "$set" event.
     * This means that only the properties listed will be updated, but other properties won't be removed nor updated.
     * If you would like to remove a property use the `delete_property` endpoint.
     */
    put: operations["persons_update"];
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    delete: operations["persons_destroy"];
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    patch: operations["persons_partial_update"];
  };
  "/api/projects/{project_id}/persons/{id}/activity/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/persons/{id}/delete_property/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    post: operations["persons_delete_property_create"];
  };
  "/api/projects/{project_id}/persons/{id}/properties_timeline/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_properties_timeline_retrieve"];
  };
  "/api/projects/{project_id}/persons/{id}/split/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    post: operations["persons_split_create"];
  };
  "/api/projects/{project_id}/persons/{id}/update_property/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    post: operations["persons_update_property_create"];
  };
  "/api/projects/{project_id}/persons/activity/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_activity_retrieve"];
  };
  "/api/projects/{project_id}/persons/cohorts/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_cohorts_retrieve"];
  };
  "/api/projects/{project_id}/persons/funnel/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_funnel_retrieve"];
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    post: operations["persons_funnel_create"];
  };
  "/api/projects/{project_id}/persons/funnel/correlation/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_funnel_correlation_retrieve"];
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    post: operations["persons_funnel_correlation_create"];
  };
  "/api/projects/{project_id}/persons/lifecycle/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_lifecycle_retrieve"];
  };
  "/api/projects/{project_id}/persons/path/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_path_retrieve"];
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    post: operations["persons_path_create"];
  };
  "/api/projects/{project_id}/persons/retention/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_retention_retrieve"];
  };
  "/api/projects/{project_id}/persons/stickiness/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_stickiness_retrieve"];
  };
  "/api/projects/{project_id}/persons/trends/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_trends_retrieve"];
  };
  "/api/projects/{project_id}/persons/values/": {
    /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
    get: operations["persons_values_retrieve"];
  };
  "/api/projects/{project_id}/pipeline_destination_configs/": {
    get: operations["pipeline_destination_configs_list"];
    post: operations["pipeline_destination_configs_create"];
  };
  "/api/projects/{project_id}/pipeline_destination_configs/{id}/": {
    get: operations["pipeline_destination_configs_retrieve"];
    put: operations["pipeline_destination_configs_update"];
    delete: operations["pipeline_destination_configs_destroy"];
    patch: operations["pipeline_destination_configs_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_destination_configs/{id}/frontend/": {
    get: operations["pipeline_destination_configs_frontend_retrieve"];
  };
  "/api/projects/{project_id}/pipeline_destination_configs/{id}/job/": {
    post: operations["pipeline_destination_configs_job_create"];
  };
  "/api/projects/{project_id}/pipeline_destination_configs/rearrange/": {
    patch: operations["pipeline_destination_configs_rearrange_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_frontend_apps_configs/": {
    get: operations["pipeline_frontend_apps_configs_list"];
    post: operations["pipeline_frontend_apps_configs_create"];
  };
  "/api/projects/{project_id}/pipeline_frontend_apps_configs/{id}/": {
    get: operations["pipeline_frontend_apps_configs_retrieve"];
    put: operations["pipeline_frontend_apps_configs_update"];
    delete: operations["pipeline_frontend_apps_configs_destroy"];
    patch: operations["pipeline_frontend_apps_configs_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_frontend_apps_configs/{id}/frontend/": {
    get: operations["pipeline_frontend_apps_configs_frontend_retrieve"];
  };
  "/api/projects/{project_id}/pipeline_frontend_apps_configs/{id}/job/": {
    post: operations["pipeline_frontend_apps_configs_job_create"];
  };
  "/api/projects/{project_id}/pipeline_frontend_apps_configs/rearrange/": {
    patch: operations["pipeline_frontend_apps_configs_rearrange_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_import_apps_configs/": {
    get: operations["pipeline_import_apps_configs_list"];
    post: operations["pipeline_import_apps_configs_create"];
  };
  "/api/projects/{project_id}/pipeline_import_apps_configs/{id}/": {
    get: operations["pipeline_import_apps_configs_retrieve"];
    put: operations["pipeline_import_apps_configs_update"];
    delete: operations["pipeline_import_apps_configs_destroy"];
    patch: operations["pipeline_import_apps_configs_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_import_apps_configs/{id}/frontend/": {
    get: operations["pipeline_import_apps_configs_frontend_retrieve"];
  };
  "/api/projects/{project_id}/pipeline_import_apps_configs/{id}/job/": {
    post: operations["pipeline_import_apps_configs_job_create"];
  };
  "/api/projects/{project_id}/pipeline_import_apps_configs/rearrange/": {
    patch: operations["pipeline_import_apps_configs_rearrange_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_transformation_configs/": {
    get: operations["pipeline_transformation_configs_list"];
    post: operations["pipeline_transformation_configs_create"];
  };
  "/api/projects/{project_id}/pipeline_transformation_configs/{id}/": {
    get: operations["pipeline_transformation_configs_retrieve"];
    put: operations["pipeline_transformation_configs_update"];
    delete: operations["pipeline_transformation_configs_destroy"];
    patch: operations["pipeline_transformation_configs_partial_update"];
  };
  "/api/projects/{project_id}/pipeline_transformation_configs/{id}/frontend/": {
    get: operations["pipeline_transformation_configs_frontend_retrieve"];
  };
  "/api/projects/{project_id}/pipeline_transformation_configs/{id}/job/": {
    post: operations["pipeline_transformation_configs_job_create"];
  };
  "/api/projects/{project_id}/pipeline_transformation_configs/rearrange/": {
    patch: operations["pipeline_transformation_configs_rearrange_partial_update"];
  };
  "/api/projects/{project_id}/plugin_configs/": {
    get: operations["plugin_configs_list"];
    post: operations["plugin_configs_create"];
  };
  "/api/projects/{project_id}/plugin_configs/{id}/": {
    get: operations["plugin_configs_retrieve"];
    put: operations["plugin_configs_update"];
    delete: operations["plugin_configs_destroy"];
    patch: operations["plugin_configs_partial_update"];
  };
  "/api/projects/{project_id}/plugin_configs/{id}/frontend/": {
    get: operations["plugin_configs_frontend_retrieve"];
  };
  "/api/projects/{project_id}/plugin_configs/{id}/job/": {
    post: operations["plugin_configs_job_create"];
  };
  "/api/projects/{project_id}/plugin_configs/{plugin_config_id}/logs/": {
    get: operations["plugin_configs_logs_list"];
  };
  "/api/projects/{project_id}/plugin_configs/rearrange/": {
    patch: operations["plugin_configs_rearrange_partial_update"];
  };
  "/api/projects/{project_id}/property_definitions/": {
    get: operations["property_definitions_retrieve"];
  };
  "/api/projects/{project_id}/property_definitions/{id}/": {
    get: operations["property_definitions_retrieve_2"];
    put: operations["property_definitions_update"];
    delete: operations["property_definitions_destroy"];
    patch: operations["property_definitions_partial_update"];
  };
  "/api/projects/{project_id}/property_definitions/seen_together/": {
    /**
     * @description Allows a caller to provide a list of event names and a single property name
     * Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
     */
    get: operations["property_definitions_seen_together_retrieve"];
  };
  "/api/projects/{project_id}/query/": {
    post: operations["query_create"];
  };
  "/api/projects/{project_id}/query/{id}/": {
    /** @description (Experimental) */
    get: operations["query_retrieve"];
    /** @description (Experimental) */
    delete: operations["query_destroy"];
  };
  "/api/projects/{project_id}/query/draft_sql/": {
    get: operations["query_draft_sql_retrieve"];
  };
  "/api/projects/{project_id}/session_recording_playlists/": {
    get: operations["session_recording_playlists_list"];
    post: operations["session_recording_playlists_create"];
  };
  "/api/projects/{project_id}/session_recording_playlists/{short_id}/": {
    get: operations["session_recording_playlists_retrieve"];
    put: operations["session_recording_playlists_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["session_recording_playlists_destroy"];
    patch: operations["session_recording_playlists_partial_update"];
  };
  "/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/": {
    get: operations["session_recording_playlists_recordings_retrieve"];
  };
  "/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/": {
    post: operations["session_recording_playlists_recordings_create"];
    delete: operations["session_recording_playlists_recordings_destroy"];
  };
  "/api/projects/{project_id}/session_recordings/": {
    get: operations["session_recordings_list"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/": {
    get: operations["session_recordings_retrieve"];
    delete: operations["session_recordings_destroy"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/persist/": {
    post: operations["session_recordings_persist_create"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/similar_sessions/": {
    get: operations["session_recordings_similar_sessions_retrieve"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/snapshots/": {
    /**
     * @description Snapshots can be loaded from multiple places:
     * 1. From S3 if the session is older than our ingestion limit. This will be multiple files that can be streamed to the client
     * 2. or from Redis if the session is newer than our ingestion limit.
     *
     * Clients need to call this API twice.
     * First without a source parameter to get a list of sources supported by the given session.
     * And then once for each source in the returned list to get the actual snapshots.
     *
     * NB version 1 of this API has been deprecated and ClickHouse stored snapshots are no longer supported.
     */
    get: operations["session_recordings_snapshots_retrieve"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/summarize/": {
    post: operations["session_recordings_summarize_create"];
  };
  "/api/projects/{project_id}/session_recordings/{recording_id}/sharing/": {
    get: operations["session_recordings_sharing_list"];
  };
  "/api/projects/{project_id}/session_recordings/error_clusters/": {
    get: operations["session_recordings_error_clusters_retrieve"];
  };
  "/api/projects/{project_id}/session_recordings/matching_events/": {
    /**
     * @description
     *         Gets a list of event ids that match the given session recording filter.
     *         The filter must include a single session ID.
     *         And must include at least one event or action filter.
     *         This API is intended for internal use and might have unannounced breaking changes.
     */
    get: operations["session_recordings_matching_events_retrieve"];
  };
  "/api/projects/{project_id}/session_recordings/properties/": {
    get: operations["session_recordings_properties_retrieve"];
  };
  "/api/projects/{project_id}/sessions/property_definitions/": {
    get: operations["sessions_property_definitions_retrieve"];
  };
  "/api/projects/{project_id}/sessions/values/": {
    get: operations["sessions_values_retrieve"];
  };
  "/api/projects/{project_id}/subscriptions/": {
    get: operations["subscriptions_list"];
    post: operations["subscriptions_create"];
  };
  "/api/projects/{project_id}/subscriptions/{id}/": {
    get: operations["subscriptions_retrieve"];
    put: operations["subscriptions_update"];
    /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["subscriptions_destroy"];
    patch: operations["subscriptions_partial_update"];
  };
  "/api/projects/{project_id}/surveys/": {
    get: operations["surveys_list"];
    post: operations["surveys_create"];
  };
  "/api/projects/{project_id}/surveys/{id}/": {
    get: operations["surveys_retrieve"];
    put: operations["surveys_update"];
    delete: operations["surveys_destroy"];
    patch: operations["surveys_partial_update"];
  };
  "/api/projects/{project_id}/surveys/responses_count/": {
    get: operations["surveys_responses_count_retrieve"];
  };
  "/api/users/": {
    get: operations["users_list"];
  };
  "/api/users/{uuid}/": {
    get: operations["users_retrieve"];
    put: operations["users_update"];
    patch: operations["users_partial_update"];
  };
  "/api/users/{uuid}/request_email_verification/": {
    post: operations["users_request_email_verification_create"];
  };
  "/api/users/{uuid}/scene_personalisation/": {
    post: operations["users_scene_personalisation_create"];
  };
  "/api/users/{uuid}/start_2fa_setup/": {
    get: operations["users_start_2fa_setup_retrieve"];
  };
  "/api/users/{uuid}/validate_2fa/": {
    post: operations["users_validate_2fa_create"];
  };
  "/api/users/{uuid}/verify_email/": {
    post: operations["users_verify_email_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    Action: {
      id: number;
      name?: string | null;
      description?: string;
      tags?: unknown[];
      post_to_slack?: boolean;
      slack_message_format?: string;
      steps?: components["schemas"]["ActionStep"][];
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      deleted?: boolean;
      is_calculating: boolean;
      /** Format: date-time */
      last_calculated_at?: string;
      team_id: number;
      /** @default true */
      is_action: boolean;
      bytecode_error: string | null;
    };
    ActionStep: {
      id?: string;
      event?: string | null;
      tag_name?: string | null;
      text?: string | null;
      text_matching?:
        | components["schemas"]["UrlMatchingEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      href?: string | null;
      href_matching?:
        | components["schemas"]["UrlMatchingEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      selector?: string | null;
      url?: string | null;
      name?: string | null;
      url_matching?:
        | components["schemas"]["UrlMatchingEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      properties?: unknown;
    };
    /** ActionsNode */
    ActionsNode: {
      /**
       * Custom Name
       * @default null
       */
      custom_name?: string | null;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /** Id */
      id: number;
      /**
       * Kind
       * @default ActionsNode
       * @constant
       */
      kind?: "ActionsNode";
      /**
       * Math
       * @default null
       */
      math?:
        | components["schemas"]["BaseMathType"]
        | components["schemas"]["PropertyMathType"]
        | components["schemas"]["CountPerActorMathType"]
        | "unique_group"
        | "hogql"
        | null;
      /** @default null */
      math_group_type_index?: components["schemas"]["MathGroupTypeIndex"] | null;
      /**
       * Math Hogql
       * @default null
       */
      math_hogql?: string | null;
      /**
       * Math Property
       * @default null
       */
      math_property?: string | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Name
       * @default null
       */
      name?: string | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Response
       * @description Cached query response
       * @default null
       */
      response?: Record<string, never> | null;
    };
    ActivityLog: {
      /** Format: uuid */
      id: string;
      user: components["schemas"]["UserBasic"];
      /** @description is the date of this log item newer than the user's bookmark */
      unread: boolean;
      /** Format: uuid */
      organization_id?: string | null;
      was_impersonated?: boolean | null;
      is_system?: boolean | null;
      activity: string;
      item_id?: string | null;
      scope: string;
      detail?: unknown;
      /** Format: date-time */
      created_at?: string;
    };
    /** ActorsQuery */
    ActorsQuery: {
      /**
       * Fixedproperties
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Kind
       * @default ActorsQuery
       * @constant
       */
      kind?: "ActorsQuery";
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /**
       * Orderby
       * @default null
       */
      orderBy?: string[] | null;
      /**
       * Properties
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["ActorsQueryResponse"] | null;
      /**
       * Search
       * @default null
       */
      search?: string | null;
      /**
       * Select
       * @default null
       */
      select?: string[] | null;
      /**
       * Source
       * @default null
       */
      source?:
        | components["schemas"]["InsightActorsQuery"]
        | components["schemas"]["FunnelsActorsQuery"]
        | components["schemas"]["FunnelCorrelationActorsQuery"]
        | components["schemas"]["HogQLQuery"]
        | null;
    };
    /** ActorsQueryResponse */
    ActorsQueryResponse: {
      /** Columns */
      columns: unknown[];
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /** Hogql */
      hogql: string;
      /** Limit */
      limit: number;
      /**
       * Missing Actors Count
       * @default null
       */
      missing_actors_count?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** Offset */
      offset: number;
      /** Results */
      results: unknown[][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /** Types */
      types: string[];
    };
    /**
     * AggregationAxisFormat
     * @enum {string}
     */
    AggregationAxisFormat:
      | "numeric"
      | "duration"
      | "duration_ms"
      | "percentage"
      | "percentage_scaled";
    Annotation: {
      id: number;
      content?: string | null;
      /** Format: date-time */
      date_marker?: string | null;
      creation_type?: components["schemas"]["CreationTypeEnum"];
      dashboard_item?: number | null;
      insight_short_id: string | null;
      insight_name: string | null;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      updated_at: string;
      deleted?: boolean;
      scope?: components["schemas"]["AnnotationScopeEnum"];
    };
    /**
     * @description * `dashboard_item` - insight
     * * `project` - project
     * * `organization` - organization
     * @enum {string}
     */
    AnnotationScopeEnum: "dashboard_item" | "project" | "organization";
    /** AutocompleteCompletionItem */
    AutocompleteCompletionItem: {
      /**
       * Detail
       * @description A human-readable string with additional information about this item, like type or symbol information.
       * @default null
       */
      detail?: string | null;
      /**
       * Documentation
       * @description A human-readable string that represents a doc-comment.
       * @default null
       */
      documentation?: string | null;
      /**
       * Inserttext
       * @description A string or snippet that should be inserted in a document when selecting this completion.
       */
      insertText: string;
      /** @description The kind of this completion item. Based on the kind an icon is chosen by the editor. */
      kind: components["schemas"]["Kind"];
      /**
       * Label
       * @description The label of this completion item. By default this is also the text that is inserted when selecting this completion.
       */
      label: string;
    };
    /**
     * BaseMathType
     * @enum {string}
     */
    BaseMathType: "total" | "dau" | "weekly_active" | "monthly_active" | "unique_session";
    /** @description Serializer for a BatchExport model. */
    BatchExport: {
      /** Format: uuid */
      id: string;
      /** @description The team this belongs to. */
      team_id: number;
      /** @description A human-readable name for this BatchExport. */
      name: string;
      destination: components["schemas"]["BatchExportDestination"];
      interval: components["schemas"]["IntervalEnum"];
      /** @description Whether this BatchExport is paused or not. */
      paused?: boolean;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExport was created.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExport was last updated.
       */
      last_updated_at: string;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExport was last paused.
       */
      last_paused_at?: string | null;
      /**
       * Format: date-time
       * @description Time before which any Batch Export runs won't be triggered.
       */
      start_at?: string | null;
      /**
       * Format: date-time
       * @description Time after which any Batch Export runs won't be triggered.
       */
      end_at?: string | null;
      latest_runs: readonly components["schemas"]["BatchExportRun"][];
      hogql_query?: string;
      /** @description A schema of custom fields to select when exporting data. */
      schema: unknown;
    };
    /** @description Serializer for an BatchExportDestination model. */
    BatchExportDestination: {
      /**
       * @description A choice of supported BatchExportDestination types.
       *
       * * `S3` - S3
       * * `Snowflake` - Snowflake
       * * `Postgres` - Postgres
       * * `Redshift` - Redshift
       * * `BigQuery` - Bigquery
       * * `HTTP` - Http
       * * `NoOp` - Noop
       */
      type: components["schemas"]["BatchExportDestinationTypeEnum"];
      /** @description A JSON field to store all configuration parameters required to access a BatchExportDestination. */
      config?: unknown;
    };
    /**
     * @description * `S3` - S3
     * * `Snowflake` - Snowflake
     * * `Postgres` - Postgres
     * * `Redshift` - Redshift
     * * `BigQuery` - Bigquery
     * * `HTTP` - Http
     * * `NoOp` - Noop
     * @enum {string}
     */
    BatchExportDestinationTypeEnum:
      | "S3"
      | "Snowflake"
      | "Postgres"
      | "Redshift"
      | "BigQuery"
      | "HTTP"
      | "NoOp";
    BatchExportLogEntry: {
      team_id: number;
      batch_export_id: string;
      run_id: string;
      /** Format: date-time */
      timestamp: string;
      level: components["schemas"]["BatchExportLogEntryLevelEnum"];
      message: string;
    };
    /**
     * @description * `DEBUG` - DEBUG
     * * `LOG` - LOG
     * * `INFO` - INFO
     * * `WARNING` - WARNING
     * * `ERROR` - ERROR
     * @enum {string}
     */
    BatchExportLogEntryLevelEnum: "DEBUG" | "LOG" | "INFO" | "WARNING" | "ERROR";
    /** @description Serializer for a BatchExportRun model. */
    BatchExportRun: {
      /** Format: uuid */
      id: string;
      /**
       * @description The status of this run.
       *
       * * `Cancelled` - Cancelled
       * * `Completed` - Completed
       * * `ContinuedAsNew` - Continued As New
       * * `Failed` - Failed
       * * `FailedRetryable` - Failed Retryable
       * * `Terminated` - Terminated
       * * `TimedOut` - Timedout
       * * `Running` - Running
       * * `Starting` - Starting
       */
      status: components["schemas"]["StatusEnum"];
      /** @description The number of records that have been exported. */
      records_completed?: number | null;
      /** @description The latest error that occurred during this run. */
      latest_error?: string | null;
      /**
       * Format: date-time
       * @description The start of the data interval.
       */
      data_interval_start: string;
      /**
       * Format: date-time
       * @description The end of the data interval.
       */
      data_interval_end: string;
      /** @description An opaque cursor that may be used to resume. */
      cursor?: string | null;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExportRun was created.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExportRun finished, successfully or not.
       */
      finished_at?: string | null;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExportRun was last updated.
       */
      last_updated_at: string;
      /** @description The total count of records that should be exported in this BatchExportRun. */
      records_total_count?: number | null;
      /**
       * Format: uuid
       * @description The BatchExport this run belongs to.
       */
      batch_export: string;
    };
    /** @enum {unknown} */
    BlankEnum: "";
    /** Breakdown */
    Breakdown: {
      /**
       * Normalize Url
       * @default null
       */
      normalize_url?: boolean | null;
      /** Property */
      property: string | number;
      type: components["schemas"]["BreakdownType"];
    };
    /**
     * BreakdownAttributionType
     * @enum {string}
     */
    BreakdownAttributionType: "first_touch" | "last_touch" | "all_events" | "step";
    /** BreakdownFilter */
    BreakdownFilter: {
      /**
       * Breakdown
       * @default null
       */
      breakdown?: string | number | (string | number)[] | null;
      /**
       * Breakdown Group Type Index
       * @default null
       */
      breakdown_group_type_index?: number | null;
      /**
       * Breakdown Hide Other Aggregation
       * @default null
       */
      breakdown_hide_other_aggregation?: boolean | null;
      /**
       * Breakdown Histogram Bin Count
       * @default null
       */
      breakdown_histogram_bin_count?: number | null;
      /**
       * Breakdown Limit
       * @default null
       */
      breakdown_limit?: number | null;
      /**
       * Breakdown Normalize Url
       * @default null
       */
      breakdown_normalize_url?: boolean | null;
      /** @default null */
      breakdown_type?: components["schemas"]["BreakdownType"] | null;
      /**
       * Breakdowns
       * @default null
       */
      breakdowns?: components["schemas"]["Breakdown"][] | null;
    };
    /** BreakdownItem */
    BreakdownItem: {
      /** Label */
      label: string;
      /** Value */
      value: string | number;
    };
    /**
     * BreakdownType
     * @enum {string}
     */
    BreakdownType: "cohort" | "person" | "event" | "group" | "session" | "hogql" | "data_warehouse";
    /**
     * @description * `event` - event
     * * `person` - person
     * * `cohort` - cohort
     * * `group` - group
     * * `session` - session
     * * `hogql` - hogql
     * @enum {string}
     */
    BreakdownTypeEnum: "event" | "person" | "cohort" | "group" | "session" | "hogql";
    /**
     * @description * `monday` - Monday
     * * `tuesday` - Tuesday
     * * `wednesday` - Wednesday
     * * `thursday` - Thursday
     * * `friday` - Friday
     * * `saturday` - Saturday
     * * `sunday` - Sunday
     * @enum {string}
     */
    ByweekdayEnum:
      | "monday"
      | "tuesday"
      | "wednesday"
      | "thursday"
      | "friday"
      | "saturday"
      | "sunday";
    /** ChartAxis */
    ChartAxis: {
      /** Column */
      column: string;
    };
    /**
     * ChartDisplayType
     * @enum {string}
     */
    ChartDisplayType:
      | "ActionsLineGraph"
      | "ActionsBar"
      | "ActionsAreaGraph"
      | "ActionsLineGraphCumulative"
      | "BoldNumber"
      | "ActionsPie"
      | "ActionsBarValue"
      | "ActionsTable"
      | "WorldMap";
    /** ChartSettings */
    ChartSettings: {
      /**
       * Goallines
       * @default null
       */
      goalLines?: components["schemas"]["GoalLine"][] | null;
      /** @default null */
      xAxis?: components["schemas"]["ChartAxis"] | null;
      /**
       * Yaxis
       * @default null
       */
      yAxis?: components["schemas"]["ChartAxis"][] | null;
    };
    ClickhouseEvent: {
      id: string;
      distinct_id: string;
      properties: string;
      event: string;
      timestamp: string;
      person: string;
      elements: string;
      elements_chain: string;
    };
    Cohort: {
      id: number;
      name?: string | null;
      description?: string;
      groups?: unknown;
      deleted?: boolean;
      filters?: unknown;
      query?: unknown;
      is_calculating: boolean;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      last_calculation: string | null;
      errors_calculating: number;
      count: number | null;
      is_static?: boolean;
      experiment_set: readonly number[];
    };
    /** CohortPropertyFilter */
    CohortPropertyFilter: {
      /**
       * Key
       * @default id
       * @constant
       */
      key?: "id";
      /**
       * Label
       * @default null
       */
      label?: string | null;
      /**
       * Type
       * @default cohort
       * @constant
       */
      type?: "cohort";
      /** Value */
      value: number;
    };
    /**
     * Compare
     * @enum {string}
     */
    Compare: "current" | "previous";
    /** CompareItem */
    CompareItem: {
      /** Label */
      label: string;
      /** Value */
      value: string;
    };
    /**
     * CorrelationType
     * @enum {string}
     */
    CorrelationType: "success" | "failure";
    /**
     * CountPerActorMathType
     * @enum {string}
     */
    CountPerActorMathType:
      | "avg_count_per_actor"
      | "min_count_per_actor"
      | "max_count_per_actor"
      | "median_count_per_actor"
      | "p90_count_per_actor"
      | "p95_count_per_actor"
      | "p99_count_per_actor";
    /**
     * @description * `default` - Default
     * * `template` - Template
     * * `duplicate` - Duplicate
     * @enum {string}
     */
    CreationModeEnum: "default" | "template" | "duplicate";
    /**
     * @description * `USR` - user
     * * `GIT` - GitHub
     * @enum {string}
     */
    CreationTypeEnum: "USR" | "GIT";
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    Dashboard: {
      id: number;
      name?: string | null;
      description?: string;
      pinned?: boolean;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      is_shared: boolean;
      deleted?: boolean;
      creation_mode: components["schemas"]["CreationModeEnum"];
      use_template?: string;
      use_dashboard?: number | null;
      /** @default false */
      delete_insights?: boolean;
      filters?: unknown;
      tags?: unknown[];
      tiles:
        | readonly {
            [key: string]: unknown;
          }[]
        | null;
      restriction_level?: components["schemas"]["RestrictionLevelEnum"];
      effective_restriction_level: components["schemas"]["EffectiveRestrictionLevelEnum"];
      effective_privilege_level: components["schemas"]["EffectivePrivilegeLevelEnum"];
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    DashboardBasic: {
      id: number;
      name: string | null;
      description: string;
      pinned: boolean;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      is_shared: boolean;
      deleted: boolean;
      creation_mode: components["schemas"]["CreationModeEnum"];
      tags?: unknown[];
      restriction_level: components["schemas"]["RestrictionLevelEnum"];
      effective_restriction_level: components["schemas"]["EffectiveRestrictionLevelEnum"];
      effective_privilege_level: components["schemas"]["EffectivePrivilegeLevelEnum"];
    };
    DashboardCollaborator: {
      /** Format: uuid */
      id: string;
      dashboard_id: number;
      user: components["schemas"]["UserBasic"];
      level: components["schemas"]["LevelD7eEnum"];
      /** Format: date-time */
      added_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      user_uuid: string;
    };
    DashboardTemplate: {
      /** Format: uuid */
      id: string;
      template_name?: string | null;
      dashboard_description?: string | null;
      dashboard_filters?: unknown;
      tags?: string[] | null;
      tiles?: unknown;
      variables?: unknown;
      deleted?: boolean | null;
      /** Format: date-time */
      created_at: string | null;
      created_by?: number | null;
      image_url?: string | null;
      team_id: number | null;
      scope?:
        | components["schemas"]["DashboardTemplateScopeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
    };
    /**
     * @description * `team` - Only team
     * * `global` - Global
     * * `feature_flag` - Feature Flag
     * @enum {string}
     */
    DashboardTemplateScopeEnum: "team" | "global" | "feature_flag";
    DashboardTileBasic: {
      id: number;
      dashboard_id: number;
      deleted?: boolean | null;
    };
    /** DataTableNode */
    DataTableNode: {
      /**
       * Allowsorting
       * @description Can the user click on column headers to sort the table? (default: true)
       * @default null
       */
      allowSorting?: boolean | null;
      /**
       * Columns
       * @description Columns shown in the table, unless the `source` provides them.
       * @default null
       */
      columns?: string[] | null;
      /**
       * Embedded
       * @description Uses the embedded version of LemonTable
       * @default null
       */
      embedded?: boolean | null;
      /**
       * Expandable
       * @description Can expand row to show raw event data (default: true)
       * @default null
       */
      expandable?: boolean | null;
      /**
       * Full
       * @description Show with most visual options enabled. Used in scenes.
       * @default null
       */
      full?: boolean | null;
      /**
       * Hiddencolumns
       * @description Columns that aren't shown in the table, even if in columns or returned data
       * @default null
       */
      hiddenColumns?: string[] | null;
      /**
       * Kind
       * @default DataTableNode
       * @constant
       */
      kind?: "DataTableNode";
      /**
       * Propertiesviaurl
       * @description Link properties via the URL (default: false)
       * @default null
       */
      propertiesViaUrl?: boolean | null;
      /**
       * Showactions
       * @description Show the kebab menu at the end of the row
       * @default null
       */
      showActions?: boolean | null;
      /**
       * Showcolumnconfigurator
       * @description Show a button to configure the table's columns if possible
       * @default null
       */
      showColumnConfigurator?: boolean | null;
      /**
       * Showdaterange
       * @description Show date range selector
       * @default null
       */
      showDateRange?: boolean | null;
      /**
       * Showelapsedtime
       * @description Show the time it takes to run a query
       * @default null
       */
      showElapsedTime?: boolean | null;
      /**
       * Showeventfilter
       * @description Include an event filter above the table (EventsNode only)
       * @default null
       */
      showEventFilter?: boolean | null;
      /**
       * Showexport
       * @description Show the export button
       * @default null
       */
      showExport?: boolean | null;
      /**
       * Showhogqleditor
       * @description Include a HogQL query editor above HogQL tables
       * @default null
       */
      showHogQLEditor?: boolean | null;
      /**
       * Showopeneditorbutton
       * @description Show a button to open the current query as a new insight. (default: true)
       * @default null
       */
      showOpenEditorButton?: boolean | null;
      /**
       * Showpersistentcolumnconfigurator
       * @description Show a button to configure and persist the table's default columns if possible
       * @default null
       */
      showPersistentColumnConfigurator?: boolean | null;
      /**
       * Showpropertyfilter
       * @description Include a property filter above the table
       * @default null
       */
      showPropertyFilter?: boolean | null;
      /**
       * Showreload
       * @description Show a reload button
       * @default null
       */
      showReload?: boolean | null;
      /**
       * Showresultstable
       * @description Show a results table
       * @default null
       */
      showResultsTable?: boolean | null;
      /**
       * Showsavedqueries
       * @description Shows a list of saved queries
       * @default null
       */
      showSavedQueries?: boolean | null;
      /**
       * Showsearch
       * @description Include a free text search field (PersonsNode only)
       * @default null
       */
      showSearch?: boolean | null;
      /**
       * Showtestaccountfilters
       * @description Show filter to exclude test accounts
       * @default null
       */
      showTestAccountFilters?: boolean | null;
      /**
       * Showtimings
       * @description Show a detailed query timing breakdown
       * @default null
       */
      showTimings?: boolean | null;
      /**
       * Source
       * @description Source of the events
       */
      source:
        | components["schemas"]["EventsNode"]
        | components["schemas"]["EventsQuery"]
        | components["schemas"]["PersonsNode"]
        | components["schemas"]["ActorsQuery"]
        | components["schemas"]["HogQLQuery"]
        | components["schemas"]["TimeToSeeDataSessionsQuery"]
        | components["schemas"]["WebOverviewQuery"]
        | components["schemas"]["WebStatsTableQuery"]
        | components["schemas"]["WebTopClicksQuery"];
    };
    /** DataVisualizationNode */
    DataVisualizationNode: {
      /** @default null */
      chartSettings?: components["schemas"]["ChartSettings"] | null;
      /** @default null */
      display?: components["schemas"]["ChartDisplayType"] | null;
      /**
       * Kind
       * @default DataVisualizationNode
       * @constant
       */
      kind?: "DataVisualizationNode";
      source: components["schemas"]["HogQLQuery"];
    };
    /** DataWarehouseEventsModifier */
    DataWarehouseEventsModifier: {
      /** Distinct Id Field */
      distinct_id_field: string;
      /** Id Field */
      id_field: string;
      /** Table Name */
      table_name: string;
      /** Timestamp Field */
      timestamp_field: string;
    };
    /** DataWarehouseNode */
    DataWarehouseNode: {
      /**
       * Custom Name
       * @default null
       */
      custom_name?: string | null;
      /** Distinct Id Field */
      distinct_id_field: string;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /** Id */
      id: string;
      /** Id Field */
      id_field: string;
      /**
       * Kind
       * @default DataWarehouseNode
       * @constant
       */
      kind?: "DataWarehouseNode";
      /**
       * Math
       * @default null
       */
      math?:
        | components["schemas"]["BaseMathType"]
        | components["schemas"]["PropertyMathType"]
        | components["schemas"]["CountPerActorMathType"]
        | "unique_group"
        | "hogql"
        | null;
      /** @default null */
      math_group_type_index?: components["schemas"]["MathGroupTypeIndex"] | null;
      /**
       * Math Hogql
       * @default null
       */
      math_hogql?: string | null;
      /**
       * Math Property
       * @default null
       */
      math_property?: string | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Name
       * @default null
       */
      name?: string | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Response
       * @description Cached query response
       * @default null
       */
      response?: Record<string, never> | null;
      /** Table Name */
      table_name: string;
      /** Timestamp Field */
      timestamp_field: string;
    };
    /** DataWarehousePersonPropertyFilter */
    DataWarehousePersonPropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @default data_warehouse_person_property
       * @constant
       */
      type?: "data_warehouse_person_property";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    /** DataWarehousePropertyFilter */
    DataWarehousePropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @default data_warehouse
       * @constant
       */
      type?: "data_warehouse";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    /** DatabaseSchemaQuery */
    DatabaseSchemaQuery: {
      /**
       * Kind
       * @default DatabaseSchemaQuery
       * @constant
       */
      kind?: "DatabaseSchemaQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Response
       * @description Cached query response
       * @default null
       */
      response?: {
        [key: string]: components["schemas"]["DatabaseSchemaQueryResponseField"][];
      } | null;
    };
    /** DatabaseSchemaQueryResponseField */
    DatabaseSchemaQueryResponseField: {
      /**
       * Chain
       * @default null
       */
      chain?: string[] | null;
      /**
       * Fields
       * @default null
       */
      fields?: string[] | null;
      /** Key */
      key: string;
      /**
       * Table
       * @default null
       */
      table?: string | null;
      /** Type */
      type: string;
    };
    /** DateRange */
    DateRange: {
      /**
       * Date From
       * @default null
       */
      date_from?: string | null;
      /**
       * Date To
       * @default null
       */
      date_to?: string | null;
      /**
       * Explicitdate
       * @description Whether the date_from and date_to should be used verbatim. Disables rounding to the start and end of period.
       * @default null
       */
      explicitDate?: boolean | null;
    };
    /** DayItem */
    DayItem: {
      /** Label */
      label: string;
      /** Value */
      value: string | number;
    };
    /**
     * @description * `ActionsLineGraph` - ActionsLineGraph
     * * `ActionsLineGraphCumulative` - ActionsLineGraphCumulative
     * * `ActionsTable` - ActionsTable
     * * `ActionsPie` - ActionsPie
     * * `ActionsBar` - ActionsBar
     * * `ActionsBarValue` - ActionsBarValue
     * * `WorldMap` - WorldMap
     * * `BoldNumber` - BoldNumber
     * @enum {string}
     */
    DisplayEnum:
      | "ActionsLineGraph"
      | "ActionsLineGraphCumulative"
      | "ActionsTable"
      | "ActionsPie"
      | "ActionsBar"
      | "ActionsBarValue"
      | "WorldMap"
      | "BoldNumber";
    EarlyAccessFeature: {
      /** Format: uuid */
      id: string;
      feature_flag: components["schemas"]["MinimalFeatureFlag"];
      name: string;
      description?: string;
      stage: components["schemas"]["StageEnum"];
      /** Format: uri */
      documentation_url?: string;
      /** Format: date-time */
      created_at: string;
    };
    EarlyAccessFeatureSerializerCreateOnly: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      stage: components["schemas"]["StageEnum"];
      /** Format: uri */
      documentation_url?: string;
      /** Format: date-time */
      created_at: string;
      feature_flag_id?: number;
      feature_flag: components["schemas"]["MinimalFeatureFlag"];
    };
    /** @enum {integer} */
    EffectiveMembershipLevelEnum: 1 | 8 | 15;
    /** @enum {integer} */
    EffectivePrivilegeLevelEnum: 21 | 37;
    /** @enum {integer} */
    EffectiveRestrictionLevelEnum: 21 | 37;
    /** ElementPropertyFilter */
    ElementPropertyFilter: {
      key: components["schemas"]["Key"];
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @default element
       * @constant
       */
      type?: "element";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    /** ElementType */
    ElementType: {
      /**
       * Attr Class
       * @default null
       */
      attr_class?: string[] | null;
      /**
       * Attr Id
       * @default null
       */
      attr_id?: string | null;
      /** Attributes */
      attributes: {
        [key: string]: string;
      };
      /**
       * Href
       * @default null
       */
      href?: string | null;
      /**
       * Nth Child
       * @default null
       */
      nth_child?: number | null;
      /**
       * Nth Of Type
       * @default null
       */
      nth_of_type?: number | null;
      /**
       * Order
       * @default null
       */
      order?: number | null;
      /** Tag Name */
      tag_name: string;
      /**
       * Text
       * @default null
       */
      text?: string | null;
    };
    /** EmptyPropertyFilter */
    EmptyPropertyFilter: Record<string, never>;
    /**
     * EntityType
     * @enum {string}
     */
    EntityType: "actions" | "events" | "data_warehouse" | "new_entity";
    /** EventDefinition */
    EventDefinition: {
      /** Elements */
      elements: unknown[];
      /** Event */
      event: string;
      /** Properties */
      properties: Record<string, never>;
    };
    /** EventOddsRatioSerialized */
    EventOddsRatioSerialized: {
      correlation_type: components["schemas"]["CorrelationType"];
      event: components["schemas"]["EventDefinition"];
      /** Failure Count */
      failure_count: number;
      /** Odds Ratio */
      odds_ratio: number;
      /** Success Count */
      success_count: number;
    };
    /** EventPropertyFilter */
    EventPropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      /** @default exact */
      operator?: components["schemas"]["PropertyOperator"] | null;
      /**
       * Type
       * @description Event properties
       * @default event
       * @constant
       */
      type?: "event";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    /** EventType */
    EventType: {
      /** Distinct Id */
      distinct_id: string;
      /** Elements */
      elements: components["schemas"]["ElementType"][];
      /**
       * Elements Chain
       * @default null
       */
      elements_chain?: string | null;
      /** Event */
      event: string;
      /** Id */
      id: string;
      /** @default null */
      person?: components["schemas"]["Person"] | null;
      /** Properties */
      properties: Record<string, never>;
      /** Timestamp */
      timestamp: string;
      /**
       * Uuid
       * @default null
       */
      uuid?: string | null;
    };
    /** EventsNode */
    EventsNode: {
      /**
       * Custom Name
       * @default null
       */
      custom_name?: string | null;
      /**
       * Event
       * @description The event or `null` for all events.
       * @default null
       */
      event?: string | null;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Kind
       * @default EventsNode
       * @constant
       */
      kind?: "EventsNode";
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /**
       * Math
       * @default null
       */
      math?:
        | components["schemas"]["BaseMathType"]
        | components["schemas"]["PropertyMathType"]
        | components["schemas"]["CountPerActorMathType"]
        | "unique_group"
        | "hogql"
        | null;
      /** @default null */
      math_group_type_index?: components["schemas"]["MathGroupTypeIndex"] | null;
      /**
       * Math Hogql
       * @default null
       */
      math_hogql?: string | null;
      /**
       * Math Property
       * @default null
       */
      math_property?: string | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Name
       * @default null
       */
      name?: string | null;
      /**
       * Orderby
       * @description Columns to order by
       * @default null
       */
      orderBy?: string[] | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * @description Return a limited set of data
       * @default null
       */
      response?: components["schemas"]["Response"] | null;
    };
    /** EventsQuery */
    EventsQuery: {
      /**
       * Actionid
       * @description Show events matching a given action
       * @default null
       */
      actionId?: number | null;
      /**
       * After
       * @description Only fetch events that happened after this timestamp
       * @default null
       */
      after?: string | null;
      /**
       * Before
       * @description Only fetch events that happened before this timestamp
       * @default null
       */
      before?: string | null;
      /**
       * Event
       * @description Limit to events matching this string
       * @default null
       */
      event?: string | null;
      /**
       * Filtertestaccounts
       * @description Filter test accounts
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Kind
       * @default EventsQuery
       * @constant
       */
      kind?: "EventsQuery";
      /**
       * Limit
       * @description Number of rows to return
       * @default null
       */
      limit?: number | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @description Number of rows to skip before returning rows
       * @default null
       */
      offset?: number | null;
      /**
       * Orderby
       * @description Columns to order by
       * @default null
       */
      orderBy?: string[] | null;
      /**
       * Personid
       * @description Show events for a given person
       * @default null
       */
      personId?: string | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["EventsQueryResponse"] | null;
      /**
       * Select
       * @description Return a limited set of data. Required.
       */
      select: string[];
      /**
       * Where
       * @description HogQL filters to apply on returned data
       * @default null
       */
      where?: string[] | null;
    };
    /** EventsQueryResponse */
    EventsQueryResponse: {
      /** Columns */
      columns: unknown[];
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /** Hogql */
      hogql: string;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /** Results */
      results: unknown[][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /** Types */
      types: string[];
    };
    Experiment: {
      id: number;
      name: string;
      description?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      feature_flag_key: string;
      feature_flag: components["schemas"]["MinimalFeatureFlag"];
      exposure_cohort: number | null;
      parameters?: unknown;
      secondary_metrics?: unknown;
      filters?: unknown;
      archived?: boolean;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ExplicitTeamMember: {
      /** Format: uuid */
      id: string;
      level?: components["schemas"]["ExplicitTeamMemberLevelEnum"];
      parent_level: number;
      /** Format: uuid */
      parent_membership_id: string;
      /** Format: date-time */
      joined_at: string;
      /** Format: date-time */
      updated_at: string;
      user: components["schemas"]["UserBasic"];
      /** Format: uuid */
      user_uuid: string;
      /** @description If organization level is higher than project level, then that takes precedence over explicit project level. */
      effective_level: components["schemas"]["EffectiveMembershipLevelEnum"];
    };
    /**
     * @description * `1` - member
     * * `8` - administrator
     * @enum {integer}
     */
    ExplicitTeamMemberLevelEnum: 1 | 8;
    /**
     * @description * `image/png` - image/png
     * * `application/pdf` - application/pdf
     * * `text/csv` - text/csv
     * * `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
     * @enum {string}
     */
    ExportFormatEnum:
      | "image/png"
      | "application/pdf"
      | "text/csv"
      | "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    /** @description Standard ExportedAsset serializer that doesn't return content. */
    ExportedAsset: {
      id: number;
      dashboard?: number | null;
      insight?: number | null;
      export_format: components["schemas"]["ExportFormatEnum"];
      /** Format: date-time */
      created_at: string;
      has_content: string;
      export_context?: unknown;
      filename: string;
      /** Format: date-time */
      expires_after?: string | null;
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    FeatureFlag: {
      id: number;
      /** @description contains the description for the flag (field name `name` is kept for backwards-compatibility) */
      name?: string;
      key: string;
      filters?: {
        [key: string]: unknown;
      };
      deleted?: boolean;
      active?: boolean;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      is_simple_flag: boolean;
      rollout_percentage: number | null;
      ensure_experience_continuity?: boolean | null;
      experiment_set: readonly number[];
      surveys: {
        [key: string]: unknown;
      };
      features: {
        [key: string]: unknown;
      };
      rollback_conditions?: unknown;
      performed_rollback?: boolean | null;
      can_edit: boolean;
      tags?: unknown[];
      usage_dashboard: number;
      analytics_dashboards?: number[];
      has_enriched_analytics?: boolean | null;
    };
    FeatureFlagRoleAccess: {
      id: number;
      feature_flag: components["schemas"]["FeatureFlag"];
      role: components["schemas"]["Role"];
      /** Format: uuid */
      role_id: string;
      /** Format: date-time */
      added_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * @description * `21` - Can only view
     * * `37` - Can always edit
     * @enum {integer}
     */
    FeatureFlagsAccessLevelEnum: 21 | 37;
    /** FeaturePropertyFilter */
    FeaturePropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @description Event property with "$feature/" prepended
       * @default feature
       * @constant
       */
      type?: "feature";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    FilterAction: {
      /** @description ID of the action to filter on. For example `2841`. */
      id: string;
      properties?: components["schemas"]["Property"][];
      /**
       * @description How to aggregate results, shown as "counted by" in the interface.
       * - `total` (default): no aggregation, count by events
       * - `dau`: count by unique users. Despite the name, if you select the `interval` to be weekly or monthly, this will show weekly or monthly active users respectively
       * - `weekly_active`: rolling average of users of the last 7 days.
       * - `monthly_active`: rolling average of users of the last month.
       * - `unique_group`: count by group. Requires `math_group_type_index` to be sent. You can get the index by hitting `/api/projects/@current/groups_types/`.
       *
       * All of the below are property aggregations, and require `math_property` to be sent with an event property.
       * - `sum`: sum of a numeric property.
       * - `min`: min of a numeric property.
       * - `max`: max of a numeric property.
       * - `median`: median of a numeric property.
       * - `p90`: 90th percentile of a numeric property.
       * - `p95` 95th percentile of a numeric property.
       * - `p99`: 99th percentile of a numeric property.
       *
       *
       * * `total` - total
       * * `dau` - dau
       * * `weekly_active` - weekly_active
       * * `monthly_active` - monthly_active
       * * `unique_group` - unique_group
       * * `unique_session` - unique_session
       * * `sum` - sum
       * * `min` - min
       * * `max` - max
       * * `avg` - avg
       * * `median` - median
       * * `p90` - p90
       * * `p95` - p95
       * * `p99` - p99
       * * `min_count_per_actor` - min_count_per_actor
       * * `max_count_per_actor` - max_count_per_actor
       * * `avg_count_per_actor` - avg_count_per_actor
       * * `median_count_per_actor` - median_count_per_actor
       * * `p90_count_per_actor` - p90_count_per_actor
       * * `p95_count_per_actor` - p95_count_per_actor
       * * `p99_count_per_actor` - p99_count_per_actor
       * * `hogql` - hogql
       * @default total
       */
      math?: components["schemas"]["MathEnum"];
    };
    FilterEvent: {
      /** @description Name of the event to filter on. For example `$pageview` or `user sign up`. */
      id: string;
      properties?: components["schemas"]["Property"][];
      /**
       * @description How to aggregate results, shown as "counted by" in the interface.
       * - `total` (default): no aggregation, count by events
       * - `dau`: count by unique users. Despite the name, if you select the `interval` to be weekly or monthly, this will show weekly or monthly active users respectively
       * - `weekly_active`: rolling average of users of the last 7 days.
       * - `monthly_active`: rolling average of users of the last month.
       * - `unique_group`: count by group. Requires `math_group_type_index` to be sent. You can get the index by hitting `/api/projects/@current/groups_types/`.
       *
       * All of the below are property aggregations, and require `math_property` to be sent with an event property.
       * - `sum`: sum of a numeric property.
       * - `min`: min of a numeric property.
       * - `max`: max of a numeric property.
       * - `median`: median of a numeric property.
       * - `p90`: 90th percentile of a numeric property.
       * - `p95` 95th percentile of a numeric property.
       * - `p99`: 99th percentile of a numeric property.
       *
       *
       * * `total` - total
       * * `dau` - dau
       * * `weekly_active` - weekly_active
       * * `monthly_active` - monthly_active
       * * `unique_group` - unique_group
       * * `unique_session` - unique_session
       * * `sum` - sum
       * * `min` - min
       * * `max` - max
       * * `avg` - avg
       * * `median` - median
       * * `p90` - p90
       * * `p95` - p95
       * * `p99` - p99
       * * `min_count_per_actor` - min_count_per_actor
       * * `max_count_per_actor` - max_count_per_actor
       * * `avg_count_per_actor` - avg_count_per_actor
       * * `median_count_per_actor` - median_count_per_actor
       * * `p90_count_per_actor` - p90_count_per_actor
       * * `p95_count_per_actor` - p95_count_per_actor
       * * `p99_count_per_actor` - p99_count_per_actor
       * * `hogql` - hogql
       * @default total
       */
      math?: components["schemas"]["MathEnum"];
    };
    /**
     * FilterLogicalOperator
     * @enum {string}
     */
    FilterLogicalOperator: "AND" | "OR";
    /**
     * @description * `daily` - Daily
     * * `weekly` - Weekly
     * * `monthly` - Monthly
     * * `yearly` - Yearly
     * @enum {string}
     */
    FrequencyEnum: "daily" | "weekly" | "monthly" | "yearly";
    Funnel: {
      /** @description Events to filter on. One of `events` or `actions` is required. */
      events?: components["schemas"]["FilterEvent"][];
      /** @description Actions to filter on. One of `events` or `actions` is required. */
      actions?: components["schemas"]["FilterAction"][];
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /**
       * @description Whether to filter out internal and test accounts. See "project settings" in your PostHog account for the filters.
       * @default false
       */
      filter_test_accounts?: boolean;
      /**
       * @description What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_from?: string;
      /**
       * @description What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_to?: string;
      /**
       * @description A property or cohort to break down on. You can select the type of the property with breakdown_type.
       * - `event` (default): a property key
       * - `person`: a person property key
       * - `cohort`: an array of cohort IDs (ie `[9581,5812]`)
       */
      breakdown?: string;
      /**
       * @description Type of property to break down on.
       *
       * * `event` - event
       * * `person` - person
       * * `cohort` - cohort
       * * `group` - group
       * * `session` - session
       * * `hogql` - hogql
       * @default event
       */
      breakdown_type?: components["schemas"]["BreakdownTypeEnum"];
      /**
       * @description Funnel window size. Set in combination with funnel_window_interval, so defaults to 'days'.
       * @default 14
       */
      funnel_window_interval?: number;
      /**
       * @description The type of interval. Used in combination with `funnel_window_intervals`.
       *
       * * `DAY` - DAY
       * * `SECOND` - SECOND
       * * `MINUTE` - MINUTE
       * * `HOUR` - HOUR
       * * `WEEK` - WEEK
       * * `MONTH` - MONTH
       * @default days
       */
      funnel_window_interval_type?: components["schemas"]["FunnelWindowIntervalTypeEnum"];
      /**
       * @description The visualisation type.
       * - `steps` Track instances progress between steps of the funnel
       * - `trends` Track how this funnel's conversion rate is trending over time.
       * - `time_to_convert` Track how long it takes for instances to convert
       *
       * * `trends` - trends
       * * `time_to_convert` - time_to_convert
       * * `steps` - steps
       * @default steps
       */
      funnel_viz_type?: components["schemas"]["FunnelVizTypeEnum"];
      /**
       * @description - `ordered` - Step B must happen after Step A, but any number events can happen between A and B.
       * - `strict` - Step B must happen directly after Step A without any events in between.
       * - `unordered` - Steps can be completed in any sequence.
       *
       * * `strict` - strict
       * * `unordered` - unordered
       * * `ordered` - ordered
       * @default ordered
       */
      funnel_order_type?: components["schemas"]["FunnelOrderTypeEnum"];
      /** @description Exclude users/groups that completed the specified event between two specific steps. Note that these users/groups will be completely excluded from the entire funnel. */
      exclusions?: components["schemas"]["FunnelExclusion"][];
      /**
       * @description Aggregate by users or by groups. `0` means user, `>0` means a group. See interface for the corresponding ID of the group.
       * @default 0
       */
      aggregation_group_type_index?: number;
      /** @default 10 */
      breakdown_limit?: number;
      /**
       * @description (DEPRECATED) Funnel window size in days. Use `funnel_window_interval` and `funnel_window_interval_type`
       * @default 14
       */
      funnel_window_days?: number;
    };
    /**
     * FunnelConversionWindowTimeUnit
     * @enum {string}
     */
    FunnelConversionWindowTimeUnit: "second" | "minute" | "hour" | "day" | "week" | "month";
    /** FunnelCorrelationActorsQuery */
    FunnelCorrelationActorsQuery: {
      /**
       * Funnelcorrelationpersonconverted
       * @default null
       */
      funnelCorrelationPersonConverted?: boolean | null;
      /**
       * Funnelcorrelationpersonentity
       * @default null
       */
      funnelCorrelationPersonEntity?:
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["DataWarehouseNode"]
        | null;
      /**
       * Funnelcorrelationpropertyvalues
       * @default null
       */
      funnelCorrelationPropertyValues?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Includerecordings
       * @default null
       */
      includeRecordings?: boolean | null;
      /**
       * Kind
       * @default FunnelCorrelationActorsQuery
       * @constant
       */
      kind?: "FunnelCorrelationActorsQuery";
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** @default null */
      response?: components["schemas"]["ActorsQueryResponse"] | null;
      source: components["schemas"]["FunnelCorrelationQuery"];
    };
    /** FunnelCorrelationQuery */
    FunnelCorrelationQuery: {
      /**
       * Funnelcorrelationeventexcludepropertynames
       * @default null
       */
      funnelCorrelationEventExcludePropertyNames?: string[] | null;
      /**
       * Funnelcorrelationeventnames
       * @default null
       */
      funnelCorrelationEventNames?: string[] | null;
      /**
       * Funnelcorrelationexcludeeventnames
       * @default null
       */
      funnelCorrelationExcludeEventNames?: string[] | null;
      /**
       * Funnelcorrelationexcludenames
       * @default null
       */
      funnelCorrelationExcludeNames?: string[] | null;
      /**
       * Funnelcorrelationnames
       * @default null
       */
      funnelCorrelationNames?: string[] | null;
      funnelCorrelationType: components["schemas"]["FunnelCorrelationResultsType"];
      /**
       * Kind
       * @default FunnelCorrelationQuery
       * @constant
       */
      kind?: "FunnelCorrelationQuery";
      /** @default null */
      response?: components["schemas"]["FunnelCorrelationResponse"] | null;
      source: components["schemas"]["FunnelsActorsQuery"];
    };
    /** FunnelCorrelationResponse */
    FunnelCorrelationResponse: {
      /**
       * Columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      results: components["schemas"]["FunnelCorrelationResult"];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @default null
       */
      types?: unknown[] | null;
    };
    /** FunnelCorrelationResult */
    FunnelCorrelationResult: {
      /** Events */
      events: components["schemas"]["EventOddsRatioSerialized"][];
      /** Skewed */
      skewed: boolean;
    };
    /**
     * FunnelCorrelationResultsType
     * @enum {string}
     */
    FunnelCorrelationResultsType: "events" | "properties" | "event_with_properties";
    FunnelExclusion: {
      /** @description Name of the event to filter on. For example `$pageview` or `user sign up`. */
      id: string;
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /** @default 0 */
      funnel_from_step?: number;
      /** @default 1 */
      funnel_to_step?: number;
    };
    /** FunnelExclusionActionsNode */
    FunnelExclusionActionsNode: {
      /**
       * Custom Name
       * @default null
       */
      custom_name?: string | null;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /** Funnelfromstep */
      funnelFromStep: number;
      /** Funneltostep */
      funnelToStep: number;
      /** Id */
      id: number;
      /**
       * Kind
       * @default ActionsNode
       * @constant
       */
      kind?: "ActionsNode";
      /**
       * Math
       * @default null
       */
      math?:
        | components["schemas"]["BaseMathType"]
        | components["schemas"]["PropertyMathType"]
        | components["schemas"]["CountPerActorMathType"]
        | "unique_group"
        | "hogql"
        | null;
      /** @default null */
      math_group_type_index?: components["schemas"]["MathGroupTypeIndex"] | null;
      /**
       * Math Hogql
       * @default null
       */
      math_hogql?: string | null;
      /**
       * Math Property
       * @default null
       */
      math_property?: string | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Name
       * @default null
       */
      name?: string | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Response
       * @description Cached query response
       * @default null
       */
      response?: Record<string, never> | null;
    };
    /** FunnelExclusionEventsNode */
    FunnelExclusionEventsNode: {
      /**
       * Custom Name
       * @default null
       */
      custom_name?: string | null;
      /**
       * Event
       * @description The event or `null` for all events.
       * @default null
       */
      event?: string | null;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /** Funnelfromstep */
      funnelFromStep: number;
      /** Funneltostep */
      funnelToStep: number;
      /**
       * Kind
       * @default EventsNode
       * @constant
       */
      kind?: "EventsNode";
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /**
       * Math
       * @default null
       */
      math?:
        | components["schemas"]["BaseMathType"]
        | components["schemas"]["PropertyMathType"]
        | components["schemas"]["CountPerActorMathType"]
        | "unique_group"
        | "hogql"
        | null;
      /** @default null */
      math_group_type_index?: components["schemas"]["MathGroupTypeIndex"] | null;
      /**
       * Math Hogql
       * @default null
       */
      math_hogql?: string | null;
      /**
       * Math Property
       * @default null
       */
      math_property?: string | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Name
       * @default null
       */
      name?: string | null;
      /**
       * Orderby
       * @description Columns to order by
       * @default null
       */
      orderBy?: string[] | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * @description Return a limited set of data
       * @default null
       */
      response?: components["schemas"]["Response"] | null;
    };
    /**
     * FunnelLayout
     * @enum {string}
     */
    FunnelLayout: "horizontal" | "vertical";
    /**
     * @description * `strict` - strict
     * * `unordered` - unordered
     * * `ordered` - ordered
     * @enum {string}
     */
    FunnelOrderTypeEnum: "strict" | "unordered" | "ordered";
    /**
     * FunnelPathType
     * @enum {string}
     */
    FunnelPathType:
      | "funnel_path_before_step"
      | "funnel_path_between_steps"
      | "funnel_path_after_step";
    /** FunnelPathsFilter */
    FunnelPathsFilter: {
      /** @default null */
      funnelPathType?: components["schemas"]["FunnelPathType"] | null;
      funnelSource: components["schemas"]["FunnelsQuery"];
      /**
       * Funnelstep
       * @default null
       */
      funnelStep?: number | null;
    };
    /**
     * FunnelStepReference
     * @enum {string}
     */
    FunnelStepReference: "total" | "previous";
    FunnelStepsResult: {
      /** @description Number of people in this step. */
      count: number;
      /** @description Corresponds to the `id` of the entities passed through to `events` or `actions`. */
      action_id: string;
      /**
       * Format: double
       * @description Average conversion time of person or groups between steps. `null` for the first step.
       */
      average_conversion_time: number;
      /**
       * Format: double
       * @description Median conversion time of person or groups between steps. `null` for the first step.
       */
      median_conversion_time: number;
      /** @description Path of a URL to get a list of people that converted after this step. In this format: `/api/person/funnel?...` */
      converted_people_url: string;
      /** @description Path of a URL to get a list of people that dropped after this step. In this format: `/api/person/funnel?...` */
      dropped_people_url: string;
      /** @description Order of this step in the funnel. The API should return the steps in order anyway. */
      order: string;
    };
    FunnelStepsResults: {
      /** @description Whether the result is cached. To force a refresh, pass ?refresh=true */
      is_cached: boolean;
      /**
       * Format: date-time
       * @description If the result is cached, when it was last refreshed.
       */
      last_refresh: string;
      /**
       * @description Timezone the chart is displayed in
       *
       * * `Africa/Abidjan` - Africa/Abidjan
       * * `Africa/Accra` - Africa/Accra
       * * `Africa/Addis_Ababa` - Africa/Addis_Ababa
       * * `Africa/Algiers` - Africa/Algiers
       * * `Africa/Asmara` - Africa/Asmara
       * * `Africa/Asmera` - Africa/Asmera
       * * `Africa/Bamako` - Africa/Bamako
       * * `Africa/Bangui` - Africa/Bangui
       * * `Africa/Banjul` - Africa/Banjul
       * * `Africa/Bissau` - Africa/Bissau
       * * `Africa/Blantyre` - Africa/Blantyre
       * * `Africa/Brazzaville` - Africa/Brazzaville
       * * `Africa/Bujumbura` - Africa/Bujumbura
       * * `Africa/Cairo` - Africa/Cairo
       * * `Africa/Casablanca` - Africa/Casablanca
       * * `Africa/Ceuta` - Africa/Ceuta
       * * `Africa/Conakry` - Africa/Conakry
       * * `Africa/Dakar` - Africa/Dakar
       * * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
       * * `Africa/Djibouti` - Africa/Djibouti
       * * `Africa/Douala` - Africa/Douala
       * * `Africa/El_Aaiun` - Africa/El_Aaiun
       * * `Africa/Freetown` - Africa/Freetown
       * * `Africa/Gaborone` - Africa/Gaborone
       * * `Africa/Harare` - Africa/Harare
       * * `Africa/Johannesburg` - Africa/Johannesburg
       * * `Africa/Juba` - Africa/Juba
       * * `Africa/Kampala` - Africa/Kampala
       * * `Africa/Khartoum` - Africa/Khartoum
       * * `Africa/Kigali` - Africa/Kigali
       * * `Africa/Kinshasa` - Africa/Kinshasa
       * * `Africa/Lagos` - Africa/Lagos
       * * `Africa/Libreville` - Africa/Libreville
       * * `Africa/Lome` - Africa/Lome
       * * `Africa/Luanda` - Africa/Luanda
       * * `Africa/Lubumbashi` - Africa/Lubumbashi
       * * `Africa/Lusaka` - Africa/Lusaka
       * * `Africa/Malabo` - Africa/Malabo
       * * `Africa/Maputo` - Africa/Maputo
       * * `Africa/Maseru` - Africa/Maseru
       * * `Africa/Mbabane` - Africa/Mbabane
       * * `Africa/Mogadishu` - Africa/Mogadishu
       * * `Africa/Monrovia` - Africa/Monrovia
       * * `Africa/Nairobi` - Africa/Nairobi
       * * `Africa/Ndjamena` - Africa/Ndjamena
       * * `Africa/Niamey` - Africa/Niamey
       * * `Africa/Nouakchott` - Africa/Nouakchott
       * * `Africa/Ouagadougou` - Africa/Ouagadougou
       * * `Africa/Porto-Novo` - Africa/Porto-Novo
       * * `Africa/Sao_Tome` - Africa/Sao_Tome
       * * `Africa/Timbuktu` - Africa/Timbuktu
       * * `Africa/Tripoli` - Africa/Tripoli
       * * `Africa/Tunis` - Africa/Tunis
       * * `Africa/Windhoek` - Africa/Windhoek
       * * `America/Adak` - America/Adak
       * * `America/Anchorage` - America/Anchorage
       * * `America/Anguilla` - America/Anguilla
       * * `America/Antigua` - America/Antigua
       * * `America/Araguaina` - America/Araguaina
       * * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
       * * `America/Argentina/Catamarca` - America/Argentina/Catamarca
       * * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
       * * `America/Argentina/Cordoba` - America/Argentina/Cordoba
       * * `America/Argentina/Jujuy` - America/Argentina/Jujuy
       * * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
       * * `America/Argentina/Mendoza` - America/Argentina/Mendoza
       * * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
       * * `America/Argentina/Salta` - America/Argentina/Salta
       * * `America/Argentina/San_Juan` - America/Argentina/San_Juan
       * * `America/Argentina/San_Luis` - America/Argentina/San_Luis
       * * `America/Argentina/Tucuman` - America/Argentina/Tucuman
       * * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
       * * `America/Aruba` - America/Aruba
       * * `America/Asuncion` - America/Asuncion
       * * `America/Atikokan` - America/Atikokan
       * * `America/Atka` - America/Atka
       * * `America/Bahia` - America/Bahia
       * * `America/Bahia_Banderas` - America/Bahia_Banderas
       * * `America/Barbados` - America/Barbados
       * * `America/Belem` - America/Belem
       * * `America/Belize` - America/Belize
       * * `America/Blanc-Sablon` - America/Blanc-Sablon
       * * `America/Boa_Vista` - America/Boa_Vista
       * * `America/Bogota` - America/Bogota
       * * `America/Boise` - America/Boise
       * * `America/Buenos_Aires` - America/Buenos_Aires
       * * `America/Cambridge_Bay` - America/Cambridge_Bay
       * * `America/Campo_Grande` - America/Campo_Grande
       * * `America/Cancun` - America/Cancun
       * * `America/Caracas` - America/Caracas
       * * `America/Catamarca` - America/Catamarca
       * * `America/Cayenne` - America/Cayenne
       * * `America/Cayman` - America/Cayman
       * * `America/Chicago` - America/Chicago
       * * `America/Chihuahua` - America/Chihuahua
       * * `America/Ciudad_Juarez` - America/Ciudad_Juarez
       * * `America/Coral_Harbour` - America/Coral_Harbour
       * * `America/Cordoba` - America/Cordoba
       * * `America/Costa_Rica` - America/Costa_Rica
       * * `America/Creston` - America/Creston
       * * `America/Cuiaba` - America/Cuiaba
       * * `America/Curacao` - America/Curacao
       * * `America/Danmarkshavn` - America/Danmarkshavn
       * * `America/Dawson` - America/Dawson
       * * `America/Dawson_Creek` - America/Dawson_Creek
       * * `America/Denver` - America/Denver
       * * `America/Detroit` - America/Detroit
       * * `America/Dominica` - America/Dominica
       * * `America/Edmonton` - America/Edmonton
       * * `America/Eirunepe` - America/Eirunepe
       * * `America/El_Salvador` - America/El_Salvador
       * * `America/Ensenada` - America/Ensenada
       * * `America/Fort_Nelson` - America/Fort_Nelson
       * * `America/Fort_Wayne` - America/Fort_Wayne
       * * `America/Fortaleza` - America/Fortaleza
       * * `America/Glace_Bay` - America/Glace_Bay
       * * `America/Godthab` - America/Godthab
       * * `America/Goose_Bay` - America/Goose_Bay
       * * `America/Grand_Turk` - America/Grand_Turk
       * * `America/Grenada` - America/Grenada
       * * `America/Guadeloupe` - America/Guadeloupe
       * * `America/Guatemala` - America/Guatemala
       * * `America/Guayaquil` - America/Guayaquil
       * * `America/Guyana` - America/Guyana
       * * `America/Halifax` - America/Halifax
       * * `America/Havana` - America/Havana
       * * `America/Hermosillo` - America/Hermosillo
       * * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
       * * `America/Indiana/Knox` - America/Indiana/Knox
       * * `America/Indiana/Marengo` - America/Indiana/Marengo
       * * `America/Indiana/Petersburg` - America/Indiana/Petersburg
       * * `America/Indiana/Tell_City` - America/Indiana/Tell_City
       * * `America/Indiana/Vevay` - America/Indiana/Vevay
       * * `America/Indiana/Vincennes` - America/Indiana/Vincennes
       * * `America/Indiana/Winamac` - America/Indiana/Winamac
       * * `America/Indianapolis` - America/Indianapolis
       * * `America/Inuvik` - America/Inuvik
       * * `America/Iqaluit` - America/Iqaluit
       * * `America/Jamaica` - America/Jamaica
       * * `America/Jujuy` - America/Jujuy
       * * `America/Juneau` - America/Juneau
       * * `America/Kentucky/Louisville` - America/Kentucky/Louisville
       * * `America/Kentucky/Monticello` - America/Kentucky/Monticello
       * * `America/Knox_IN` - America/Knox_IN
       * * `America/Kralendijk` - America/Kralendijk
       * * `America/La_Paz` - America/La_Paz
       * * `America/Lima` - America/Lima
       * * `America/Los_Angeles` - America/Los_Angeles
       * * `America/Louisville` - America/Louisville
       * * `America/Lower_Princes` - America/Lower_Princes
       * * `America/Maceio` - America/Maceio
       * * `America/Managua` - America/Managua
       * * `America/Manaus` - America/Manaus
       * * `America/Marigot` - America/Marigot
       * * `America/Martinique` - America/Martinique
       * * `America/Matamoros` - America/Matamoros
       * * `America/Mazatlan` - America/Mazatlan
       * * `America/Mendoza` - America/Mendoza
       * * `America/Menominee` - America/Menominee
       * * `America/Merida` - America/Merida
       * * `America/Metlakatla` - America/Metlakatla
       * * `America/Mexico_City` - America/Mexico_City
       * * `America/Miquelon` - America/Miquelon
       * * `America/Moncton` - America/Moncton
       * * `America/Monterrey` - America/Monterrey
       * * `America/Montevideo` - America/Montevideo
       * * `America/Montreal` - America/Montreal
       * * `America/Montserrat` - America/Montserrat
       * * `America/Nassau` - America/Nassau
       * * `America/New_York` - America/New_York
       * * `America/Nipigon` - America/Nipigon
       * * `America/Nome` - America/Nome
       * * `America/Noronha` - America/Noronha
       * * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
       * * `America/North_Dakota/Center` - America/North_Dakota/Center
       * * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
       * * `America/Nuuk` - America/Nuuk
       * * `America/Ojinaga` - America/Ojinaga
       * * `America/Panama` - America/Panama
       * * `America/Pangnirtung` - America/Pangnirtung
       * * `America/Paramaribo` - America/Paramaribo
       * * `America/Phoenix` - America/Phoenix
       * * `America/Port-au-Prince` - America/Port-au-Prince
       * * `America/Port_of_Spain` - America/Port_of_Spain
       * * `America/Porto_Acre` - America/Porto_Acre
       * * `America/Porto_Velho` - America/Porto_Velho
       * * `America/Puerto_Rico` - America/Puerto_Rico
       * * `America/Punta_Arenas` - America/Punta_Arenas
       * * `America/Rainy_River` - America/Rainy_River
       * * `America/Rankin_Inlet` - America/Rankin_Inlet
       * * `America/Recife` - America/Recife
       * * `America/Regina` - America/Regina
       * * `America/Resolute` - America/Resolute
       * * `America/Rio_Branco` - America/Rio_Branco
       * * `America/Rosario` - America/Rosario
       * * `America/Santa_Isabel` - America/Santa_Isabel
       * * `America/Santarem` - America/Santarem
       * * `America/Santiago` - America/Santiago
       * * `America/Santo_Domingo` - America/Santo_Domingo
       * * `America/Sao_Paulo` - America/Sao_Paulo
       * * `America/Scoresbysund` - America/Scoresbysund
       * * `America/Shiprock` - America/Shiprock
       * * `America/Sitka` - America/Sitka
       * * `America/St_Barthelemy` - America/St_Barthelemy
       * * `America/St_Johns` - America/St_Johns
       * * `America/St_Kitts` - America/St_Kitts
       * * `America/St_Lucia` - America/St_Lucia
       * * `America/St_Thomas` - America/St_Thomas
       * * `America/St_Vincent` - America/St_Vincent
       * * `America/Swift_Current` - America/Swift_Current
       * * `America/Tegucigalpa` - America/Tegucigalpa
       * * `America/Thule` - America/Thule
       * * `America/Thunder_Bay` - America/Thunder_Bay
       * * `America/Tijuana` - America/Tijuana
       * * `America/Toronto` - America/Toronto
       * * `America/Tortola` - America/Tortola
       * * `America/Vancouver` - America/Vancouver
       * * `America/Virgin` - America/Virgin
       * * `America/Whitehorse` - America/Whitehorse
       * * `America/Winnipeg` - America/Winnipeg
       * * `America/Yakutat` - America/Yakutat
       * * `America/Yellowknife` - America/Yellowknife
       * * `Antarctica/Casey` - Antarctica/Casey
       * * `Antarctica/Davis` - Antarctica/Davis
       * * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
       * * `Antarctica/Macquarie` - Antarctica/Macquarie
       * * `Antarctica/Mawson` - Antarctica/Mawson
       * * `Antarctica/McMurdo` - Antarctica/McMurdo
       * * `Antarctica/Palmer` - Antarctica/Palmer
       * * `Antarctica/Rothera` - Antarctica/Rothera
       * * `Antarctica/South_Pole` - Antarctica/South_Pole
       * * `Antarctica/Syowa` - Antarctica/Syowa
       * * `Antarctica/Troll` - Antarctica/Troll
       * * `Antarctica/Vostok` - Antarctica/Vostok
       * * `Arctic/Longyearbyen` - Arctic/Longyearbyen
       * * `Asia/Aden` - Asia/Aden
       * * `Asia/Almaty` - Asia/Almaty
       * * `Asia/Amman` - Asia/Amman
       * * `Asia/Anadyr` - Asia/Anadyr
       * * `Asia/Aqtau` - Asia/Aqtau
       * * `Asia/Aqtobe` - Asia/Aqtobe
       * * `Asia/Ashgabat` - Asia/Ashgabat
       * * `Asia/Ashkhabad` - Asia/Ashkhabad
       * * `Asia/Atyrau` - Asia/Atyrau
       * * `Asia/Baghdad` - Asia/Baghdad
       * * `Asia/Bahrain` - Asia/Bahrain
       * * `Asia/Baku` - Asia/Baku
       * * `Asia/Bangkok` - Asia/Bangkok
       * * `Asia/Barnaul` - Asia/Barnaul
       * * `Asia/Beirut` - Asia/Beirut
       * * `Asia/Bishkek` - Asia/Bishkek
       * * `Asia/Brunei` - Asia/Brunei
       * * `Asia/Calcutta` - Asia/Calcutta
       * * `Asia/Chita` - Asia/Chita
       * * `Asia/Choibalsan` - Asia/Choibalsan
       * * `Asia/Chongqing` - Asia/Chongqing
       * * `Asia/Chungking` - Asia/Chungking
       * * `Asia/Colombo` - Asia/Colombo
       * * `Asia/Dacca` - Asia/Dacca
       * * `Asia/Damascus` - Asia/Damascus
       * * `Asia/Dhaka` - Asia/Dhaka
       * * `Asia/Dili` - Asia/Dili
       * * `Asia/Dubai` - Asia/Dubai
       * * `Asia/Dushanbe` - Asia/Dushanbe
       * * `Asia/Famagusta` - Asia/Famagusta
       * * `Asia/Gaza` - Asia/Gaza
       * * `Asia/Harbin` - Asia/Harbin
       * * `Asia/Hebron` - Asia/Hebron
       * * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
       * * `Asia/Hong_Kong` - Asia/Hong_Kong
       * * `Asia/Hovd` - Asia/Hovd
       * * `Asia/Irkutsk` - Asia/Irkutsk
       * * `Asia/Istanbul` - Asia/Istanbul
       * * `Asia/Jakarta` - Asia/Jakarta
       * * `Asia/Jayapura` - Asia/Jayapura
       * * `Asia/Jerusalem` - Asia/Jerusalem
       * * `Asia/Kabul` - Asia/Kabul
       * * `Asia/Kamchatka` - Asia/Kamchatka
       * * `Asia/Karachi` - Asia/Karachi
       * * `Asia/Kashgar` - Asia/Kashgar
       * * `Asia/Kathmandu` - Asia/Kathmandu
       * * `Asia/Katmandu` - Asia/Katmandu
       * * `Asia/Khandyga` - Asia/Khandyga
       * * `Asia/Kolkata` - Asia/Kolkata
       * * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
       * * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
       * * `Asia/Kuching` - Asia/Kuching
       * * `Asia/Kuwait` - Asia/Kuwait
       * * `Asia/Macao` - Asia/Macao
       * * `Asia/Macau` - Asia/Macau
       * * `Asia/Magadan` - Asia/Magadan
       * * `Asia/Makassar` - Asia/Makassar
       * * `Asia/Manila` - Asia/Manila
       * * `Asia/Muscat` - Asia/Muscat
       * * `Asia/Nicosia` - Asia/Nicosia
       * * `Asia/Novokuznetsk` - Asia/Novokuznetsk
       * * `Asia/Novosibirsk` - Asia/Novosibirsk
       * * `Asia/Omsk` - Asia/Omsk
       * * `Asia/Oral` - Asia/Oral
       * * `Asia/Phnom_Penh` - Asia/Phnom_Penh
       * * `Asia/Pontianak` - Asia/Pontianak
       * * `Asia/Pyongyang` - Asia/Pyongyang
       * * `Asia/Qatar` - Asia/Qatar
       * * `Asia/Qostanay` - Asia/Qostanay
       * * `Asia/Qyzylorda` - Asia/Qyzylorda
       * * `Asia/Rangoon` - Asia/Rangoon
       * * `Asia/Riyadh` - Asia/Riyadh
       * * `Asia/Saigon` - Asia/Saigon
       * * `Asia/Sakhalin` - Asia/Sakhalin
       * * `Asia/Samarkand` - Asia/Samarkand
       * * `Asia/Seoul` - Asia/Seoul
       * * `Asia/Shanghai` - Asia/Shanghai
       * * `Asia/Singapore` - Asia/Singapore
       * * `Asia/Srednekolymsk` - Asia/Srednekolymsk
       * * `Asia/Taipei` - Asia/Taipei
       * * `Asia/Tashkent` - Asia/Tashkent
       * * `Asia/Tbilisi` - Asia/Tbilisi
       * * `Asia/Tehran` - Asia/Tehran
       * * `Asia/Tel_Aviv` - Asia/Tel_Aviv
       * * `Asia/Thimbu` - Asia/Thimbu
       * * `Asia/Thimphu` - Asia/Thimphu
       * * `Asia/Tokyo` - Asia/Tokyo
       * * `Asia/Tomsk` - Asia/Tomsk
       * * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
       * * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
       * * `Asia/Ulan_Bator` - Asia/Ulan_Bator
       * * `Asia/Urumqi` - Asia/Urumqi
       * * `Asia/Ust-Nera` - Asia/Ust-Nera
       * * `Asia/Vientiane` - Asia/Vientiane
       * * `Asia/Vladivostok` - Asia/Vladivostok
       * * `Asia/Yakutsk` - Asia/Yakutsk
       * * `Asia/Yangon` - Asia/Yangon
       * * `Asia/Yekaterinburg` - Asia/Yekaterinburg
       * * `Asia/Yerevan` - Asia/Yerevan
       * * `Atlantic/Azores` - Atlantic/Azores
       * * `Atlantic/Bermuda` - Atlantic/Bermuda
       * * `Atlantic/Canary` - Atlantic/Canary
       * * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
       * * `Atlantic/Faeroe` - Atlantic/Faeroe
       * * `Atlantic/Faroe` - Atlantic/Faroe
       * * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
       * * `Atlantic/Madeira` - Atlantic/Madeira
       * * `Atlantic/Reykjavik` - Atlantic/Reykjavik
       * * `Atlantic/South_Georgia` - Atlantic/South_Georgia
       * * `Atlantic/St_Helena` - Atlantic/St_Helena
       * * `Atlantic/Stanley` - Atlantic/Stanley
       * * `Australia/ACT` - Australia/ACT
       * * `Australia/Adelaide` - Australia/Adelaide
       * * `Australia/Brisbane` - Australia/Brisbane
       * * `Australia/Broken_Hill` - Australia/Broken_Hill
       * * `Australia/Canberra` - Australia/Canberra
       * * `Australia/Currie` - Australia/Currie
       * * `Australia/Darwin` - Australia/Darwin
       * * `Australia/Eucla` - Australia/Eucla
       * * `Australia/Hobart` - Australia/Hobart
       * * `Australia/LHI` - Australia/LHI
       * * `Australia/Lindeman` - Australia/Lindeman
       * * `Australia/Lord_Howe` - Australia/Lord_Howe
       * * `Australia/Melbourne` - Australia/Melbourne
       * * `Australia/NSW` - Australia/NSW
       * * `Australia/North` - Australia/North
       * * `Australia/Perth` - Australia/Perth
       * * `Australia/Queensland` - Australia/Queensland
       * * `Australia/South` - Australia/South
       * * `Australia/Sydney` - Australia/Sydney
       * * `Australia/Tasmania` - Australia/Tasmania
       * * `Australia/Victoria` - Australia/Victoria
       * * `Australia/West` - Australia/West
       * * `Australia/Yancowinna` - Australia/Yancowinna
       * * `Brazil/Acre` - Brazil/Acre
       * * `Brazil/DeNoronha` - Brazil/DeNoronha
       * * `Brazil/East` - Brazil/East
       * * `Brazil/West` - Brazil/West
       * * `CET` - CET
       * * `CST6CDT` - CST6CDT
       * * `Canada/Atlantic` - Canada/Atlantic
       * * `Canada/Central` - Canada/Central
       * * `Canada/Eastern` - Canada/Eastern
       * * `Canada/Mountain` - Canada/Mountain
       * * `Canada/Newfoundland` - Canada/Newfoundland
       * * `Canada/Pacific` - Canada/Pacific
       * * `Canada/Saskatchewan` - Canada/Saskatchewan
       * * `Canada/Yukon` - Canada/Yukon
       * * `Chile/Continental` - Chile/Continental
       * * `Chile/EasterIsland` - Chile/EasterIsland
       * * `Cuba` - Cuba
       * * `EET` - EET
       * * `EST` - EST
       * * `EST5EDT` - EST5EDT
       * * `Egypt` - Egypt
       * * `Eire` - Eire
       * * `Etc/GMT` - Etc/GMT
       * * `Etc/GMT+0` - Etc/GMT+0
       * * `Etc/GMT+1` - Etc/GMT+1
       * * `Etc/GMT+10` - Etc/GMT+10
       * * `Etc/GMT+11` - Etc/GMT+11
       * * `Etc/GMT+12` - Etc/GMT+12
       * * `Etc/GMT+2` - Etc/GMT+2
       * * `Etc/GMT+3` - Etc/GMT+3
       * * `Etc/GMT+4` - Etc/GMT+4
       * * `Etc/GMT+5` - Etc/GMT+5
       * * `Etc/GMT+6` - Etc/GMT+6
       * * `Etc/GMT+7` - Etc/GMT+7
       * * `Etc/GMT+8` - Etc/GMT+8
       * * `Etc/GMT+9` - Etc/GMT+9
       * * `Etc/GMT-0` - Etc/GMT-0
       * * `Etc/GMT-1` - Etc/GMT-1
       * * `Etc/GMT-10` - Etc/GMT-10
       * * `Etc/GMT-11` - Etc/GMT-11
       * * `Etc/GMT-12` - Etc/GMT-12
       * * `Etc/GMT-13` - Etc/GMT-13
       * * `Etc/GMT-14` - Etc/GMT-14
       * * `Etc/GMT-2` - Etc/GMT-2
       * * `Etc/GMT-3` - Etc/GMT-3
       * * `Etc/GMT-4` - Etc/GMT-4
       * * `Etc/GMT-5` - Etc/GMT-5
       * * `Etc/GMT-6` - Etc/GMT-6
       * * `Etc/GMT-7` - Etc/GMT-7
       * * `Etc/GMT-8` - Etc/GMT-8
       * * `Etc/GMT-9` - Etc/GMT-9
       * * `Etc/GMT0` - Etc/GMT0
       * * `Etc/Greenwich` - Etc/Greenwich
       * * `Etc/UCT` - Etc/UCT
       * * `Etc/UTC` - Etc/UTC
       * * `Etc/Universal` - Etc/Universal
       * * `Etc/Zulu` - Etc/Zulu
       * * `Europe/Amsterdam` - Europe/Amsterdam
       * * `Europe/Andorra` - Europe/Andorra
       * * `Europe/Astrakhan` - Europe/Astrakhan
       * * `Europe/Athens` - Europe/Athens
       * * `Europe/Belfast` - Europe/Belfast
       * * `Europe/Belgrade` - Europe/Belgrade
       * * `Europe/Berlin` - Europe/Berlin
       * * `Europe/Bratislava` - Europe/Bratislava
       * * `Europe/Brussels` - Europe/Brussels
       * * `Europe/Bucharest` - Europe/Bucharest
       * * `Europe/Budapest` - Europe/Budapest
       * * `Europe/Busingen` - Europe/Busingen
       * * `Europe/Chisinau` - Europe/Chisinau
       * * `Europe/Copenhagen` - Europe/Copenhagen
       * * `Europe/Dublin` - Europe/Dublin
       * * `Europe/Gibraltar` - Europe/Gibraltar
       * * `Europe/Guernsey` - Europe/Guernsey
       * * `Europe/Helsinki` - Europe/Helsinki
       * * `Europe/Isle_of_Man` - Europe/Isle_of_Man
       * * `Europe/Istanbul` - Europe/Istanbul
       * * `Europe/Jersey` - Europe/Jersey
       * * `Europe/Kaliningrad` - Europe/Kaliningrad
       * * `Europe/Kiev` - Europe/Kiev
       * * `Europe/Kirov` - Europe/Kirov
       * * `Europe/Kyiv` - Europe/Kyiv
       * * `Europe/Lisbon` - Europe/Lisbon
       * * `Europe/Ljubljana` - Europe/Ljubljana
       * * `Europe/London` - Europe/London
       * * `Europe/Luxembourg` - Europe/Luxembourg
       * * `Europe/Madrid` - Europe/Madrid
       * * `Europe/Malta` - Europe/Malta
       * * `Europe/Mariehamn` - Europe/Mariehamn
       * * `Europe/Minsk` - Europe/Minsk
       * * `Europe/Monaco` - Europe/Monaco
       * * `Europe/Moscow` - Europe/Moscow
       * * `Europe/Nicosia` - Europe/Nicosia
       * * `Europe/Oslo` - Europe/Oslo
       * * `Europe/Paris` - Europe/Paris
       * * `Europe/Podgorica` - Europe/Podgorica
       * * `Europe/Prague` - Europe/Prague
       * * `Europe/Riga` - Europe/Riga
       * * `Europe/Rome` - Europe/Rome
       * * `Europe/Samara` - Europe/Samara
       * * `Europe/San_Marino` - Europe/San_Marino
       * * `Europe/Sarajevo` - Europe/Sarajevo
       * * `Europe/Saratov` - Europe/Saratov
       * * `Europe/Simferopol` - Europe/Simferopol
       * * `Europe/Skopje` - Europe/Skopje
       * * `Europe/Sofia` - Europe/Sofia
       * * `Europe/Stockholm` - Europe/Stockholm
       * * `Europe/Tallinn` - Europe/Tallinn
       * * `Europe/Tirane` - Europe/Tirane
       * * `Europe/Tiraspol` - Europe/Tiraspol
       * * `Europe/Ulyanovsk` - Europe/Ulyanovsk
       * * `Europe/Uzhgorod` - Europe/Uzhgorod
       * * `Europe/Vaduz` - Europe/Vaduz
       * * `Europe/Vatican` - Europe/Vatican
       * * `Europe/Vienna` - Europe/Vienna
       * * `Europe/Vilnius` - Europe/Vilnius
       * * `Europe/Volgograd` - Europe/Volgograd
       * * `Europe/Warsaw` - Europe/Warsaw
       * * `Europe/Zagreb` - Europe/Zagreb
       * * `Europe/Zaporozhye` - Europe/Zaporozhye
       * * `Europe/Zurich` - Europe/Zurich
       * * `GB` - GB
       * * `GB-Eire` - GB-Eire
       * * `GMT` - GMT
       * * `GMT+0` - GMT+0
       * * `GMT-0` - GMT-0
       * * `GMT0` - GMT0
       * * `Greenwich` - Greenwich
       * * `HST` - HST
       * * `Hongkong` - Hongkong
       * * `Iceland` - Iceland
       * * `Indian/Antananarivo` - Indian/Antananarivo
       * * `Indian/Chagos` - Indian/Chagos
       * * `Indian/Christmas` - Indian/Christmas
       * * `Indian/Cocos` - Indian/Cocos
       * * `Indian/Comoro` - Indian/Comoro
       * * `Indian/Kerguelen` - Indian/Kerguelen
       * * `Indian/Mahe` - Indian/Mahe
       * * `Indian/Maldives` - Indian/Maldives
       * * `Indian/Mauritius` - Indian/Mauritius
       * * `Indian/Mayotte` - Indian/Mayotte
       * * `Indian/Reunion` - Indian/Reunion
       * * `Iran` - Iran
       * * `Israel` - Israel
       * * `Jamaica` - Jamaica
       * * `Japan` - Japan
       * * `Kwajalein` - Kwajalein
       * * `Libya` - Libya
       * * `MET` - MET
       * * `MST` - MST
       * * `MST7MDT` - MST7MDT
       * * `Mexico/BajaNorte` - Mexico/BajaNorte
       * * `Mexico/BajaSur` - Mexico/BajaSur
       * * `Mexico/General` - Mexico/General
       * * `NZ` - NZ
       * * `NZ-CHAT` - NZ-CHAT
       * * `Navajo` - Navajo
       * * `PRC` - PRC
       * * `PST8PDT` - PST8PDT
       * * `Pacific/Apia` - Pacific/Apia
       * * `Pacific/Auckland` - Pacific/Auckland
       * * `Pacific/Bougainville` - Pacific/Bougainville
       * * `Pacific/Chatham` - Pacific/Chatham
       * * `Pacific/Chuuk` - Pacific/Chuuk
       * * `Pacific/Easter` - Pacific/Easter
       * * `Pacific/Efate` - Pacific/Efate
       * * `Pacific/Enderbury` - Pacific/Enderbury
       * * `Pacific/Fakaofo` - Pacific/Fakaofo
       * * `Pacific/Fiji` - Pacific/Fiji
       * * `Pacific/Funafuti` - Pacific/Funafuti
       * * `Pacific/Galapagos` - Pacific/Galapagos
       * * `Pacific/Gambier` - Pacific/Gambier
       * * `Pacific/Guadalcanal` - Pacific/Guadalcanal
       * * `Pacific/Guam` - Pacific/Guam
       * * `Pacific/Honolulu` - Pacific/Honolulu
       * * `Pacific/Johnston` - Pacific/Johnston
       * * `Pacific/Kanton` - Pacific/Kanton
       * * `Pacific/Kiritimati` - Pacific/Kiritimati
       * * `Pacific/Kosrae` - Pacific/Kosrae
       * * `Pacific/Kwajalein` - Pacific/Kwajalein
       * * `Pacific/Majuro` - Pacific/Majuro
       * * `Pacific/Marquesas` - Pacific/Marquesas
       * * `Pacific/Midway` - Pacific/Midway
       * * `Pacific/Nauru` - Pacific/Nauru
       * * `Pacific/Niue` - Pacific/Niue
       * * `Pacific/Norfolk` - Pacific/Norfolk
       * * `Pacific/Noumea` - Pacific/Noumea
       * * `Pacific/Pago_Pago` - Pacific/Pago_Pago
       * * `Pacific/Palau` - Pacific/Palau
       * * `Pacific/Pitcairn` - Pacific/Pitcairn
       * * `Pacific/Pohnpei` - Pacific/Pohnpei
       * * `Pacific/Ponape` - Pacific/Ponape
       * * `Pacific/Port_Moresby` - Pacific/Port_Moresby
       * * `Pacific/Rarotonga` - Pacific/Rarotonga
       * * `Pacific/Saipan` - Pacific/Saipan
       * * `Pacific/Samoa` - Pacific/Samoa
       * * `Pacific/Tahiti` - Pacific/Tahiti
       * * `Pacific/Tarawa` - Pacific/Tarawa
       * * `Pacific/Tongatapu` - Pacific/Tongatapu
       * * `Pacific/Truk` - Pacific/Truk
       * * `Pacific/Wake` - Pacific/Wake
       * * `Pacific/Wallis` - Pacific/Wallis
       * * `Pacific/Yap` - Pacific/Yap
       * * `Poland` - Poland
       * * `Portugal` - Portugal
       * * `ROC` - ROC
       * * `ROK` - ROK
       * * `Singapore` - Singapore
       * * `Turkey` - Turkey
       * * `UCT` - UCT
       * * `US/Alaska` - US/Alaska
       * * `US/Aleutian` - US/Aleutian
       * * `US/Arizona` - US/Arizona
       * * `US/Central` - US/Central
       * * `US/East-Indiana` - US/East-Indiana
       * * `US/Eastern` - US/Eastern
       * * `US/Hawaii` - US/Hawaii
       * * `US/Indiana-Starke` - US/Indiana-Starke
       * * `US/Michigan` - US/Michigan
       * * `US/Mountain` - US/Mountain
       * * `US/Pacific` - US/Pacific
       * * `US/Samoa` - US/Samoa
       * * `UTC` - UTC
       * * `Universal` - Universal
       * * `W-SU` - W-SU
       * * `WET` - WET
       * * `Zulu` - Zulu
       * @default UTC
       */
      timezone?: components["schemas"]["TimezoneEnum"];
      result: components["schemas"]["FunnelStepsResult"][];
    };
    /**
     * FunnelVizType
     * @enum {string}
     */
    FunnelVizType: "steps" | "time_to_convert" | "trends";
    /**
     * @description * `trends` - trends
     * * `time_to_convert` - time_to_convert
     * * `steps` - steps
     * @enum {string}
     */
    FunnelVizTypeEnum: "trends" | "time_to_convert" | "steps";
    /**
     * @description * `DAY` - DAY
     * * `SECOND` - SECOND
     * * `MINUTE` - MINUTE
     * * `HOUR` - HOUR
     * * `WEEK` - WEEK
     * * `MONTH` - MONTH
     * @enum {string}
     */
    FunnelWindowIntervalTypeEnum: "DAY" | "SECOND" | "MINUTE" | "HOUR" | "WEEK" | "MONTH";
    /** FunnelsActorsQuery */
    FunnelsActorsQuery: {
      /**
       * Funnelcustomsteps
       * @description Custom step numbers to get persons for. This overrides `funnelStep`. Primarily for correlation use.
       * @default null
       */
      funnelCustomSteps?: number[] | null;
      /**
       * Funnelstep
       * @description Index of the step for which we want to get the timestamp for, per person. Positive for converted persons, negative for dropped of persons.
       * @default null
       */
      funnelStep?: number | null;
      /**
       * Funnelstepbreakdown
       * @description The breakdown value for which to get persons for. This is an array for person and event properties, a string for groups and an integer for cohorts.
       * @default null
       */
      funnelStepBreakdown?: string | number | (string | number)[] | null;
      /**
       * Funneltrendsdropoff
       * @default null
       */
      funnelTrendsDropOff?: boolean | null;
      /**
       * Funneltrendsentranceperiodstart
       * @description Used together with `funnelTrendsDropOff` for funnels time conversion date for the persons modal.
       * @default null
       */
      funnelTrendsEntrancePeriodStart?: string | null;
      /**
       * Includerecordings
       * @default null
       */
      includeRecordings?: boolean | null;
      /**
       * Kind
       * @default FunnelsActorsQuery
       * @constant
       */
      kind?: "FunnelsActorsQuery";
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** @default null */
      response?: components["schemas"]["ActorsQueryResponse"] | null;
      source: components["schemas"]["FunnelsQuery"];
    };
    /** FunnelsFilter */
    FunnelsFilter: {
      /**
       * Bincount
       * @default null
       */
      binCount?: number | null;
      /** @default null */
      breakdownAttributionType?: components["schemas"]["BreakdownAttributionType"] | null;
      /**
       * Breakdownattributionvalue
       * @default null
       */
      breakdownAttributionValue?: number | null;
      /**
       * Exclusions
       * @default null
       */
      exclusions?:
        | (
            | components["schemas"]["FunnelExclusionEventsNode"]
            | components["schemas"]["FunnelExclusionActionsNode"]
          )[]
        | null;
      /**
       * Funnelaggregatebyhogql
       * @default null
       */
      funnelAggregateByHogQL?: string | null;
      /**
       * Funnelfromstep
       * @default null
       */
      funnelFromStep?: number | null;
      /** @default null */
      funnelOrderType?: components["schemas"]["StepOrderValue"] | null;
      /** @default null */
      funnelStepReference?: components["schemas"]["FunnelStepReference"] | null;
      /**
       * Funneltostep
       * @default null
       */
      funnelToStep?: number | null;
      /** @default null */
      funnelVizType?: components["schemas"]["FunnelVizType"] | null;
      /**
       * Funnelwindowinterval
       * @default null
       */
      funnelWindowInterval?: number | null;
      /** @default null */
      funnelWindowIntervalUnit?: components["schemas"]["FunnelConversionWindowTimeUnit"] | null;
      /**
       * Hidden Legend Breakdowns
       * @default null
       */
      hidden_legend_breakdowns?: string[] | null;
      /** @default null */
      layout?: components["schemas"]["FunnelLayout"] | null;
    };
    /** FunnelsQuery */
    FunnelsQuery: {
      /**
       * Aggregation Group Type Index
       * @description Groups aggregation
       * @default null
       */
      aggregation_group_type_index?: number | null;
      /**
       * @description Breakdown of the events and actions
       * @default null
       */
      breakdownFilter?: components["schemas"]["BreakdownFilter"] | null;
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @description Exclude internal and test users by applying the respective filters
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * @description Properties specific to the funnels insight
       * @default null
       */
      funnelsFilter?: components["schemas"]["FunnelsFilter"] | null;
      /**
       * @description Granularity of the response. Can be one of `hour`, `day`, `week` or `month`
       * @default null
       */
      interval?: components["schemas"]["IntervalType"] | null;
      /**
       * Kind
       * @default FunnelsQuery
       * @constant
       */
      kind?: "FunnelsQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Properties
       * @description Property filters for all series
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | components["schemas"]["PropertyGroupFilter"]
        | null;
      /**
       * Samplingfactor
       * @description Sampling rate
       * @default null
       */
      samplingFactor?: number | null;
      /**
       * Series
       * @description Events and actions to include
       */
      series: (
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["DataWarehouseNode"]
      )[];
    };
    GenericInsights: {
      /** @description Events to filter on. One of `events` or `actions` is required. */
      events?: components["schemas"]["FilterEvent"][];
      /** @description Actions to filter on. One of `events` or `actions` is required. */
      actions?: components["schemas"]["FilterAction"][];
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /**
       * @description Whether to filter out internal and test accounts. See "project settings" in your PostHog account for the filters.
       * @default false
       */
      filter_test_accounts?: boolean;
      /**
       * @description What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_from?: string;
      /**
       * @description What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_to?: string;
    };
    /** GoalLine */
    GoalLine: {
      /** Label */
      label: string;
      /** Value */
      value: number;
    };
    Group: {
      group_type_index: number;
      group_key: string;
      group_properties?: unknown;
      /** Format: date-time */
      created_at: string;
    };
    /** GroupPropertyFilter */
    GroupPropertyFilter: {
      /**
       * Group Type Index
       * @default null
       */
      group_type_index?: number | null;
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @default group
       * @constant
       */
      type?: "group";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    GroupType: {
      group_type: string;
      group_type_index: number;
      name_singular?: string | null;
      name_plural?: string | null;
    };
    /** HogQLAutocomplete */
    HogQLAutocomplete: {
      /**
       * Endposition
       * @description End position of the editor word
       */
      endPosition: number;
      /**
       * @description Table to validate the expression against
       * @default null
       */
      filters?: components["schemas"]["HogQLFilters"] | null;
      /**
       * Kind
       * @default HogQLAutocomplete
       * @constant
       */
      kind?: "HogQLAutocomplete";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["HogQLAutocompleteResponse"] | null;
      /**
       * Select
       * @description Full select query to validate
       */
      select: string;
      /**
       * Startposition
       * @description Start position of the editor word
       */
      startPosition: number;
    };
    /** HogQLAutocompleteResponse */
    HogQLAutocompleteResponse: {
      /**
       * Incomplete List
       * @description Whether or not the suggestions returned are complete
       */
      incomplete_list: boolean;
      /** Suggestions */
      suggestions: components["schemas"]["AutocompleteCompletionItem"][];
      /**
       * Timings
       * @description Measured timings for different parts of the query generation process
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /** HogQLFilters */
    HogQLFilters: {
      /** @default null */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * Properties
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
    };
    /** HogQLMetadata */
    HogQLMetadata: {
      /**
       * Debug
       * @description Enable more verbose output, usually run from the /debug page
       * @default null
       */
      debug?: boolean | null;
      /**
       * Expr
       * @description HogQL expression to validate (use `select` or `expr`, but not both)
       * @default null
       */
      expr?: string | null;
      /**
       * Exprsource
       * @description Query within which "expr" is validated. Defaults to "select * from events"
       * @default null
       */
      exprSource?:
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["PersonsNode"]
        | components["schemas"]["TimeToSeeDataSessionsQuery"]
        | components["schemas"]["EventsQuery"]
        | components["schemas"]["ActorsQuery"]
        | components["schemas"]["InsightActorsQuery"]
        | components["schemas"]["InsightActorsQueryOptions"]
        | components["schemas"]["SessionsTimelineQuery"]
        | components["schemas"]["HogQLQuery"]
        | components["schemas"]["HogQLMetadata"]
        | components["schemas"]["HogQLAutocomplete"]
        | components["schemas"]["WebOverviewQuery"]
        | components["schemas"]["WebStatsTableQuery"]
        | components["schemas"]["WebTopClicksQuery"]
        | null;
      /**
       * @description Extra filters applied to query via {filters}
       * @default null
       */
      filters?: components["schemas"]["HogQLFilters"] | null;
      /**
       * Kind
       * @default HogQLMetadata
       * @constant
       */
      kind?: "HogQLMetadata";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["HogQLMetadataResponse"] | null;
      /**
       * Select
       * @description Full select query to validate (use `select` or `expr`, but not both)
       * @default null
       */
      select?: string | null;
      /**
       * Table
       * @description Table to validate the expression against
       * @default null
       */
      table?: string | null;
    };
    /** HogQLMetadataResponse */
    HogQLMetadataResponse: {
      /** Errors */
      errors: components["schemas"]["HogQLNotice"][];
      /**
       * Inputexpr
       * @default null
       */
      inputExpr?: string | null;
      /**
       * Inputselect
       * @default null
       */
      inputSelect?: string | null;
      /**
       * Isvalid
       * @default null
       */
      isValid?: boolean | null;
      /**
       * Isvalidview
       * @default null
       */
      isValidView?: boolean | null;
      /** Notices */
      notices: components["schemas"]["HogQLNotice"][];
      /** Warnings */
      warnings: components["schemas"]["HogQLNotice"][];
    };
    /** HogQLNotice */
    HogQLNotice: {
      /**
       * End
       * @default null
       */
      end?: number | null;
      /**
       * Fix
       * @default null
       */
      fix?: string | null;
      /** Message */
      message: string;
      /**
       * Start
       * @default null
       */
      start?: number | null;
    };
    /** HogQLPropertyFilter */
    HogQLPropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      /**
       * Type
       * @default hogql
       * @constant
       */
      type?: "hogql";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    /** HogQLQuery */
    HogQLQuery: {
      /**
       * Explain
       * @default null
       */
      explain?: boolean | null;
      /** @default null */
      filters?: components["schemas"]["HogQLFilters"] | null;
      /**
       * Kind
       * @default HogQLQuery
       * @constant
       */
      kind?: "HogQLQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** Query */
      query: string;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["HogQLQueryResponse"] | null;
      /**
       * Values
       * @description Constant values that can be referenced with the {placeholder} syntax in the query
       * @default null
       */
      values?: Record<string, never> | null;
    };
    /** HogQLQueryModifiers */
    HogQLQueryModifiers: {
      /**
       * Datawarehouseeventsmodifiers
       * @default null
       */
      dataWarehouseEventsModifiers?: components["schemas"]["DataWarehouseEventsModifier"][] | null;
      /** @default null */
      inCohortVia?: components["schemas"]["InCohortVia"] | null;
      /** @default null */
      materializationMode?: components["schemas"]["MaterializationMode"] | null;
      /** @default null */
      personsArgMaxVersion?: components["schemas"]["PersonsArgMaxVersion"] | null;
      /** @default null */
      personsOnEventsMode?: components["schemas"]["PersonsOnEventsMode"] | null;
    };
    /** HogQLQueryResponse */
    HogQLQueryResponse: {
      /**
       * Clickhouse
       * @description Executed ClickHouse query
       * @default null
       */
      clickhouse?: string | null;
      /**
       * Columns
       * @description Returned columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Error
       * @description Query error. Returned only if 'explain' is true. Throws an error otherwise.
       * @default null
       */
      error?: string | null;
      /**
       * Explain
       * @description Query explanation output
       * @default null
       */
      explain?: string[] | null;
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @description Generated HogQL query
       * @default null
       */
      hogql?: string | null;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /**
       * @description Query metadata output
       * @default null
       */
      metadata?: components["schemas"]["HogQLMetadataResponse"] | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /**
       * Query
       * @description Input query string
       * @default null
       */
      query?: string | null;
      /**
       * Results
       * @description Query results
       * @default null
       */
      results?: unknown[] | null;
      /**
       * Timings
       * @description Measured timings for different parts of the query generation process
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @description Types of returned columns
       * @default null
       */
      types?: unknown[] | null;
    };
    /**
     * InCohortVia
     * @enum {string}
     */
    InCohortVia: "auto" | "leftjoin" | "subquery" | "leftjoin_conjoined";
    /** @description Simplified serializer to speed response times when loading large amounts of objects. */
    Insight: {
      id: number;
      short_id: string;
      name?: string | null;
      derived_name?: string | null;
      filters?: unknown;
      /** @description Query node JSON string */
      query?: unknown;
      order?: number | null;
      deleted?: boolean;
      /**
       * @description
       *         DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
       *         A dashboard ID for each of the dashboards that this insight is displayed on.
       */
      dashboards?: number[];
      /**
       * @description
       *     A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
       */
      dashboard_tiles: readonly components["schemas"]["DashboardTileBasic"][];
      /**
       * @description
       *     The datetime this insight's results were generated.
       *     If added to one or more dashboards the insight can be refreshed separately on each.
       *     Returns the appropriate last_refresh datetime for the context the insight is viewed in
       *     (see from_dashboard query parameter).
       */
      last_refresh: string;
      /**
       * @description
       *     The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
       *     by querying the database.
       */
      next_allowed_client_refresh: string;
      result: string;
      /** Format: date-time */
      created_at: string | null;
      created_by: components["schemas"]["UserBasic"];
      description?: string | null;
      /** Format: date-time */
      updated_at: string;
      tags?: unknown[];
      favorited?: boolean;
      saved?: boolean;
      /** Format: date-time */
      last_modified_at: string;
      last_modified_by: components["schemas"]["UserBasic"];
      is_sample: boolean;
      effective_restriction_level: components["schemas"]["EffectiveRestrictionLevelEnum"];
      effective_privilege_level: components["schemas"]["EffectivePrivilegeLevelEnum"];
      /** @description The timezone this chart is displayed in. */
      timezone: string;
      is_cached: string;
    };
    /** InsightActorsQuery */
    InsightActorsQuery: {
      /**
       * Breakdown
       * @default null
       */
      breakdown?: string | number | null;
      /** @default null */
      compare?: components["schemas"]["Compare"] | null;
      /**
       * Day
       * @default null
       */
      day?: string | number | null;
      /**
       * Includerecordings
       * @default null
       */
      includeRecordings?: boolean | null;
      /**
       * Interval
       * @description An interval selected out of available intervals in source query.
       * @default null
       */
      interval?: number | null;
      /**
       * Kind
       * @default InsightActorsQuery
       * @constant
       */
      kind?: "InsightActorsQuery";
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** @default null */
      response?: components["schemas"]["ActorsQueryResponse"] | null;
      /**
       * Series
       * @default null
       */
      series?: number | null;
      /** Source */
      source:
        | components["schemas"]["TrendsQuery"]
        | components["schemas"]["FunnelsQuery"]
        | components["schemas"]["RetentionQuery"]
        | components["schemas"]["PathsQuery"]
        | components["schemas"]["StickinessQuery"]
        | components["schemas"]["LifecycleQuery"];
      /**
       * Status
       * @default null
       */
      status?: string | null;
    };
    /** InsightActorsQueryOptions */
    InsightActorsQueryOptions: {
      /**
       * Kind
       * @default InsightActorsQueryOptions
       * @constant
       */
      kind?: "InsightActorsQueryOptions";
      /** @default null */
      response?: components["schemas"]["InsightActorsQueryOptionsResponse"] | null;
      /** Source */
      source:
        | components["schemas"]["InsightActorsQuery"]
        | components["schemas"]["FunnelsActorsQuery"]
        | components["schemas"]["FunnelCorrelationActorsQuery"];
    };
    /** InsightActorsQueryOptionsResponse */
    InsightActorsQueryOptionsResponse: {
      /**
       * Breakdown
       * @default null
       */
      breakdown?: components["schemas"]["BreakdownItem"][] | null;
      /**
       * Compare
       * @default null
       */
      compare?: components["schemas"]["CompareItem"][] | null;
      /**
       * Day
       * @default null
       */
      day?: components["schemas"]["DayItem"][] | null;
      /**
       * Interval
       * @default null
       */
      interval?: components["schemas"]["IntervalItem"][] | null;
      /**
       * Series
       * @default null
       */
      series?: components["schemas"]["Series"][] | null;
      /**
       * Status
       * @default null
       */
      status?: components["schemas"]["StatusItem"][] | null;
    };
    /** InsightVizNode */
    InsightVizNode: {
      /**
       * Embedded
       * @description Query is embedded inside another bordered component
       * @default null
       */
      embedded?: boolean | null;
      /**
       * Full
       * @description Show with most visual options enabled. Used in insight scene.
       * @default null
       */
      full?: boolean | null;
      /**
       * Hidepersonsmodal
       * @default null
       */
      hidePersonsModal?: boolean | null;
      /**
       * Kind
       * @default InsightVizNode
       * @constant
       */
      kind?: "InsightVizNode";
      /**
       * Showcorrelationtable
       * @default null
       */
      showCorrelationTable?: boolean | null;
      /**
       * Showfilters
       * @default null
       */
      showFilters?: boolean | null;
      /**
       * Showheader
       * @default null
       */
      showHeader?: boolean | null;
      /**
       * Showlastcomputation
       * @default null
       */
      showLastComputation?: boolean | null;
      /**
       * Showlastcomputationrefresh
       * @default null
       */
      showLastComputationRefresh?: boolean | null;
      /**
       * Showresults
       * @default null
       */
      showResults?: boolean | null;
      /**
       * Showtable
       * @default null
       */
      showTable?: boolean | null;
      /** Source */
      source:
        | components["schemas"]["TrendsQuery"]
        | components["schemas"]["FunnelsQuery"]
        | components["schemas"]["RetentionQuery"]
        | components["schemas"]["PathsQuery"]
        | components["schemas"]["StickinessQuery"]
        | components["schemas"]["LifecycleQuery"];
      /**
       * Suppresssessionanalysiswarning
       * @default null
       */
      suppressSessionAnalysisWarning?: boolean | null;
      /** @default null */
      vizSpecificOptions?: components["schemas"]["VizSpecificOptions"] | null;
    };
    /**
     * @description * `hour` - hour
     * * `day` - day
     * * `week` - week
     * * `every 5 minutes` - every 5 minutes
     * @enum {string}
     */
    IntervalEnum: "hour" | "day" | "week" | "every 5 minutes";
    /** IntervalItem */
    IntervalItem: {
      /** Label */
      label: string;
      /**
       * Value
       * @description An interval selected out of available intervals in source query
       */
      value: number;
    };
    /**
     * IntervalType
     * @enum {string}
     */
    IntervalType: "hour" | "day" | "week" | "month";
    /**
     * Key
     * @enum {string}
     */
    Key: "tag_name" | "text" | "href" | "selector";
    /**
     * Kind
     * @enum {string}
     */
    Kind:
      | "Method"
      | "Function"
      | "Constructor"
      | "Field"
      | "Variable"
      | "Class"
      | "Struct"
      | "Interface"
      | "Module"
      | "Property"
      | "Event"
      | "Operator"
      | "Unit"
      | "Value"
      | "Constant"
      | "Enum"
      | "EnumMember"
      | "Keyword"
      | "Text"
      | "Color"
      | "File"
      | "Reference"
      | "Customcolor"
      | "Folder"
      | "TypeParameter"
      | "User"
      | "Issue"
      | "Snippet";
    /**
     * Kind1
     * @enum {string}
     */
    Kind1: "ActionsNode" | "EventsNode";
    /**
     * Kind2
     * @enum {string}
     */
    Kind2: "unit" | "duration_s" | "percentage";
    /**
     * @description * `21` - Everyone in the project can edit
     * * `37` - Only those invited to this dashboard can edit
     * @enum {integer}
     */
    LevelD7eEnum: 21 | 37;
    /** LifecycleFilter */
    LifecycleFilter: {
      /**
       * Showvaluesonseries
       * @default null
       */
      showValuesOnSeries?: boolean | null;
      /**
       * Toggledlifecycles
       * @default null
       */
      toggledLifecycles?: components["schemas"]["LifecycleToggle"][] | null;
    };
    /** LifecycleQuery */
    LifecycleQuery: {
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @description Exclude internal and test users by applying the respective filters
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * @description Granularity of the response. Can be one of `hour`, `day`, `week` or `month`
       * @default null
       */
      interval?: components["schemas"]["IntervalType"] | null;
      /**
       * Kind
       * @default LifecycleQuery
       * @constant
       */
      kind?: "LifecycleQuery";
      /**
       * @description Properties specific to the lifecycle insight
       * @default null
       */
      lifecycleFilter?: components["schemas"]["LifecycleFilter"] | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Properties
       * @description Property filters for all series
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | components["schemas"]["PropertyGroupFilter"]
        | null;
      /** @default null */
      response?: components["schemas"]["LifecycleQueryResponse"] | null;
      /**
       * Samplingfactor
       * @description Sampling rate
       * @default null
       */
      samplingFactor?: number | null;
      /**
       * Series
       * @description Events and actions to include
       */
      series: (
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["DataWarehouseNode"]
      )[];
    };
    /** LifecycleQueryResponse */
    LifecycleQueryResponse: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: Record<string, never>[];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /**
     * LifecycleToggle
     * @enum {string}
     */
    LifecycleToggle: "new" | "resurrecting" | "returning" | "dormant";
    /**
     * MaterializationMode
     * @enum {string}
     */
    MaterializationMode: "auto" | "legacy_null_as_string" | "legacy_null_as_null" | "disabled";
    /**
     * @description * `total` - total
     * * `dau` - dau
     * * `weekly_active` - weekly_active
     * * `monthly_active` - monthly_active
     * * `unique_group` - unique_group
     * * `unique_session` - unique_session
     * * `sum` - sum
     * * `min` - min
     * * `max` - max
     * * `avg` - avg
     * * `median` - median
     * * `p90` - p90
     * * `p95` - p95
     * * `p99` - p99
     * * `min_count_per_actor` - min_count_per_actor
     * * `max_count_per_actor` - max_count_per_actor
     * * `avg_count_per_actor` - avg_count_per_actor
     * * `median_count_per_actor` - median_count_per_actor
     * * `p90_count_per_actor` - p90_count_per_actor
     * * `p95_count_per_actor` - p95_count_per_actor
     * * `p99_count_per_actor` - p99_count_per_actor
     * * `hogql` - hogql
     * @enum {string}
     */
    MathEnum:
      | "total"
      | "dau"
      | "weekly_active"
      | "monthly_active"
      | "unique_group"
      | "unique_session"
      | "sum"
      | "min"
      | "max"
      | "avg"
      | "median"
      | "p90"
      | "p95"
      | "p99"
      | "min_count_per_actor"
      | "max_count_per_actor"
      | "avg_count_per_actor"
      | "median_count_per_actor"
      | "p90_count_per_actor"
      | "p95_count_per_actor"
      | "p99_count_per_actor"
      | "hogql";
    /**
     * MathGroupTypeIndex
     * @enum {numeric}
     */
    MathGroupTypeIndex: 0 | 1 | 2 | 3 | 4;
    MinimalFeatureFlag: {
      id: number;
      team_id: number;
      name?: string;
      key: string;
      filters?: {
        [key: string]: unknown;
      };
      deleted?: boolean;
      active?: boolean;
      ensure_experience_continuity?: boolean | null;
    };
    MinimalPerson: {
      id: number;
      name: string;
      distinct_ids: string;
      properties?: unknown;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      uuid: string;
    };
    Notebook: {
      /** Format: uuid */
      id: string;
      short_id: string;
      title?: string | null;
      content?: unknown;
      text_content?: string | null;
      version?: number;
      deleted?: boolean;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      last_modified_at: string;
      last_modified_by: components["schemas"]["UserBasic"];
    };
    NotebookMinimal: {
      /** Format: uuid */
      id: string;
      short_id: string;
      title: string | null;
      deleted: boolean;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      last_modified_at: string;
      last_modified_by: components["schemas"]["UserBasic"];
    };
    /** @enum {unknown} */
    NullEnum: "";
    /**
     * @description * `exact` - exact
     * * `is_not` - is_not
     * * `icontains` - icontains
     * * `not_icontains` - not_icontains
     * * `regex` - regex
     * * `not_regex` - not_regex
     * * `gt` - gt
     * * `lt` - lt
     * * `gte` - gte
     * * `lte` - lte
     * * `is_set` - is_set
     * * `is_not_set` - is_not_set
     * * `is_date_exact` - is_date_exact
     * * `is_date_after` - is_date_after
     * * `is_date_before` - is_date_before
     * @enum {string}
     */
    OperatorEnum:
      | "exact"
      | "is_not"
      | "icontains"
      | "not_icontains"
      | "regex"
      | "not_regex"
      | "gt"
      | "lt"
      | "gte"
      | "lte"
      | "is_set"
      | "is_not_set"
      | "is_date_exact"
      | "is_date_after"
      | "is_date_before";
    Organization: {
      /** Format: uuid */
      id: string;
      name: string;
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      membership_level: components["schemas"]["EffectiveMembershipLevelEnum"] | null;
      plugins_access_level: components["schemas"]["PluginsAccessLevelEnum"];
      teams: readonly {
        [key: string]: unknown;
      }[];
      available_features: readonly string[];
      available_product_features: readonly unknown[] | null;
      is_member_join_email_enabled?: boolean;
      metadata: string;
      customer_id: string | null;
      enforce_2fa?: boolean | null;
      member_count: string;
    };
    /**
     * @description Serializer for `Organization` model with minimal attributes to speeed up loading and transfer times.
     * Also used for nested serializers.
     */
    OrganizationBasic: {
      /** Format: uuid */
      id: string;
      name: string;
      slug: string;
      membership_level: components["schemas"]["EffectiveMembershipLevelEnum"] | null;
    };
    OrganizationDomain: {
      /** Format: uuid */
      id: string;
      domain: string;
      /** @description Determines whether a domain is verified or not. */
      is_verified: boolean;
      /** Format: date-time */
      verified_at: string | null;
      verification_challenge: string;
      jit_provisioning_enabled?: boolean;
      sso_enforcement?: string;
      /** @description Returns whether SAML is configured for the instance. Does not validate the user has the required license (that check is performed in other places). */
      has_saml: boolean;
      saml_entity_id?: string | null;
      saml_acs_url?: string | null;
      saml_x509_cert?: string | null;
    };
    OrganizationInvite: {
      /** Format: uuid */
      id: string;
      /** Format: email */
      target_email: string;
      first_name?: string;
      emailing_attempt_made: boolean;
      /** @description Check if invite is older than INVITE_DAYS_VALIDITY days. */
      is_expired: boolean;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      message?: string | null;
    };
    OrganizationMember: {
      /** Format: uuid */
      id: string;
      user: components["schemas"]["UserBasic"];
      level?: components["schemas"]["OrganizationMemberLevelEnum"];
      /** Format: date-time */
      joined_at: string;
      /** Format: date-time */
      updated_at: string;
      is_2fa_enabled: boolean;
      has_social_auth: boolean;
    };
    /**
     * @description * `1` - member
     * * `8` - administrator
     * * `15` - owner
     * @enum {integer}
     */
    OrganizationMemberLevelEnum: 1 | 8 | 15;
    PaginatedActionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Action"][];
    };
    PaginatedActivityLogList: {
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["ActivityLog"][];
    };
    PaginatedAnnotationList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Annotation"][];
    };
    PaginatedBatchExportList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["BatchExport"][];
    };
    PaginatedBatchExportLogEntryList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["BatchExportLogEntry"][];
    };
    PaginatedBatchExportRunList: {
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["BatchExportRun"][];
    };
    PaginatedClickhouseEventList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      results?: components["schemas"]["ClickhouseEvent"][];
    };
    PaginatedCohortList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Cohort"][];
    };
    PaginatedDashboardBasicList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DashboardBasic"][];
    };
    PaginatedDashboardTemplateList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DashboardTemplate"][];
    };
    PaginatedEarlyAccessFeatureList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["EarlyAccessFeature"][];
    };
    PaginatedExperimentList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Experiment"][];
    };
    PaginatedExportedAssetList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["ExportedAsset"][];
    };
    PaginatedFeatureFlagList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["FeatureFlag"][];
    };
    PaginatedFeatureFlagRoleAccessList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["FeatureFlagRoleAccess"][];
    };
    PaginatedGroupList: {
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Group"][];
    };
    PaginatedInsightList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Insight"][];
    };
    PaginatedNotebookMinimalList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["NotebookMinimal"][];
    };
    PaginatedOrganizationDomainList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["OrganizationDomain"][];
    };
    PaginatedOrganizationInviteList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["OrganizationInvite"][];
    };
    PaginatedOrganizationList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Organization"][];
    };
    PaginatedOrganizationMemberList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["OrganizationMember"][];
    };
    PaginatedPersonList: {
      /**
       * Format: uri
       * @example https://app.posthog.com/api/projects/{project_id}/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example https://app.posthog.com/api/projects/{project_id}/accounts/?offset=400&limit=100
       */
      previous?: string | null;
      /** @example 400 */
      count?: number;
      results?: components["schemas"]["Person"][];
    };
    PaginatedPluginConfigList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PluginConfig"][];
    };
    PaginatedPluginList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Plugin"][];
    };
    PaginatedPluginLogEntryList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PluginLogEntry"][];
    };
    PaginatedRoleList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Role"][];
    };
    PaginatedRoleMembershipList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["RoleMembership"][];
    };
    PaginatedSessionRecordingList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["SessionRecording"][];
    };
    PaginatedSessionRecordingPlaylistList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["SessionRecordingPlaylist"][];
    };
    PaginatedSubscriptionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Subscription"][];
    };
    PaginatedSurveyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Survey"][];
    };
    PaginatedTeamBasicList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TeamBasic"][];
    };
    PaginatedUserList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["User"][];
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedAction: {
      id?: number;
      name?: string | null;
      description?: string;
      tags?: unknown[];
      post_to_slack?: boolean;
      slack_message_format?: string;
      steps?: components["schemas"]["ActionStep"][];
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      is_calculating?: boolean;
      /** Format: date-time */
      last_calculated_at?: string;
      team_id?: number;
      /** @default true */
      is_action?: boolean;
      bytecode_error?: string | null;
    };
    PatchedAnnotation: {
      id?: number;
      content?: string | null;
      /** Format: date-time */
      date_marker?: string | null;
      creation_type?: components["schemas"]["CreationTypeEnum"];
      dashboard_item?: number | null;
      insight_short_id?: string | null;
      insight_name?: string | null;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      updated_at?: string;
      deleted?: boolean;
      scope?: components["schemas"]["AnnotationScopeEnum"];
    };
    /** @description Serializer for a BatchExport model. */
    PatchedBatchExport: {
      /** Format: uuid */
      id?: string;
      /** @description The team this belongs to. */
      team_id?: number;
      /** @description A human-readable name for this BatchExport. */
      name?: string;
      destination?: components["schemas"]["BatchExportDestination"];
      interval?: components["schemas"]["IntervalEnum"];
      /** @description Whether this BatchExport is paused or not. */
      paused?: boolean;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExport was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExport was last updated.
       */
      last_updated_at?: string;
      /**
       * Format: date-time
       * @description The timestamp at which this BatchExport was last paused.
       */
      last_paused_at?: string | null;
      /**
       * Format: date-time
       * @description Time before which any Batch Export runs won't be triggered.
       */
      start_at?: string | null;
      /**
       * Format: date-time
       * @description Time after which any Batch Export runs won't be triggered.
       */
      end_at?: string | null;
      latest_runs?: readonly components["schemas"]["BatchExportRun"][];
      hogql_query?: string;
      /** @description A schema of custom fields to select when exporting data. */
      schema?: unknown;
    };
    PatchedCohort: {
      id?: number;
      name?: string | null;
      description?: string;
      groups?: unknown;
      deleted?: boolean;
      filters?: unknown;
      query?: unknown;
      is_calculating?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      last_calculation?: string | null;
      errors_calculating?: number;
      count?: number | null;
      is_static?: boolean;
      experiment_set?: readonly number[];
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedDashboard: {
      id?: number;
      name?: string | null;
      description?: string;
      pinned?: boolean;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      is_shared?: boolean;
      deleted?: boolean;
      creation_mode?: components["schemas"]["CreationModeEnum"];
      use_template?: string;
      use_dashboard?: number | null;
      /** @default false */
      delete_insights?: boolean;
      filters?: unknown;
      tags?: unknown[];
      tiles?:
        | readonly {
            [key: string]: unknown;
          }[]
        | null;
      restriction_level?: components["schemas"]["RestrictionLevelEnum"];
      effective_restriction_level?: components["schemas"]["EffectiveRestrictionLevelEnum"];
      effective_privilege_level?: components["schemas"]["EffectivePrivilegeLevelEnum"];
    };
    PatchedDashboardTemplate: {
      /** Format: uuid */
      id?: string;
      template_name?: string | null;
      dashboard_description?: string | null;
      dashboard_filters?: unknown;
      tags?: string[] | null;
      tiles?: unknown;
      variables?: unknown;
      deleted?: boolean | null;
      /** Format: date-time */
      created_at?: string | null;
      created_by?: number | null;
      image_url?: string | null;
      team_id?: number | null;
      scope?:
        | components["schemas"]["DashboardTemplateScopeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
    };
    PatchedEarlyAccessFeature: {
      /** Format: uuid */
      id?: string;
      feature_flag?: components["schemas"]["MinimalFeatureFlag"];
      name?: string;
      description?: string;
      stage?: components["schemas"]["StageEnum"];
      /** Format: uri */
      documentation_url?: string;
      /** Format: date-time */
      created_at?: string;
    };
    PatchedExperiment: {
      id?: number;
      name?: string;
      description?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      feature_flag_key?: string;
      feature_flag?: components["schemas"]["MinimalFeatureFlag"];
      exposure_cohort?: number | null;
      parameters?: unknown;
      secondary_metrics?: unknown;
      filters?: unknown;
      archived?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PatchedExplicitTeamMember: {
      /** Format: uuid */
      id?: string;
      level?: components["schemas"]["ExplicitTeamMemberLevelEnum"];
      parent_level?: number;
      /** Format: uuid */
      parent_membership_id?: string;
      /** Format: date-time */
      joined_at?: string;
      /** Format: date-time */
      updated_at?: string;
      user?: components["schemas"]["UserBasic"];
      /** Format: uuid */
      user_uuid?: string;
      /** @description If organization level is higher than project level, then that takes precedence over explicit project level. */
      effective_level?: components["schemas"]["EffectiveMembershipLevelEnum"];
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedFeatureFlag: {
      id?: number;
      /** @description contains the description for the flag (field name `name` is kept for backwards-compatibility) */
      name?: string;
      key?: string;
      filters?: {
        [key: string]: unknown;
      };
      deleted?: boolean;
      active?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      is_simple_flag?: boolean;
      rollout_percentage?: number | null;
      ensure_experience_continuity?: boolean | null;
      experiment_set?: readonly number[];
      surveys?: {
        [key: string]: unknown;
      };
      features?: {
        [key: string]: unknown;
      };
      rollback_conditions?: unknown;
      performed_rollback?: boolean | null;
      can_edit?: boolean;
      tags?: unknown[];
      usage_dashboard?: number;
      analytics_dashboards?: number[];
      has_enriched_analytics?: boolean | null;
    };
    PatchedGroupType: {
      group_type?: string;
      group_type_index?: number;
      name_singular?: string | null;
      name_plural?: string | null;
    };
    /** @description Simplified serializer to speed response times when loading large amounts of objects. */
    PatchedInsight: {
      id?: number;
      short_id?: string;
      name?: string | null;
      derived_name?: string | null;
      filters?: unknown;
      /** @description Query node JSON string */
      query?: unknown;
      order?: number | null;
      deleted?: boolean;
      /**
       * @description
       *         DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
       *         A dashboard ID for each of the dashboards that this insight is displayed on.
       */
      dashboards?: number[];
      /**
       * @description
       *     A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
       */
      dashboard_tiles?: readonly components["schemas"]["DashboardTileBasic"][];
      /**
       * @description
       *     The datetime this insight's results were generated.
       *     If added to one or more dashboards the insight can be refreshed separately on each.
       *     Returns the appropriate last_refresh datetime for the context the insight is viewed in
       *     (see from_dashboard query parameter).
       */
      last_refresh?: string;
      /**
       * @description
       *     The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
       *     by querying the database.
       */
      next_allowed_client_refresh?: string;
      result?: string;
      /** Format: date-time */
      created_at?: string | null;
      created_by?: components["schemas"]["UserBasic"];
      description?: string | null;
      /** Format: date-time */
      updated_at?: string;
      tags?: unknown[];
      favorited?: boolean;
      saved?: boolean;
      /** Format: date-time */
      last_modified_at?: string;
      last_modified_by?: components["schemas"]["UserBasic"];
      is_sample?: boolean;
      effective_restriction_level?: components["schemas"]["EffectiveRestrictionLevelEnum"];
      effective_privilege_level?: components["schemas"]["EffectivePrivilegeLevelEnum"];
      /** @description The timezone this chart is displayed in. */
      timezone?: string;
      is_cached?: string;
    };
    PatchedNotebook: {
      /** Format: uuid */
      id?: string;
      short_id?: string;
      title?: string | null;
      content?: unknown;
      text_content?: string | null;
      version?: number;
      deleted?: boolean;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      last_modified_at?: string;
      last_modified_by?: components["schemas"]["UserBasic"];
    };
    PatchedOrganization: {
      /** Format: uuid */
      id?: string;
      name?: string;
      slug?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      membership_level?: components["schemas"]["EffectiveMembershipLevelEnum"] | null;
      plugins_access_level?: components["schemas"]["PluginsAccessLevelEnum"];
      teams?: readonly {
        [key: string]: unknown;
      }[];
      available_features?: readonly string[];
      available_product_features?: readonly unknown[] | null;
      is_member_join_email_enabled?: boolean;
      metadata?: string;
      customer_id?: string | null;
      enforce_2fa?: boolean | null;
      member_count?: string;
    };
    PatchedOrganizationDomain: {
      /** Format: uuid */
      id?: string;
      domain?: string;
      /** @description Determines whether a domain is verified or not. */
      is_verified?: boolean;
      /** Format: date-time */
      verified_at?: string | null;
      verification_challenge?: string;
      jit_provisioning_enabled?: boolean;
      sso_enforcement?: string;
      /** @description Returns whether SAML is configured for the instance. Does not validate the user has the required license (that check is performed in other places). */
      has_saml?: boolean;
      saml_entity_id?: string | null;
      saml_acs_url?: string | null;
      saml_x509_cert?: string | null;
    };
    PatchedOrganizationMember: {
      /** Format: uuid */
      id?: string;
      user?: components["schemas"]["UserBasic"];
      level?: components["schemas"]["OrganizationMemberLevelEnum"];
      /** Format: date-time */
      joined_at?: string;
      /** Format: date-time */
      updated_at?: string;
      is_2fa_enabled?: boolean;
      has_social_auth?: boolean;
    };
    PatchedPerson: {
      id?: number;
      name?: string;
      distinct_ids?: readonly string[];
      properties?: unknown;
      /** Format: date-time */
      created_at?: string;
      /** Format: uuid */
      uuid?: string;
    };
    PatchedPlugin: {
      id?: number;
      plugin_type?:
        | components["schemas"]["PluginTypeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      name?: string | null;
      description?: string | null;
      url?: string | null;
      icon?: string | null;
      config_schema?: unknown;
      tag?: string | null;
      latest_tag?: string | null;
      is_global?: boolean;
      /** Format: uuid */
      organization_id?: string;
      organization_name?: string;
      capabilities?: unknown;
      metrics?: unknown;
      public_jobs?: unknown;
    };
    PatchedPluginConfig: {
      id?: number;
      plugin?: number;
      enabled?: boolean;
      order?: number;
      config?: string;
      error?: string;
      team_id?: number | null;
      plugin_info?: string;
      delivery_rate_24h?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      name?: string | null;
      description?: string | null;
      deleted?: boolean | null;
    };
    PatchedRole: {
      /** Format: uuid */
      id?: string;
      name?: string;
      feature_flags_access_level?: components["schemas"]["FeatureFlagsAccessLevelEnum"];
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      members?: string;
      associated_flags?: string;
    };
    PatchedSessionRecordingPlaylist: {
      id?: number;
      short_id?: string;
      name?: string | null;
      derived_name?: string | null;
      description?: string;
      pinned?: boolean;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      filters?: unknown;
      /** Format: date-time */
      last_modified_at?: string;
      last_modified_by?: components["schemas"]["UserBasic"];
    };
    /** @description Standard Subscription serializer. */
    PatchedSubscription: {
      id?: number;
      dashboard?: number | null;
      insight?: number | null;
      target_type?: components["schemas"]["TargetTypeEnum"];
      target_value?: string;
      frequency?: components["schemas"]["FrequencyEnum"];
      interval?: number;
      byweekday?: components["schemas"]["ByweekdayEnum"][] | null;
      bysetpos?: number | null;
      count?: number | null;
      /** Format: date-time */
      start_date?: string;
      /** Format: date-time */
      until_date?: string | null;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      title?: string | null;
      summary?: string;
      /** Format: date-time */
      next_delivery_date?: string | null;
      invite_message?: string | null;
    };
    PatchedSurveySerializerCreateUpdateOnly: {
      /** Format: uuid */
      id?: string;
      name?: string;
      description?: string;
      type?: components["schemas"]["Type7baEnum"];
      linked_flag?: components["schemas"]["MinimalFeatureFlag"];
      linked_flag_id?: number | null;
      targeting_flag_id?: number;
      targeting_flag?: components["schemas"]["MinimalFeatureFlag"];
      targeting_flag_filters?: unknown;
      remove_targeting_flag?: boolean | null;
      questions?: unknown;
      conditions?: unknown;
      appearance?: unknown;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      archived?: boolean;
      responses_limit?: number | null;
    };
    PatchedTeam: {
      id?: number;
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      organization?: string;
      api_token?: string;
      app_urls?: (string | null)[];
      name?: string;
      slack_incoming_webhook?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      anonymize_ips?: boolean;
      completed_snippet_onboarding?: boolean;
      ingested_event?: boolean;
      test_account_filters?: unknown;
      test_account_filters_default_checked?: boolean | null;
      path_cleaning_filters?: unknown;
      is_demo?: boolean;
      timezone?: components["schemas"]["TimezoneEnum"];
      data_attributes?: unknown;
      person_display_name_properties?: string[] | null;
      correlation_config?: unknown;
      autocapture_opt_out?: boolean | null;
      autocapture_exceptions_opt_in?: boolean | null;
      autocapture_exceptions_errors_to_ignore?: unknown;
      capture_console_log_opt_in?: boolean | null;
      capture_performance_opt_in?: boolean | null;
      session_recording_opt_in?: boolean;
      /** Format: decimal */
      session_recording_sample_rate?: string | null;
      session_recording_minimum_duration_milliseconds?: number | null;
      session_recording_linked_flag?: unknown;
      session_recording_network_payload_capture_config?: unknown;
      session_replay_config?: unknown;
      effective_membership_level?: components["schemas"]["EffectiveMembershipLevelEnum"] | null;
      access_control?: boolean;
      week_start_day?:
        | components["schemas"]["WeekStartDayEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      has_group_types?: boolean;
      primary_dashboard?: number | null;
      live_events_columns?: string[] | null;
      recording_domains?: (string | null)[] | null;
      person_on_events_querying_enabled?: boolean;
      groups_on_events_querying_enabled?: boolean;
      inject_web_apps?: boolean | null;
      extra_settings?: unknown;
      has_completed_onboarding_for?: unknown;
      surveys_opt_in?: boolean | null;
      heatmaps_opt_in?: boolean | null;
    };
    PatchedUser: {
      /** Format: date-time */
      date_joined?: string;
      /** Format: uuid */
      uuid?: string;
      distinct_id?: string | null;
      first_name?: string;
      last_name?: string;
      /**
       * Email address
       * Format: email
       */
      email?: string;
      /**
       * Pending email address awaiting verification
       * Format: email
       */
      pending_email?: string | null;
      email_opt_in?: boolean | null;
      is_email_verified?: boolean | null;
      notification_settings?: {
        [key: string]: unknown;
      };
      anonymize_data?: boolean | null;
      toolbar_mode?:
        | components["schemas"]["ToolbarModeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      has_password?: boolean;
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      is_staff?: boolean;
      is_impersonated?: boolean | null;
      team?: components["schemas"]["TeamBasic"];
      organization?: components["schemas"]["Organization"];
      organizations?: readonly components["schemas"]["OrganizationBasic"][];
      set_current_organization?: string;
      set_current_team?: string;
      password?: string;
      current_password?: string;
      events_column_config?: unknown;
      is_2fa_enabled?: boolean;
      has_social_auth?: boolean;
      has_seen_product_intro_for?: unknown;
      scene_personalisation?: readonly components["schemas"]["ScenePersonalisationBasic"][];
      theme_mode?:
        | components["schemas"]["ThemeModeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
    };
    /** PathCleaningFilter */
    PathCleaningFilter: {
      /**
       * Alias
       * @default null
       */
      alias?: string | null;
      /**
       * Regex
       * @default null
       */
      regex?: string | null;
    };
    /**
     * PathType
     * @enum {string}
     */
    PathType: "$pageview" | "$screen" | "custom_event" | "hogql";
    /** PathsFilter */
    PathsFilter: {
      /**
       * Edgelimit
       * @default null
       */
      edgeLimit?: number | null;
      /**
       * Endpoint
       * @default null
       */
      endPoint?: string | null;
      /**
       * Excludeevents
       * @default null
       */
      excludeEvents?: string[] | null;
      /**
       * Includeeventtypes
       * @default null
       */
      includeEventTypes?: components["schemas"]["PathType"][] | null;
      /**
       * Localpathcleaningfilters
       * @default null
       */
      localPathCleaningFilters?: components["schemas"]["PathCleaningFilter"][] | null;
      /**
       * Maxedgeweight
       * @default null
       */
      maxEdgeWeight?: number | null;
      /**
       * Minedgeweight
       * @default null
       */
      minEdgeWeight?: number | null;
      /**
       * Pathdropoffkey
       * @description Relevant only within actors query
       * @default null
       */
      pathDropoffKey?: string | null;
      /**
       * Pathendkey
       * @description Relevant only within actors query
       * @default null
       */
      pathEndKey?: string | null;
      /**
       * Pathgroupings
       * @default null
       */
      pathGroupings?: string[] | null;
      /**
       * Pathreplacements
       * @default null
       */
      pathReplacements?: boolean | null;
      /**
       * Pathstartkey
       * @description Relevant only within actors query
       * @default null
       */
      pathStartKey?: string | null;
      /**
       * Pathshogqlexpression
       * @default null
       */
      pathsHogQLExpression?: string | null;
      /**
       * Startpoint
       * @default null
       */
      startPoint?: string | null;
      /**
       * Steplimit
       * @default null
       */
      stepLimit?: number | null;
    };
    /** PathsQuery */
    PathsQuery: {
      /**
       * Aggregation Group Type Index
       * @description Groups aggregation
       * @default null
       */
      aggregation_group_type_index?: number | null;
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @description Exclude internal and test users by applying the respective filters
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * @description Used for displaying paths in relation to funnel steps.
       * @default null
       */
      funnelPathsFilter?: components["schemas"]["FunnelPathsFilter"] | null;
      /**
       * Kind
       * @default PathsQuery
       * @constant
       */
      kind?: "PathsQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** @description Properties specific to the paths insight */
      pathsFilter: components["schemas"]["PathsFilter"];
      /**
       * Properties
       * @description Property filters for all series
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | components["schemas"]["PropertyGroupFilter"]
        | null;
      /** @default null */
      response?: components["schemas"]["PathsQueryResponse"] | null;
      /**
       * Samplingfactor
       * @description Sampling rate
       * @default null
       */
      samplingFactor?: number | null;
    };
    /** PathsQueryResponse */
    PathsQueryResponse: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: Record<string, never>[];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    Person: {
      id: number;
      name: string;
      distinct_ids: readonly string[];
      properties?: unknown;
      /** Format: date-time */
      created_at: string;
      /** Format: uuid */
      uuid: string;
    };
    /** PersonPropertyFilter */
    PersonPropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @description Person properties
       * @default person
       * @constant
       */
      type?: "person";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    /**
     * PersonsArgMaxVersion
     * @enum {string}
     */
    PersonsArgMaxVersion: "auto" | "v1" | "v2";
    /** PersonsNode */
    PersonsNode: {
      /**
       * Cohort
       * @default null
       */
      cohort?: number | null;
      /**
       * Distinctid
       * @default null
       */
      distinctId?: string | null;
      /**
       * Fixedproperties
       * @description Fixed properties in the query, can't be edited in the interface (e.g. scoping down by person)
       * @default null
       */
      fixedProperties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Kind
       * @default PersonsNode
       * @constant
       */
      kind?: "PersonsNode";
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /**
       * Properties
       * @description Properties configurable in the interface
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | null;
      /**
       * Response
       * @description Cached query response
       * @default null
       */
      response?: Record<string, never> | null;
      /**
       * Search
       * @default null
       */
      search?: string | null;
    };
    /**
     * PersonsOnEventsMode
     * @enum {string}
     */
    PersonsOnEventsMode:
      | "disabled"
      | "person_id_no_override_properties_on_events"
      | "person_id_override_properties_on_events"
      | "person_id_override_properties_joined";
    Plugin: {
      id: number;
      plugin_type?:
        | components["schemas"]["PluginTypeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      name?: string | null;
      description?: string | null;
      url: string | null;
      icon?: string | null;
      config_schema?: unknown;
      tag?: string | null;
      latest_tag: string | null;
      is_global?: boolean;
      /** Format: uuid */
      organization_id: string;
      organization_name: string;
      capabilities?: unknown;
      metrics?: unknown;
      public_jobs?: unknown;
    };
    PluginConfig: {
      id: number;
      plugin: number;
      enabled?: boolean;
      order: number;
      config: string;
      error: string;
      team_id: number | null;
      plugin_info: string;
      delivery_rate_24h: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      name?: string | null;
      description?: string | null;
      deleted?: boolean | null;
    };
    PluginLogEntry: {
      /** Format: uuid */
      id: string;
      team_id: number;
      plugin_id: number;
      plugin_config_id: number;
      /** Format: date-time */
      timestamp: string;
      source: components["schemas"]["SourceEnum"];
      type: components["schemas"]["PluginLogEntryTypeEnum"];
      message: string;
      /** Format: uuid */
      instance_id: string;
    };
    /**
     * @description * `DEBUG` - DEBUG
     * * `LOG` - LOG
     * * `INFO` - INFO
     * * `WARN` - WARN
     * * `ERROR` - ERROR
     * @enum {string}
     */
    PluginLogEntryTypeEnum: "DEBUG" | "LOG" | "INFO" | "WARN" | "ERROR";
    /**
     * @description * `local` - local
     * * `custom` - custom
     * * `repository` - repository
     * * `source` - source
     * @enum {string}
     */
    PluginTypeEnum: "local" | "custom" | "repository" | "source";
    /**
     * @description * `0` - none
     * * `3` - config
     * * `6` - install
     * * `9` - root
     * @enum {integer}
     */
    PluginsAccessLevelEnum: 0 | 3 | 6 | 9;
    Property: {
      /**
       * @description
       *  You can use a simplified version:
       * ```json
       * {
       *     "properties": [
       *         {
       *             "key": "email",
       *             "value": "x@y.com",
       *             "operator": "exact",
       *             "type": "event"
       *         }
       *     ]
       * }
       * ```
       *
       * Or you can create more complicated queries with AND and OR:
       * ```json
       * {
       *     "properties": {
       *         "type": "AND",
       *         "values": [
       *             {
       *                 "type": "OR",
       *                 "values": [
       *                     {"key": "email", ...},
       *                     {"key": "email", ...}
       *                 ]
       *             },
       *             {
       *                 "type": "AND",
       *                 "values": [
       *                     {"key": "email", ...},
       *                     {"key": "email", ...}
       *                 ]
       *             }
       *         ]
       *     ]
       * }
       * ```
       *
       *
       * * `AND` - AND
       * * `OR` - OR
       * @default AND
       */
      type?: components["schemas"]["PropertyTypeEnum"];
      values: components["schemas"]["PropertyItem"][];
    };
    /** PropertyGroupFilter */
    PropertyGroupFilter: {
      type: components["schemas"]["FilterLogicalOperator"];
      /** Values */
      values: components["schemas"]["PropertyGroupFilterValue"][];
    };
    /** PropertyGroupFilterValue */
    PropertyGroupFilterValue: {
      type: components["schemas"]["FilterLogicalOperator"];
      /** Values */
      values: (
        | components["schemas"]["PropertyGroupFilterValue"]
        | components["schemas"]["EventPropertyFilter"]
        | components["schemas"]["PersonPropertyFilter"]
        | components["schemas"]["ElementPropertyFilter"]
        | components["schemas"]["SessionPropertyFilter"]
        | components["schemas"]["CohortPropertyFilter"]
        | components["schemas"]["RecordingDurationFilter"]
        | components["schemas"]["GroupPropertyFilter"]
        | components["schemas"]["FeaturePropertyFilter"]
        | components["schemas"]["HogQLPropertyFilter"]
        | components["schemas"]["EmptyPropertyFilter"]
        | components["schemas"]["DataWarehousePropertyFilter"]
        | components["schemas"]["DataWarehousePersonPropertyFilter"]
      )[];
    };
    PropertyItem: {
      /** @description Key of the property you're filtering on. For example `email` or `$current_url` */
      key: string;
      /** @description Value of your filter. For example `test@example.com` or `https://example.com/test/`. Can be an array for an OR query, like `["test@example.com","ok@example.com"]` */
      value: string;
      /** @default exact */
      operator?:
        | components["schemas"]["OperatorEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      /** @default event */
      type?: components["schemas"]["PropertyItemTypeEnum"] | components["schemas"]["BlankEnum"];
    };
    /**
     * @description * `event` - event
     * * `feature` - feature
     * * `person` - person
     * * `cohort` - cohort
     * * `element` - element
     * * `static-cohort` - static-cohort
     * * `precalculated-cohort` - precalculated-cohort
     * * `group` - group
     * * `recording` - recording
     * * `behavioral` - behavioral
     * * `session` - session
     * * `hogql` - hogql
     * * `data_warehouse` - data_warehouse
     * * `data_warehouse_person_property` - data_warehouse_person_property
     * @enum {string}
     */
    PropertyItemTypeEnum:
      | "event"
      | "feature"
      | "person"
      | "cohort"
      | "element"
      | "static-cohort"
      | "precalculated-cohort"
      | "group"
      | "recording"
      | "behavioral"
      | "session"
      | "hogql"
      | "data_warehouse"
      | "data_warehouse_person_property";
    /**
     * PropertyMathType
     * @enum {string}
     */
    PropertyMathType: "avg" | "sum" | "min" | "max" | "median" | "p90" | "p95" | "p99";
    /**
     * PropertyOperator
     * @enum {string}
     */
    PropertyOperator:
      | "exact"
      | "is_not"
      | "icontains"
      | "not_icontains"
      | "regex"
      | "not_regex"
      | "gt"
      | "gte"
      | "lt"
      | "lte"
      | "is_set"
      | "is_not_set"
      | "is_date_exact"
      | "is_date_before"
      | "is_date_after"
      | "between"
      | "not_between"
      | "min"
      | "max";
    /**
     * @description * `AND` - AND
     * * `OR` - OR
     * @enum {string}
     */
    PropertyTypeEnum: "AND" | "OR";
    /** QueryRequest */
    QueryRequest: {
      /**
       * Async
       * @description (Experimental) Whether to run the query asynchronously. Defaults to False. If True, the `id` of the query can be used to check the status and to cancel it.
       * @default null
       */
      async?: boolean | null;
      /**
       * Client Query Id
       * @description Client provided query ID. Can be used to retrieve the status or cancel the query.
       * @default null
       */
      client_query_id?: string | null;
      /**
       * Query
       * @description Submit a JSON string representing a query for PostHog data analysis, for example a HogQL query.
       *
       * Example payload:
       *
       * ```
       *
       * {"query": {"kind": "HogQLQuery", "query": "select * from events limit 100"}}
       *
       * ```
       *
       * For more details on HogQL queries, see the [PostHog HogQL documentation](/docs/hogql#api-access).
       */
      query:
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["PersonsNode"]
        | components["schemas"]["DataWarehouseNode"]
        | components["schemas"]["TimeToSeeDataSessionsQuery"]
        | components["schemas"]["EventsQuery"]
        | components["schemas"]["ActorsQuery"]
        | components["schemas"]["InsightActorsQuery"]
        | components["schemas"]["InsightActorsQueryOptions"]
        | components["schemas"]["SessionsTimelineQuery"]
        | components["schemas"]["HogQLQuery"]
        | components["schemas"]["HogQLMetadata"]
        | components["schemas"]["HogQLAutocomplete"]
        | components["schemas"]["WebOverviewQuery"]
        | components["schemas"]["WebStatsTableQuery"]
        | components["schemas"]["WebTopClicksQuery"]
        | components["schemas"]["DataVisualizationNode"]
        | components["schemas"]["DataTableNode"]
        | components["schemas"]["SavedInsightNode"]
        | components["schemas"]["InsightVizNode"]
        | components["schemas"]["TrendsQuery"]
        | components["schemas"]["FunnelsQuery"]
        | components["schemas"]["RetentionQuery"]
        | components["schemas"]["PathsQuery"]
        | components["schemas"]["StickinessQuery"]
        | components["schemas"]["LifecycleQuery"]
        | components["schemas"]["FunnelCorrelationQuery"]
        | components["schemas"]["DatabaseSchemaQuery"];
      /**
       * Refresh
       * @default null
       */
      refresh?: boolean | null;
    };
    /** QueryResponseAlternative */
    QueryResponseAlternative:
      | components["schemas"]["QueryResponseAlternative1"]
      | Record<string, never>
      | components["schemas"]["QueryResponseAlternative2"]
      | components["schemas"]["QueryResponseAlternative3"]
      | components["schemas"]["QueryResponseAlternative4"]
      | components["schemas"]["QueryResponseAlternative5"]
      | components["schemas"]["QueryResponseAlternative6"]
      | components["schemas"]["QueryResponseAlternative7"]
      | components["schemas"]["QueryResponseAlternative8"]
      | components["schemas"]["QueryResponseAlternative9"]
      | components["schemas"]["QueryResponseAlternative10"]
      | components["schemas"]["QueryResponseAlternative11"]
      | components["schemas"]["QueryResponseAlternative12"]
      | components["schemas"]["QueryResponseAlternative13"]
      | components["schemas"]["QueryResponseAlternative14"]
      | components["schemas"]["QueryResponseAlternative17"]
      | {
          [key: string]: components["schemas"]["DatabaseSchemaQueryResponseField"][];
        };
    /** QueryResponseAlternative1 */
    QueryResponseAlternative1: {
      /**
       * Next
       * @default null
       */
      next?: string | null;
      /** Results */
      results: components["schemas"]["EventType"][];
    };
    /** QueryResponseAlternative10 */
    QueryResponseAlternative10: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: components["schemas"]["WebOverviewItem"][];
      /** @default null */
      samplingRate?: components["schemas"]["SamplingRate"] | null;
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /** QueryResponseAlternative11 */
    QueryResponseAlternative11: {
      /**
       * Columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /** Results */
      results: unknown[];
      /** @default null */
      samplingRate?: components["schemas"]["SamplingRate"] | null;
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @default null
       */
      types?: unknown[] | null;
    };
    /** QueryResponseAlternative12 */
    QueryResponseAlternative12: {
      /**
       * Columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: unknown[];
      /** @default null */
      samplingRate?: components["schemas"]["SamplingRate"] | null;
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @default null
       */
      types?: unknown[] | null;
    };
    /** QueryResponseAlternative13 */
    QueryResponseAlternative13: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: Record<string, never>[];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /** QueryResponseAlternative14 */
    QueryResponseAlternative14: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: components["schemas"]["RetentionResult"][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /** QueryResponseAlternative17 */
    QueryResponseAlternative17: {
      /**
       * Columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      results: components["schemas"]["FunnelCorrelationResult"];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @default null
       */
      types?: unknown[] | null;
    };
    /** QueryResponseAlternative2 */
    QueryResponseAlternative2: {
      /** Results */
      results: Record<string, never>[];
    };
    /** QueryResponseAlternative3 */
    QueryResponseAlternative3: {
      /** Columns */
      columns: unknown[];
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /** Hogql */
      hogql: string;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /** Results */
      results: unknown[][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /** Types */
      types: string[];
    };
    /** QueryResponseAlternative4 */
    QueryResponseAlternative4: {
      /** Columns */
      columns: unknown[];
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /** Hogql */
      hogql: string;
      /** Limit */
      limit: number;
      /**
       * Missing Actors Count
       * @default null
       */
      missing_actors_count?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** Offset */
      offset: number;
      /** Results */
      results: unknown[][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /** Types */
      types: string[];
    };
    /** QueryResponseAlternative5 */
    QueryResponseAlternative5: {
      /**
       * Breakdown
       * @default null
       */
      breakdown?: components["schemas"]["BreakdownItem"][] | null;
      /**
       * Compare
       * @default null
       */
      compare?: components["schemas"]["CompareItem"][] | null;
      /**
       * Day
       * @default null
       */
      day?: components["schemas"]["DayItem"][] | null;
      /**
       * Interval
       * @default null
       */
      interval?: components["schemas"]["IntervalItem"][] | null;
      /**
       * Series
       * @default null
       */
      series?: components["schemas"]["Series"][] | null;
      /**
       * Status
       * @default null
       */
      status?: components["schemas"]["StatusItem"][] | null;
    };
    /** QueryResponseAlternative6 */
    QueryResponseAlternative6: {
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /** Results */
      results: components["schemas"]["TimelineEntry"][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /** QueryResponseAlternative7 */
    QueryResponseAlternative7: {
      /**
       * Clickhouse
       * @description Executed ClickHouse query
       * @default null
       */
      clickhouse?: string | null;
      /**
       * Columns
       * @description Returned columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Error
       * @description Query error. Returned only if 'explain' is true. Throws an error otherwise.
       * @default null
       */
      error?: string | null;
      /**
       * Explain
       * @description Query explanation output
       * @default null
       */
      explain?: string[] | null;
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @description Generated HogQL query
       * @default null
       */
      hogql?: string | null;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /**
       * @description Query metadata output
       * @default null
       */
      metadata?: components["schemas"]["HogQLMetadataResponse"] | null;
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /**
       * Query
       * @description Input query string
       * @default null
       */
      query?: string | null;
      /**
       * Results
       * @description Query results
       * @default null
       */
      results?: unknown[] | null;
      /**
       * Timings
       * @description Measured timings for different parts of the query generation process
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @description Types of returned columns
       * @default null
       */
      types?: unknown[] | null;
    };
    /** QueryResponseAlternative8 */
    QueryResponseAlternative8: {
      /** Errors */
      errors: components["schemas"]["HogQLNotice"][];
      /**
       * Inputexpr
       * @default null
       */
      inputExpr?: string | null;
      /**
       * Inputselect
       * @default null
       */
      inputSelect?: string | null;
      /**
       * Isvalid
       * @default null
       */
      isValid?: boolean | null;
      /**
       * Isvalidview
       * @default null
       */
      isValidView?: boolean | null;
      /** Notices */
      notices: components["schemas"]["HogQLNotice"][];
      /** Warnings */
      warnings: components["schemas"]["HogQLNotice"][];
    };
    /** QueryResponseAlternative9 */
    QueryResponseAlternative9: {
      /**
       * Incomplete List
       * @description Whether or not the suggestions returned are complete
       */
      incomplete_list: boolean;
      /** Suggestions */
      suggestions: components["schemas"]["AutocompleteCompletionItem"][];
      /**
       * Timings
       * @description Measured timings for different parts of the query generation process
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /** QueryTiming */
    QueryTiming: {
      /**
       * K
       * @description Key. Shortened to 'k' to save on data.
       */
      k: string;
      /**
       * T
       * @description Time in seconds. Shortened to 't' to save on data.
       */
      t: number;
    };
    /** RecordingDurationFilter */
    RecordingDurationFilter: {
      /**
       * Key
       * @default duration
       * @constant
       */
      key?: "duration";
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @default recording
       * @constant
       */
      type?: "recording";
      /** Value */
      value: number;
    };
    /** Response */
    Response: {
      /**
       * Next
       * @default null
       */
      next?: string | null;
      /** Results */
      results: components["schemas"]["EventType"][];
    };
    /**
     * @description * `21` - Everyone in the project can edit
     * * `37` - Only those invited to this dashboard can edit
     * @enum {integer}
     */
    RestrictionLevelEnum: 21 | 37;
    /** RetentionEntity */
    RetentionEntity: {
      /**
       * Custom Name
       * @default null
       */
      custom_name?: string | null;
      /**
       * Id
       * @default null
       */
      id?: string | number | null;
      /** @default null */
      kind?: components["schemas"]["Kind1"] | null;
      /**
       * Name
       * @default null
       */
      name?: string | null;
      /**
       * Order
       * @default null
       */
      order?: number | null;
      /** @default null */
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Uuid
       * @default null
       */
      uuid?: string | null;
    };
    /** RetentionFilter */
    RetentionFilter: {
      /** @default null */
      period?: components["schemas"]["RetentionPeriod"] | null;
      /** @default null */
      retentionReference?: components["schemas"]["RetentionReference"] | null;
      /** @default null */
      retentionType?: components["schemas"]["RetentionType"] | null;
      /** @default null */
      returningEntity?: components["schemas"]["RetentionEntity"] | null;
      /** @default null */
      targetEntity?: components["schemas"]["RetentionEntity"] | null;
      /**
       * Totalintervals
       * @default null
       */
      totalIntervals?: number | null;
    };
    /**
     * RetentionPeriod
     * @enum {string}
     */
    RetentionPeriod: "Hour" | "Day" | "Week" | "Month";
    /** RetentionQuery */
    RetentionQuery: {
      /**
       * Aggregation Group Type Index
       * @description Groups aggregation
       * @default null
       */
      aggregation_group_type_index?: number | null;
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @description Exclude internal and test users by applying the respective filters
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * Kind
       * @default RetentionQuery
       * @constant
       */
      kind?: "RetentionQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Properties
       * @description Property filters for all series
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | components["schemas"]["PropertyGroupFilter"]
        | null;
      /** @default null */
      response?: components["schemas"]["RetentionQueryResponse"] | null;
      /** @description Properties specific to the retention insight */
      retentionFilter: components["schemas"]["RetentionFilter"];
      /**
       * Samplingfactor
       * @description Sampling rate
       * @default null
       */
      samplingFactor?: number | null;
    };
    /** RetentionQueryResponse */
    RetentionQueryResponse: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: components["schemas"]["RetentionResult"][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /**
     * RetentionReference
     * @enum {string}
     */
    RetentionReference: "total" | "previous";
    /** RetentionResult */
    RetentionResult: {
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Label */
      label: string;
      /** Values */
      values: components["schemas"]["RetentionValue"][];
    };
    /**
     * RetentionType
     * @enum {string}
     */
    RetentionType: "retention_recurring" | "retention_first_time";
    /** RetentionValue */
    RetentionValue: {
      /** Count */
      count: number;
    };
    Role: {
      /** Format: uuid */
      id: string;
      name: string;
      feature_flags_access_level?: components["schemas"]["FeatureFlagsAccessLevelEnum"];
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      members: string;
      associated_flags: string;
    };
    RoleMembership: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      role_id: string;
      organization_member: components["schemas"]["OrganizationMember"];
      user: components["schemas"]["UserBasic"];
      /** Format: date-time */
      joined_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      user_uuid: string;
    };
    /** Sampling */
    Sampling: {
      /**
       * Enabled
       * @default null
       */
      enabled?: boolean | null;
      /** @default null */
      forceSamplingRate?: components["schemas"]["SamplingRate"] | null;
    };
    /** SamplingRate */
    SamplingRate: {
      /**
       * Denominator
       * @default null
       */
      denominator?: number | null;
      /** Numerator */
      numerator: number;
    };
    /** SavedInsightNode */
    SavedInsightNode: {
      /**
       * Allowsorting
       * @description Can the user click on column headers to sort the table? (default: true)
       * @default null
       */
      allowSorting?: boolean | null;
      /**
       * Embedded
       * @description Query is embedded inside another bordered component
       * @default null
       */
      embedded?: boolean | null;
      /**
       * Expandable
       * @description Can expand row to show raw event data (default: true)
       * @default null
       */
      expandable?: boolean | null;
      /**
       * Full
       * @description Show with most visual options enabled. Used in insight scene.
       * @default null
       */
      full?: boolean | null;
      /**
       * Hidepersonsmodal
       * @default null
       */
      hidePersonsModal?: boolean | null;
      /**
       * Kind
       * @default SavedInsightNode
       * @constant
       */
      kind?: "SavedInsightNode";
      /**
       * Propertiesviaurl
       * @description Link properties via the URL (default: false)
       * @default null
       */
      propertiesViaUrl?: boolean | null;
      /** Shortid */
      shortId: string;
      /**
       * Showactions
       * @description Show the kebab menu at the end of the row
       * @default null
       */
      showActions?: boolean | null;
      /**
       * Showcolumnconfigurator
       * @description Show a button to configure the table's columns if possible
       * @default null
       */
      showColumnConfigurator?: boolean | null;
      /**
       * Showcorrelationtable
       * @default null
       */
      showCorrelationTable?: boolean | null;
      /**
       * Showdaterange
       * @description Show date range selector
       * @default null
       */
      showDateRange?: boolean | null;
      /**
       * Showelapsedtime
       * @description Show the time it takes to run a query
       * @default null
       */
      showElapsedTime?: boolean | null;
      /**
       * Showeventfilter
       * @description Include an event filter above the table (EventsNode only)
       * @default null
       */
      showEventFilter?: boolean | null;
      /**
       * Showexport
       * @description Show the export button
       * @default null
       */
      showExport?: boolean | null;
      /**
       * Showfilters
       * @default null
       */
      showFilters?: boolean | null;
      /**
       * Showheader
       * @default null
       */
      showHeader?: boolean | null;
      /**
       * Showhogqleditor
       * @description Include a HogQL query editor above HogQL tables
       * @default null
       */
      showHogQLEditor?: boolean | null;
      /**
       * Showlastcomputation
       * @default null
       */
      showLastComputation?: boolean | null;
      /**
       * Showlastcomputationrefresh
       * @default null
       */
      showLastComputationRefresh?: boolean | null;
      /**
       * Showopeneditorbutton
       * @description Show a button to open the current query as a new insight. (default: true)
       * @default null
       */
      showOpenEditorButton?: boolean | null;
      /**
       * Showpersistentcolumnconfigurator
       * @description Show a button to configure and persist the table's default columns if possible
       * @default null
       */
      showPersistentColumnConfigurator?: boolean | null;
      /**
       * Showpropertyfilter
       * @description Include a property filter above the table
       * @default null
       */
      showPropertyFilter?: boolean | null;
      /**
       * Showreload
       * @description Show a reload button
       * @default null
       */
      showReload?: boolean | null;
      /**
       * Showresults
       * @default null
       */
      showResults?: boolean | null;
      /**
       * Showresultstable
       * @description Show a results table
       * @default null
       */
      showResultsTable?: boolean | null;
      /**
       * Showsavedqueries
       * @description Shows a list of saved queries
       * @default null
       */
      showSavedQueries?: boolean | null;
      /**
       * Showsearch
       * @description Include a free text search field (PersonsNode only)
       * @default null
       */
      showSearch?: boolean | null;
      /**
       * Showtable
       * @default null
       */
      showTable?: boolean | null;
      /**
       * Showtestaccountfilters
       * @description Show filter to exclude test accounts
       * @default null
       */
      showTestAccountFilters?: boolean | null;
      /**
       * Showtimings
       * @description Show a detailed query timing breakdown
       * @default null
       */
      showTimings?: boolean | null;
      /**
       * Suppresssessionanalysiswarning
       * @default null
       */
      suppressSessionAnalysisWarning?: boolean | null;
      /** @default null */
      vizSpecificOptions?: components["schemas"]["VizSpecificOptions"] | null;
    };
    ScenePersonalisationBasic: {
      scene: string;
      dashboard?: number | null;
    };
    /** Series */
    Series: {
      /** Label */
      label: string;
      /** Value */
      value: number;
    };
    /** SessionPropertyFilter */
    SessionPropertyFilter: {
      /** Key */
      key: string;
      /**
       * Label
       * @default null
       */
      label?: string | null;
      operator: components["schemas"]["PropertyOperator"];
      /**
       * Type
       * @default session
       * @constant
       */
      type?: "session";
      /**
       * Value
       * @default null
       */
      value?: string | number | (string | number)[] | null;
    };
    SessionRecording: {
      id: string;
      distinct_id: string | null;
      viewed: string;
      recording_duration: number;
      active_seconds: number | null;
      inactive_seconds: number | null;
      /** Format: date-time */
      start_time: string | null;
      /** Format: date-time */
      end_time: string | null;
      click_count: number | null;
      keypress_count: number | null;
      mouse_activity_count: number | null;
      console_log_count: number | null;
      console_warn_count: number | null;
      console_error_count: number | null;
      start_url: string | null;
      person?: components["schemas"]["MinimalPerson"];
      storage: string;
      snapshot_source: string | null;
    };
    SessionRecordingPlaylist: {
      id: number;
      short_id: string;
      name?: string | null;
      derived_name?: string | null;
      description?: string;
      pinned?: boolean;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      deleted?: boolean;
      filters?: unknown;
      /** Format: date-time */
      last_modified_at: string;
      last_modified_by: components["schemas"]["UserBasic"];
    };
    /** SessionsTimelineQuery */
    SessionsTimelineQuery: {
      /**
       * After
       * @description Only fetch sessions that started after this timestamp (default: '-24h')
       * @default null
       */
      after?: string | null;
      /**
       * Before
       * @description Only fetch sessions that started before this timestamp (default: '+5s')
       * @default null
       */
      before?: string | null;
      /**
       * Kind
       * @default SessionsTimelineQuery
       * @constant
       */
      kind?: "SessionsTimelineQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Personid
       * @description Fetch sessions only for a given person
       * @default null
       */
      personId?: string | null;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["SessionsTimelineQueryResponse"] | null;
    };
    /** SessionsTimelineQueryResponse */
    SessionsTimelineQueryResponse: {
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /** Results */
      results: components["schemas"]["TimelineEntry"][];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    SharingConfiguration: {
      /** Format: date-time */
      created_at: string;
      enabled?: boolean;
      access_token: string | null;
    };
    /**
     * @description * `SYSTEM` - SYSTEM
     * * `PLUGIN` - PLUGIN
     * * `CONSOLE` - CONSOLE
     * @enum {string}
     */
    SourceEnum: "SYSTEM" | "PLUGIN" | "CONSOLE";
    /**
     * @description * `draft` - draft
     * * `concept` - concept
     * * `alpha` - alpha
     * * `beta` - beta
     * * `general-availability` - general availability
     * * `archived` - archived
     * @enum {string}
     */
    StageEnum: "draft" | "concept" | "alpha" | "beta" | "general-availability" | "archived";
    /**
     * @description * `Cancelled` - Cancelled
     * * `Completed` - Completed
     * * `ContinuedAsNew` - Continued As New
     * * `Failed` - Failed
     * * `FailedRetryable` - Failed Retryable
     * * `Terminated` - Terminated
     * * `TimedOut` - Timedout
     * * `Running` - Running
     * * `Starting` - Starting
     * @enum {string}
     */
    StatusEnum:
      | "Cancelled"
      | "Completed"
      | "ContinuedAsNew"
      | "Failed"
      | "FailedRetryable"
      | "Terminated"
      | "TimedOut"
      | "Running"
      | "Starting";
    /** StatusItem */
    StatusItem: {
      /** Label */
      label: string;
      /** Value */
      value: string;
    };
    /**
     * StepOrderValue
     * @enum {string}
     */
    StepOrderValue: "strict" | "unordered" | "ordered";
    /** StickinessFilter */
    StickinessFilter: {
      /**
       * Compare
       * @default null
       */
      compare?: boolean | null;
      /** @default null */
      display?: components["schemas"]["ChartDisplayType"] | null;
      /**
       * Hidden Legend Indexes
       * @default null
       */
      hidden_legend_indexes?: number[] | null;
      /**
       * Showlegend
       * @default null
       */
      showLegend?: boolean | null;
      /**
       * Showvaluesonseries
       * @default null
       */
      showValuesOnSeries?: boolean | null;
    };
    /** StickinessQuery */
    StickinessQuery: {
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @description Exclude internal and test users by applying the respective filters
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * @description Granularity of the response. Can be one of `hour`, `day`, `week` or `month`
       * @default null
       */
      interval?: components["schemas"]["IntervalType"] | null;
      /**
       * Kind
       * @default StickinessQuery
       * @constant
       */
      kind?: "StickinessQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Properties
       * @description Property filters for all series
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | components["schemas"]["PropertyGroupFilter"]
        | null;
      /**
       * Samplingfactor
       * @description Sampling rate
       * @default null
       */
      samplingFactor?: number | null;
      /**
       * Series
       * @description Events and actions to include
       */
      series: (
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["DataWarehouseNode"]
      )[];
      /**
       * @description Properties specific to the stickiness insight
       * @default null
       */
      stickinessFilter?: components["schemas"]["StickinessFilter"] | null;
    };
    /** @description Standard Subscription serializer. */
    Subscription: {
      id: number;
      dashboard?: number | null;
      insight?: number | null;
      target_type: components["schemas"]["TargetTypeEnum"];
      target_value: string;
      frequency: components["schemas"]["FrequencyEnum"];
      interval?: number;
      byweekday?: components["schemas"]["ByweekdayEnum"][] | null;
      bysetpos?: number | null;
      count?: number | null;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      until_date?: string | null;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      deleted?: boolean;
      title?: string | null;
      summary: string;
      /** Format: date-time */
      next_delivery_date: string | null;
      invite_message?: string | null;
    };
    Survey: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      type: components["schemas"]["Type7baEnum"];
      linked_flag: components["schemas"]["MinimalFeatureFlag"];
      linked_flag_id?: number | null;
      targeting_flag: components["schemas"]["MinimalFeatureFlag"];
      questions?: unknown;
      conditions?: unknown;
      appearance?: unknown;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      archived?: boolean;
      responses_limit?: number | null;
    };
    SurveySerializerCreateUpdateOnly: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      type: components["schemas"]["Type7baEnum"];
      linked_flag: components["schemas"]["MinimalFeatureFlag"];
      linked_flag_id?: number | null;
      targeting_flag_id?: number;
      targeting_flag: components["schemas"]["MinimalFeatureFlag"];
      targeting_flag_filters?: unknown;
      remove_targeting_flag?: boolean | null;
      questions?: unknown;
      conditions?: unknown;
      appearance?: unknown;
      /** Format: date-time */
      created_at: string;
      created_by: components["schemas"]["UserBasic"];
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      archived?: boolean;
      responses_limit?: number | null;
    };
    /**
     * @description * `email` - Email
     * * `slack` - Slack
     * * `webhook` - Webhook
     * @enum {string}
     */
    TargetTypeEnum: "email" | "slack" | "webhook";
    Team: {
      id: number;
      /** Format: uuid */
      uuid: string;
      /** Format: uuid */
      organization: string;
      api_token: string;
      app_urls?: (string | null)[];
      name?: string;
      slack_incoming_webhook?: string | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      anonymize_ips?: boolean;
      completed_snippet_onboarding?: boolean;
      ingested_event: boolean;
      test_account_filters?: unknown;
      test_account_filters_default_checked?: boolean | null;
      path_cleaning_filters?: unknown;
      is_demo?: boolean;
      timezone?: components["schemas"]["TimezoneEnum"];
      data_attributes?: unknown;
      person_display_name_properties?: string[] | null;
      correlation_config?: unknown;
      autocapture_opt_out?: boolean | null;
      autocapture_exceptions_opt_in?: boolean | null;
      autocapture_exceptions_errors_to_ignore?: unknown;
      capture_console_log_opt_in?: boolean | null;
      capture_performance_opt_in?: boolean | null;
      session_recording_opt_in?: boolean;
      /** Format: decimal */
      session_recording_sample_rate?: string | null;
      session_recording_minimum_duration_milliseconds?: number | null;
      session_recording_linked_flag?: unknown;
      session_recording_network_payload_capture_config?: unknown;
      session_replay_config?: unknown;
      effective_membership_level: components["schemas"]["EffectiveMembershipLevelEnum"] | null;
      access_control?: boolean;
      week_start_day?:
        | components["schemas"]["WeekStartDayEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      has_group_types: boolean;
      primary_dashboard?: number | null;
      live_events_columns?: string[] | null;
      recording_domains?: (string | null)[] | null;
      person_on_events_querying_enabled: boolean;
      groups_on_events_querying_enabled: boolean;
      inject_web_apps?: boolean | null;
      extra_settings?: unknown;
      has_completed_onboarding_for?: unknown;
      surveys_opt_in?: boolean | null;
      heatmaps_opt_in?: boolean | null;
    };
    /**
     * @description Serializer for `Team` model with minimal attributes to speeed up loading and transfer times.
     * Also used for nested serializers.
     */
    TeamBasic: {
      id: number;
      /** Format: uuid */
      uuid: string;
      /** Format: uuid */
      organization: string;
      api_token: string;
      name: string;
      completed_snippet_onboarding: boolean;
      has_completed_onboarding_for: unknown;
      ingested_event: boolean;
      is_demo: boolean;
      timezone: components["schemas"]["TimezoneEnum"];
      access_control: boolean;
    };
    /**
     * @description * `light` - Light
     * * `dark` - Dark
     * * `system` - System
     * @enum {string}
     */
    ThemeModeEnum: "light" | "dark" | "system";
    /** TimeToSeeDataSessionsQuery */
    TimeToSeeDataSessionsQuery: {
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Kind
       * @default TimeToSeeDataSessionsQuery
       * @constant
       */
      kind?: "TimeToSeeDataSessionsQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * @description Cached query response
       * @default null
       */
      response?: components["schemas"]["TimeToSeeDataSessionsQueryResponse"] | null;
      /**
       * Teamid
       * @description Project to filter on. Defaults to current project
       * @default null
       */
      teamId?: number | null;
    };
    /** TimeToSeeDataSessionsQueryResponse */
    TimeToSeeDataSessionsQueryResponse: {
      /** Results */
      results: Record<string, never>[];
    };
    /** TimelineEntry */
    TimelineEntry: {
      /** Events */
      events: components["schemas"]["EventType"][];
      /**
       * Recording Duration S
       * @description Duration of the recording in seconds.
       * @default null
       */
      recording_duration_s?: number | null;
      /**
       * Sessionid
       * @description Session ID. None means out-of-session events
       * @default null
       */
      sessionId?: string | null;
    };
    /**
     * @description * `Africa/Abidjan` - Africa/Abidjan
     * * `Africa/Accra` - Africa/Accra
     * * `Africa/Addis_Ababa` - Africa/Addis_Ababa
     * * `Africa/Algiers` - Africa/Algiers
     * * `Africa/Asmara` - Africa/Asmara
     * * `Africa/Asmera` - Africa/Asmera
     * * `Africa/Bamako` - Africa/Bamako
     * * `Africa/Bangui` - Africa/Bangui
     * * `Africa/Banjul` - Africa/Banjul
     * * `Africa/Bissau` - Africa/Bissau
     * * `Africa/Blantyre` - Africa/Blantyre
     * * `Africa/Brazzaville` - Africa/Brazzaville
     * * `Africa/Bujumbura` - Africa/Bujumbura
     * * `Africa/Cairo` - Africa/Cairo
     * * `Africa/Casablanca` - Africa/Casablanca
     * * `Africa/Ceuta` - Africa/Ceuta
     * * `Africa/Conakry` - Africa/Conakry
     * * `Africa/Dakar` - Africa/Dakar
     * * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
     * * `Africa/Djibouti` - Africa/Djibouti
     * * `Africa/Douala` - Africa/Douala
     * * `Africa/El_Aaiun` - Africa/El_Aaiun
     * * `Africa/Freetown` - Africa/Freetown
     * * `Africa/Gaborone` - Africa/Gaborone
     * * `Africa/Harare` - Africa/Harare
     * * `Africa/Johannesburg` - Africa/Johannesburg
     * * `Africa/Juba` - Africa/Juba
     * * `Africa/Kampala` - Africa/Kampala
     * * `Africa/Khartoum` - Africa/Khartoum
     * * `Africa/Kigali` - Africa/Kigali
     * * `Africa/Kinshasa` - Africa/Kinshasa
     * * `Africa/Lagos` - Africa/Lagos
     * * `Africa/Libreville` - Africa/Libreville
     * * `Africa/Lome` - Africa/Lome
     * * `Africa/Luanda` - Africa/Luanda
     * * `Africa/Lubumbashi` - Africa/Lubumbashi
     * * `Africa/Lusaka` - Africa/Lusaka
     * * `Africa/Malabo` - Africa/Malabo
     * * `Africa/Maputo` - Africa/Maputo
     * * `Africa/Maseru` - Africa/Maseru
     * * `Africa/Mbabane` - Africa/Mbabane
     * * `Africa/Mogadishu` - Africa/Mogadishu
     * * `Africa/Monrovia` - Africa/Monrovia
     * * `Africa/Nairobi` - Africa/Nairobi
     * * `Africa/Ndjamena` - Africa/Ndjamena
     * * `Africa/Niamey` - Africa/Niamey
     * * `Africa/Nouakchott` - Africa/Nouakchott
     * * `Africa/Ouagadougou` - Africa/Ouagadougou
     * * `Africa/Porto-Novo` - Africa/Porto-Novo
     * * `Africa/Sao_Tome` - Africa/Sao_Tome
     * * `Africa/Timbuktu` - Africa/Timbuktu
     * * `Africa/Tripoli` - Africa/Tripoli
     * * `Africa/Tunis` - Africa/Tunis
     * * `Africa/Windhoek` - Africa/Windhoek
     * * `America/Adak` - America/Adak
     * * `America/Anchorage` - America/Anchorage
     * * `America/Anguilla` - America/Anguilla
     * * `America/Antigua` - America/Antigua
     * * `America/Araguaina` - America/Araguaina
     * * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
     * * `America/Argentina/Catamarca` - America/Argentina/Catamarca
     * * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
     * * `America/Argentina/Cordoba` - America/Argentina/Cordoba
     * * `America/Argentina/Jujuy` - America/Argentina/Jujuy
     * * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
     * * `America/Argentina/Mendoza` - America/Argentina/Mendoza
     * * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
     * * `America/Argentina/Salta` - America/Argentina/Salta
     * * `America/Argentina/San_Juan` - America/Argentina/San_Juan
     * * `America/Argentina/San_Luis` - America/Argentina/San_Luis
     * * `America/Argentina/Tucuman` - America/Argentina/Tucuman
     * * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
     * * `America/Aruba` - America/Aruba
     * * `America/Asuncion` - America/Asuncion
     * * `America/Atikokan` - America/Atikokan
     * * `America/Atka` - America/Atka
     * * `America/Bahia` - America/Bahia
     * * `America/Bahia_Banderas` - America/Bahia_Banderas
     * * `America/Barbados` - America/Barbados
     * * `America/Belem` - America/Belem
     * * `America/Belize` - America/Belize
     * * `America/Blanc-Sablon` - America/Blanc-Sablon
     * * `America/Boa_Vista` - America/Boa_Vista
     * * `America/Bogota` - America/Bogota
     * * `America/Boise` - America/Boise
     * * `America/Buenos_Aires` - America/Buenos_Aires
     * * `America/Cambridge_Bay` - America/Cambridge_Bay
     * * `America/Campo_Grande` - America/Campo_Grande
     * * `America/Cancun` - America/Cancun
     * * `America/Caracas` - America/Caracas
     * * `America/Catamarca` - America/Catamarca
     * * `America/Cayenne` - America/Cayenne
     * * `America/Cayman` - America/Cayman
     * * `America/Chicago` - America/Chicago
     * * `America/Chihuahua` - America/Chihuahua
     * * `America/Ciudad_Juarez` - America/Ciudad_Juarez
     * * `America/Coral_Harbour` - America/Coral_Harbour
     * * `America/Cordoba` - America/Cordoba
     * * `America/Costa_Rica` - America/Costa_Rica
     * * `America/Creston` - America/Creston
     * * `America/Cuiaba` - America/Cuiaba
     * * `America/Curacao` - America/Curacao
     * * `America/Danmarkshavn` - America/Danmarkshavn
     * * `America/Dawson` - America/Dawson
     * * `America/Dawson_Creek` - America/Dawson_Creek
     * * `America/Denver` - America/Denver
     * * `America/Detroit` - America/Detroit
     * * `America/Dominica` - America/Dominica
     * * `America/Edmonton` - America/Edmonton
     * * `America/Eirunepe` - America/Eirunepe
     * * `America/El_Salvador` - America/El_Salvador
     * * `America/Ensenada` - America/Ensenada
     * * `America/Fort_Nelson` - America/Fort_Nelson
     * * `America/Fort_Wayne` - America/Fort_Wayne
     * * `America/Fortaleza` - America/Fortaleza
     * * `America/Glace_Bay` - America/Glace_Bay
     * * `America/Godthab` - America/Godthab
     * * `America/Goose_Bay` - America/Goose_Bay
     * * `America/Grand_Turk` - America/Grand_Turk
     * * `America/Grenada` - America/Grenada
     * * `America/Guadeloupe` - America/Guadeloupe
     * * `America/Guatemala` - America/Guatemala
     * * `America/Guayaquil` - America/Guayaquil
     * * `America/Guyana` - America/Guyana
     * * `America/Halifax` - America/Halifax
     * * `America/Havana` - America/Havana
     * * `America/Hermosillo` - America/Hermosillo
     * * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
     * * `America/Indiana/Knox` - America/Indiana/Knox
     * * `America/Indiana/Marengo` - America/Indiana/Marengo
     * * `America/Indiana/Petersburg` - America/Indiana/Petersburg
     * * `America/Indiana/Tell_City` - America/Indiana/Tell_City
     * * `America/Indiana/Vevay` - America/Indiana/Vevay
     * * `America/Indiana/Vincennes` - America/Indiana/Vincennes
     * * `America/Indiana/Winamac` - America/Indiana/Winamac
     * * `America/Indianapolis` - America/Indianapolis
     * * `America/Inuvik` - America/Inuvik
     * * `America/Iqaluit` - America/Iqaluit
     * * `America/Jamaica` - America/Jamaica
     * * `America/Jujuy` - America/Jujuy
     * * `America/Juneau` - America/Juneau
     * * `America/Kentucky/Louisville` - America/Kentucky/Louisville
     * * `America/Kentucky/Monticello` - America/Kentucky/Monticello
     * * `America/Knox_IN` - America/Knox_IN
     * * `America/Kralendijk` - America/Kralendijk
     * * `America/La_Paz` - America/La_Paz
     * * `America/Lima` - America/Lima
     * * `America/Los_Angeles` - America/Los_Angeles
     * * `America/Louisville` - America/Louisville
     * * `America/Lower_Princes` - America/Lower_Princes
     * * `America/Maceio` - America/Maceio
     * * `America/Managua` - America/Managua
     * * `America/Manaus` - America/Manaus
     * * `America/Marigot` - America/Marigot
     * * `America/Martinique` - America/Martinique
     * * `America/Matamoros` - America/Matamoros
     * * `America/Mazatlan` - America/Mazatlan
     * * `America/Mendoza` - America/Mendoza
     * * `America/Menominee` - America/Menominee
     * * `America/Merida` - America/Merida
     * * `America/Metlakatla` - America/Metlakatla
     * * `America/Mexico_City` - America/Mexico_City
     * * `America/Miquelon` - America/Miquelon
     * * `America/Moncton` - America/Moncton
     * * `America/Monterrey` - America/Monterrey
     * * `America/Montevideo` - America/Montevideo
     * * `America/Montreal` - America/Montreal
     * * `America/Montserrat` - America/Montserrat
     * * `America/Nassau` - America/Nassau
     * * `America/New_York` - America/New_York
     * * `America/Nipigon` - America/Nipigon
     * * `America/Nome` - America/Nome
     * * `America/Noronha` - America/Noronha
     * * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
     * * `America/North_Dakota/Center` - America/North_Dakota/Center
     * * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
     * * `America/Nuuk` - America/Nuuk
     * * `America/Ojinaga` - America/Ojinaga
     * * `America/Panama` - America/Panama
     * * `America/Pangnirtung` - America/Pangnirtung
     * * `America/Paramaribo` - America/Paramaribo
     * * `America/Phoenix` - America/Phoenix
     * * `America/Port-au-Prince` - America/Port-au-Prince
     * * `America/Port_of_Spain` - America/Port_of_Spain
     * * `America/Porto_Acre` - America/Porto_Acre
     * * `America/Porto_Velho` - America/Porto_Velho
     * * `America/Puerto_Rico` - America/Puerto_Rico
     * * `America/Punta_Arenas` - America/Punta_Arenas
     * * `America/Rainy_River` - America/Rainy_River
     * * `America/Rankin_Inlet` - America/Rankin_Inlet
     * * `America/Recife` - America/Recife
     * * `America/Regina` - America/Regina
     * * `America/Resolute` - America/Resolute
     * * `America/Rio_Branco` - America/Rio_Branco
     * * `America/Rosario` - America/Rosario
     * * `America/Santa_Isabel` - America/Santa_Isabel
     * * `America/Santarem` - America/Santarem
     * * `America/Santiago` - America/Santiago
     * * `America/Santo_Domingo` - America/Santo_Domingo
     * * `America/Sao_Paulo` - America/Sao_Paulo
     * * `America/Scoresbysund` - America/Scoresbysund
     * * `America/Shiprock` - America/Shiprock
     * * `America/Sitka` - America/Sitka
     * * `America/St_Barthelemy` - America/St_Barthelemy
     * * `America/St_Johns` - America/St_Johns
     * * `America/St_Kitts` - America/St_Kitts
     * * `America/St_Lucia` - America/St_Lucia
     * * `America/St_Thomas` - America/St_Thomas
     * * `America/St_Vincent` - America/St_Vincent
     * * `America/Swift_Current` - America/Swift_Current
     * * `America/Tegucigalpa` - America/Tegucigalpa
     * * `America/Thule` - America/Thule
     * * `America/Thunder_Bay` - America/Thunder_Bay
     * * `America/Tijuana` - America/Tijuana
     * * `America/Toronto` - America/Toronto
     * * `America/Tortola` - America/Tortola
     * * `America/Vancouver` - America/Vancouver
     * * `America/Virgin` - America/Virgin
     * * `America/Whitehorse` - America/Whitehorse
     * * `America/Winnipeg` - America/Winnipeg
     * * `America/Yakutat` - America/Yakutat
     * * `America/Yellowknife` - America/Yellowknife
     * * `Antarctica/Casey` - Antarctica/Casey
     * * `Antarctica/Davis` - Antarctica/Davis
     * * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
     * * `Antarctica/Macquarie` - Antarctica/Macquarie
     * * `Antarctica/Mawson` - Antarctica/Mawson
     * * `Antarctica/McMurdo` - Antarctica/McMurdo
     * * `Antarctica/Palmer` - Antarctica/Palmer
     * * `Antarctica/Rothera` - Antarctica/Rothera
     * * `Antarctica/South_Pole` - Antarctica/South_Pole
     * * `Antarctica/Syowa` - Antarctica/Syowa
     * * `Antarctica/Troll` - Antarctica/Troll
     * * `Antarctica/Vostok` - Antarctica/Vostok
     * * `Arctic/Longyearbyen` - Arctic/Longyearbyen
     * * `Asia/Aden` - Asia/Aden
     * * `Asia/Almaty` - Asia/Almaty
     * * `Asia/Amman` - Asia/Amman
     * * `Asia/Anadyr` - Asia/Anadyr
     * * `Asia/Aqtau` - Asia/Aqtau
     * * `Asia/Aqtobe` - Asia/Aqtobe
     * * `Asia/Ashgabat` - Asia/Ashgabat
     * * `Asia/Ashkhabad` - Asia/Ashkhabad
     * * `Asia/Atyrau` - Asia/Atyrau
     * * `Asia/Baghdad` - Asia/Baghdad
     * * `Asia/Bahrain` - Asia/Bahrain
     * * `Asia/Baku` - Asia/Baku
     * * `Asia/Bangkok` - Asia/Bangkok
     * * `Asia/Barnaul` - Asia/Barnaul
     * * `Asia/Beirut` - Asia/Beirut
     * * `Asia/Bishkek` - Asia/Bishkek
     * * `Asia/Brunei` - Asia/Brunei
     * * `Asia/Calcutta` - Asia/Calcutta
     * * `Asia/Chita` - Asia/Chita
     * * `Asia/Choibalsan` - Asia/Choibalsan
     * * `Asia/Chongqing` - Asia/Chongqing
     * * `Asia/Chungking` - Asia/Chungking
     * * `Asia/Colombo` - Asia/Colombo
     * * `Asia/Dacca` - Asia/Dacca
     * * `Asia/Damascus` - Asia/Damascus
     * * `Asia/Dhaka` - Asia/Dhaka
     * * `Asia/Dili` - Asia/Dili
     * * `Asia/Dubai` - Asia/Dubai
     * * `Asia/Dushanbe` - Asia/Dushanbe
     * * `Asia/Famagusta` - Asia/Famagusta
     * * `Asia/Gaza` - Asia/Gaza
     * * `Asia/Harbin` - Asia/Harbin
     * * `Asia/Hebron` - Asia/Hebron
     * * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
     * * `Asia/Hong_Kong` - Asia/Hong_Kong
     * * `Asia/Hovd` - Asia/Hovd
     * * `Asia/Irkutsk` - Asia/Irkutsk
     * * `Asia/Istanbul` - Asia/Istanbul
     * * `Asia/Jakarta` - Asia/Jakarta
     * * `Asia/Jayapura` - Asia/Jayapura
     * * `Asia/Jerusalem` - Asia/Jerusalem
     * * `Asia/Kabul` - Asia/Kabul
     * * `Asia/Kamchatka` - Asia/Kamchatka
     * * `Asia/Karachi` - Asia/Karachi
     * * `Asia/Kashgar` - Asia/Kashgar
     * * `Asia/Kathmandu` - Asia/Kathmandu
     * * `Asia/Katmandu` - Asia/Katmandu
     * * `Asia/Khandyga` - Asia/Khandyga
     * * `Asia/Kolkata` - Asia/Kolkata
     * * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
     * * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
     * * `Asia/Kuching` - Asia/Kuching
     * * `Asia/Kuwait` - Asia/Kuwait
     * * `Asia/Macao` - Asia/Macao
     * * `Asia/Macau` - Asia/Macau
     * * `Asia/Magadan` - Asia/Magadan
     * * `Asia/Makassar` - Asia/Makassar
     * * `Asia/Manila` - Asia/Manila
     * * `Asia/Muscat` - Asia/Muscat
     * * `Asia/Nicosia` - Asia/Nicosia
     * * `Asia/Novokuznetsk` - Asia/Novokuznetsk
     * * `Asia/Novosibirsk` - Asia/Novosibirsk
     * * `Asia/Omsk` - Asia/Omsk
     * * `Asia/Oral` - Asia/Oral
     * * `Asia/Phnom_Penh` - Asia/Phnom_Penh
     * * `Asia/Pontianak` - Asia/Pontianak
     * * `Asia/Pyongyang` - Asia/Pyongyang
     * * `Asia/Qatar` - Asia/Qatar
     * * `Asia/Qostanay` - Asia/Qostanay
     * * `Asia/Qyzylorda` - Asia/Qyzylorda
     * * `Asia/Rangoon` - Asia/Rangoon
     * * `Asia/Riyadh` - Asia/Riyadh
     * * `Asia/Saigon` - Asia/Saigon
     * * `Asia/Sakhalin` - Asia/Sakhalin
     * * `Asia/Samarkand` - Asia/Samarkand
     * * `Asia/Seoul` - Asia/Seoul
     * * `Asia/Shanghai` - Asia/Shanghai
     * * `Asia/Singapore` - Asia/Singapore
     * * `Asia/Srednekolymsk` - Asia/Srednekolymsk
     * * `Asia/Taipei` - Asia/Taipei
     * * `Asia/Tashkent` - Asia/Tashkent
     * * `Asia/Tbilisi` - Asia/Tbilisi
     * * `Asia/Tehran` - Asia/Tehran
     * * `Asia/Tel_Aviv` - Asia/Tel_Aviv
     * * `Asia/Thimbu` - Asia/Thimbu
     * * `Asia/Thimphu` - Asia/Thimphu
     * * `Asia/Tokyo` - Asia/Tokyo
     * * `Asia/Tomsk` - Asia/Tomsk
     * * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
     * * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
     * * `Asia/Ulan_Bator` - Asia/Ulan_Bator
     * * `Asia/Urumqi` - Asia/Urumqi
     * * `Asia/Ust-Nera` - Asia/Ust-Nera
     * * `Asia/Vientiane` - Asia/Vientiane
     * * `Asia/Vladivostok` - Asia/Vladivostok
     * * `Asia/Yakutsk` - Asia/Yakutsk
     * * `Asia/Yangon` - Asia/Yangon
     * * `Asia/Yekaterinburg` - Asia/Yekaterinburg
     * * `Asia/Yerevan` - Asia/Yerevan
     * * `Atlantic/Azores` - Atlantic/Azores
     * * `Atlantic/Bermuda` - Atlantic/Bermuda
     * * `Atlantic/Canary` - Atlantic/Canary
     * * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
     * * `Atlantic/Faeroe` - Atlantic/Faeroe
     * * `Atlantic/Faroe` - Atlantic/Faroe
     * * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
     * * `Atlantic/Madeira` - Atlantic/Madeira
     * * `Atlantic/Reykjavik` - Atlantic/Reykjavik
     * * `Atlantic/South_Georgia` - Atlantic/South_Georgia
     * * `Atlantic/St_Helena` - Atlantic/St_Helena
     * * `Atlantic/Stanley` - Atlantic/Stanley
     * * `Australia/ACT` - Australia/ACT
     * * `Australia/Adelaide` - Australia/Adelaide
     * * `Australia/Brisbane` - Australia/Brisbane
     * * `Australia/Broken_Hill` - Australia/Broken_Hill
     * * `Australia/Canberra` - Australia/Canberra
     * * `Australia/Currie` - Australia/Currie
     * * `Australia/Darwin` - Australia/Darwin
     * * `Australia/Eucla` - Australia/Eucla
     * * `Australia/Hobart` - Australia/Hobart
     * * `Australia/LHI` - Australia/LHI
     * * `Australia/Lindeman` - Australia/Lindeman
     * * `Australia/Lord_Howe` - Australia/Lord_Howe
     * * `Australia/Melbourne` - Australia/Melbourne
     * * `Australia/NSW` - Australia/NSW
     * * `Australia/North` - Australia/North
     * * `Australia/Perth` - Australia/Perth
     * * `Australia/Queensland` - Australia/Queensland
     * * `Australia/South` - Australia/South
     * * `Australia/Sydney` - Australia/Sydney
     * * `Australia/Tasmania` - Australia/Tasmania
     * * `Australia/Victoria` - Australia/Victoria
     * * `Australia/West` - Australia/West
     * * `Australia/Yancowinna` - Australia/Yancowinna
     * * `Brazil/Acre` - Brazil/Acre
     * * `Brazil/DeNoronha` - Brazil/DeNoronha
     * * `Brazil/East` - Brazil/East
     * * `Brazil/West` - Brazil/West
     * * `CET` - CET
     * * `CST6CDT` - CST6CDT
     * * `Canada/Atlantic` - Canada/Atlantic
     * * `Canada/Central` - Canada/Central
     * * `Canada/Eastern` - Canada/Eastern
     * * `Canada/Mountain` - Canada/Mountain
     * * `Canada/Newfoundland` - Canada/Newfoundland
     * * `Canada/Pacific` - Canada/Pacific
     * * `Canada/Saskatchewan` - Canada/Saskatchewan
     * * `Canada/Yukon` - Canada/Yukon
     * * `Chile/Continental` - Chile/Continental
     * * `Chile/EasterIsland` - Chile/EasterIsland
     * * `Cuba` - Cuba
     * * `EET` - EET
     * * `EST` - EST
     * * `EST5EDT` - EST5EDT
     * * `Egypt` - Egypt
     * * `Eire` - Eire
     * * `Etc/GMT` - Etc/GMT
     * * `Etc/GMT+0` - Etc/GMT+0
     * * `Etc/GMT+1` - Etc/GMT+1
     * * `Etc/GMT+10` - Etc/GMT+10
     * * `Etc/GMT+11` - Etc/GMT+11
     * * `Etc/GMT+12` - Etc/GMT+12
     * * `Etc/GMT+2` - Etc/GMT+2
     * * `Etc/GMT+3` - Etc/GMT+3
     * * `Etc/GMT+4` - Etc/GMT+4
     * * `Etc/GMT+5` - Etc/GMT+5
     * * `Etc/GMT+6` - Etc/GMT+6
     * * `Etc/GMT+7` - Etc/GMT+7
     * * `Etc/GMT+8` - Etc/GMT+8
     * * `Etc/GMT+9` - Etc/GMT+9
     * * `Etc/GMT-0` - Etc/GMT-0
     * * `Etc/GMT-1` - Etc/GMT-1
     * * `Etc/GMT-10` - Etc/GMT-10
     * * `Etc/GMT-11` - Etc/GMT-11
     * * `Etc/GMT-12` - Etc/GMT-12
     * * `Etc/GMT-13` - Etc/GMT-13
     * * `Etc/GMT-14` - Etc/GMT-14
     * * `Etc/GMT-2` - Etc/GMT-2
     * * `Etc/GMT-3` - Etc/GMT-3
     * * `Etc/GMT-4` - Etc/GMT-4
     * * `Etc/GMT-5` - Etc/GMT-5
     * * `Etc/GMT-6` - Etc/GMT-6
     * * `Etc/GMT-7` - Etc/GMT-7
     * * `Etc/GMT-8` - Etc/GMT-8
     * * `Etc/GMT-9` - Etc/GMT-9
     * * `Etc/GMT0` - Etc/GMT0
     * * `Etc/Greenwich` - Etc/Greenwich
     * * `Etc/UCT` - Etc/UCT
     * * `Etc/UTC` - Etc/UTC
     * * `Etc/Universal` - Etc/Universal
     * * `Etc/Zulu` - Etc/Zulu
     * * `Europe/Amsterdam` - Europe/Amsterdam
     * * `Europe/Andorra` - Europe/Andorra
     * * `Europe/Astrakhan` - Europe/Astrakhan
     * * `Europe/Athens` - Europe/Athens
     * * `Europe/Belfast` - Europe/Belfast
     * * `Europe/Belgrade` - Europe/Belgrade
     * * `Europe/Berlin` - Europe/Berlin
     * * `Europe/Bratislava` - Europe/Bratislava
     * * `Europe/Brussels` - Europe/Brussels
     * * `Europe/Bucharest` - Europe/Bucharest
     * * `Europe/Budapest` - Europe/Budapest
     * * `Europe/Busingen` - Europe/Busingen
     * * `Europe/Chisinau` - Europe/Chisinau
     * * `Europe/Copenhagen` - Europe/Copenhagen
     * * `Europe/Dublin` - Europe/Dublin
     * * `Europe/Gibraltar` - Europe/Gibraltar
     * * `Europe/Guernsey` - Europe/Guernsey
     * * `Europe/Helsinki` - Europe/Helsinki
     * * `Europe/Isle_of_Man` - Europe/Isle_of_Man
     * * `Europe/Istanbul` - Europe/Istanbul
     * * `Europe/Jersey` - Europe/Jersey
     * * `Europe/Kaliningrad` - Europe/Kaliningrad
     * * `Europe/Kiev` - Europe/Kiev
     * * `Europe/Kirov` - Europe/Kirov
     * * `Europe/Kyiv` - Europe/Kyiv
     * * `Europe/Lisbon` - Europe/Lisbon
     * * `Europe/Ljubljana` - Europe/Ljubljana
     * * `Europe/London` - Europe/London
     * * `Europe/Luxembourg` - Europe/Luxembourg
     * * `Europe/Madrid` - Europe/Madrid
     * * `Europe/Malta` - Europe/Malta
     * * `Europe/Mariehamn` - Europe/Mariehamn
     * * `Europe/Minsk` - Europe/Minsk
     * * `Europe/Monaco` - Europe/Monaco
     * * `Europe/Moscow` - Europe/Moscow
     * * `Europe/Nicosia` - Europe/Nicosia
     * * `Europe/Oslo` - Europe/Oslo
     * * `Europe/Paris` - Europe/Paris
     * * `Europe/Podgorica` - Europe/Podgorica
     * * `Europe/Prague` - Europe/Prague
     * * `Europe/Riga` - Europe/Riga
     * * `Europe/Rome` - Europe/Rome
     * * `Europe/Samara` - Europe/Samara
     * * `Europe/San_Marino` - Europe/San_Marino
     * * `Europe/Sarajevo` - Europe/Sarajevo
     * * `Europe/Saratov` - Europe/Saratov
     * * `Europe/Simferopol` - Europe/Simferopol
     * * `Europe/Skopje` - Europe/Skopje
     * * `Europe/Sofia` - Europe/Sofia
     * * `Europe/Stockholm` - Europe/Stockholm
     * * `Europe/Tallinn` - Europe/Tallinn
     * * `Europe/Tirane` - Europe/Tirane
     * * `Europe/Tiraspol` - Europe/Tiraspol
     * * `Europe/Ulyanovsk` - Europe/Ulyanovsk
     * * `Europe/Uzhgorod` - Europe/Uzhgorod
     * * `Europe/Vaduz` - Europe/Vaduz
     * * `Europe/Vatican` - Europe/Vatican
     * * `Europe/Vienna` - Europe/Vienna
     * * `Europe/Vilnius` - Europe/Vilnius
     * * `Europe/Volgograd` - Europe/Volgograd
     * * `Europe/Warsaw` - Europe/Warsaw
     * * `Europe/Zagreb` - Europe/Zagreb
     * * `Europe/Zaporozhye` - Europe/Zaporozhye
     * * `Europe/Zurich` - Europe/Zurich
     * * `GB` - GB
     * * `GB-Eire` - GB-Eire
     * * `GMT` - GMT
     * * `GMT+0` - GMT+0
     * * `GMT-0` - GMT-0
     * * `GMT0` - GMT0
     * * `Greenwich` - Greenwich
     * * `HST` - HST
     * * `Hongkong` - Hongkong
     * * `Iceland` - Iceland
     * * `Indian/Antananarivo` - Indian/Antananarivo
     * * `Indian/Chagos` - Indian/Chagos
     * * `Indian/Christmas` - Indian/Christmas
     * * `Indian/Cocos` - Indian/Cocos
     * * `Indian/Comoro` - Indian/Comoro
     * * `Indian/Kerguelen` - Indian/Kerguelen
     * * `Indian/Mahe` - Indian/Mahe
     * * `Indian/Maldives` - Indian/Maldives
     * * `Indian/Mauritius` - Indian/Mauritius
     * * `Indian/Mayotte` - Indian/Mayotte
     * * `Indian/Reunion` - Indian/Reunion
     * * `Iran` - Iran
     * * `Israel` - Israel
     * * `Jamaica` - Jamaica
     * * `Japan` - Japan
     * * `Kwajalein` - Kwajalein
     * * `Libya` - Libya
     * * `MET` - MET
     * * `MST` - MST
     * * `MST7MDT` - MST7MDT
     * * `Mexico/BajaNorte` - Mexico/BajaNorte
     * * `Mexico/BajaSur` - Mexico/BajaSur
     * * `Mexico/General` - Mexico/General
     * * `NZ` - NZ
     * * `NZ-CHAT` - NZ-CHAT
     * * `Navajo` - Navajo
     * * `PRC` - PRC
     * * `PST8PDT` - PST8PDT
     * * `Pacific/Apia` - Pacific/Apia
     * * `Pacific/Auckland` - Pacific/Auckland
     * * `Pacific/Bougainville` - Pacific/Bougainville
     * * `Pacific/Chatham` - Pacific/Chatham
     * * `Pacific/Chuuk` - Pacific/Chuuk
     * * `Pacific/Easter` - Pacific/Easter
     * * `Pacific/Efate` - Pacific/Efate
     * * `Pacific/Enderbury` - Pacific/Enderbury
     * * `Pacific/Fakaofo` - Pacific/Fakaofo
     * * `Pacific/Fiji` - Pacific/Fiji
     * * `Pacific/Funafuti` - Pacific/Funafuti
     * * `Pacific/Galapagos` - Pacific/Galapagos
     * * `Pacific/Gambier` - Pacific/Gambier
     * * `Pacific/Guadalcanal` - Pacific/Guadalcanal
     * * `Pacific/Guam` - Pacific/Guam
     * * `Pacific/Honolulu` - Pacific/Honolulu
     * * `Pacific/Johnston` - Pacific/Johnston
     * * `Pacific/Kanton` - Pacific/Kanton
     * * `Pacific/Kiritimati` - Pacific/Kiritimati
     * * `Pacific/Kosrae` - Pacific/Kosrae
     * * `Pacific/Kwajalein` - Pacific/Kwajalein
     * * `Pacific/Majuro` - Pacific/Majuro
     * * `Pacific/Marquesas` - Pacific/Marquesas
     * * `Pacific/Midway` - Pacific/Midway
     * * `Pacific/Nauru` - Pacific/Nauru
     * * `Pacific/Niue` - Pacific/Niue
     * * `Pacific/Norfolk` - Pacific/Norfolk
     * * `Pacific/Noumea` - Pacific/Noumea
     * * `Pacific/Pago_Pago` - Pacific/Pago_Pago
     * * `Pacific/Palau` - Pacific/Palau
     * * `Pacific/Pitcairn` - Pacific/Pitcairn
     * * `Pacific/Pohnpei` - Pacific/Pohnpei
     * * `Pacific/Ponape` - Pacific/Ponape
     * * `Pacific/Port_Moresby` - Pacific/Port_Moresby
     * * `Pacific/Rarotonga` - Pacific/Rarotonga
     * * `Pacific/Saipan` - Pacific/Saipan
     * * `Pacific/Samoa` - Pacific/Samoa
     * * `Pacific/Tahiti` - Pacific/Tahiti
     * * `Pacific/Tarawa` - Pacific/Tarawa
     * * `Pacific/Tongatapu` - Pacific/Tongatapu
     * * `Pacific/Truk` - Pacific/Truk
     * * `Pacific/Wake` - Pacific/Wake
     * * `Pacific/Wallis` - Pacific/Wallis
     * * `Pacific/Yap` - Pacific/Yap
     * * `Poland` - Poland
     * * `Portugal` - Portugal
     * * `ROC` - ROC
     * * `ROK` - ROK
     * * `Singapore` - Singapore
     * * `Turkey` - Turkey
     * * `UCT` - UCT
     * * `US/Alaska` - US/Alaska
     * * `US/Aleutian` - US/Aleutian
     * * `US/Arizona` - US/Arizona
     * * `US/Central` - US/Central
     * * `US/East-Indiana` - US/East-Indiana
     * * `US/Eastern` - US/Eastern
     * * `US/Hawaii` - US/Hawaii
     * * `US/Indiana-Starke` - US/Indiana-Starke
     * * `US/Michigan` - US/Michigan
     * * `US/Mountain` - US/Mountain
     * * `US/Pacific` - US/Pacific
     * * `US/Samoa` - US/Samoa
     * * `UTC` - UTC
     * * `Universal` - Universal
     * * `W-SU` - W-SU
     * * `WET` - WET
     * * `Zulu` - Zulu
     * @enum {string}
     */
    TimezoneEnum:
      | "Africa/Abidjan"
      | "Africa/Accra"
      | "Africa/Addis_Ababa"
      | "Africa/Algiers"
      | "Africa/Asmara"
      | "Africa/Asmera"
      | "Africa/Bamako"
      | "Africa/Bangui"
      | "Africa/Banjul"
      | "Africa/Bissau"
      | "Africa/Blantyre"
      | "Africa/Brazzaville"
      | "Africa/Bujumbura"
      | "Africa/Cairo"
      | "Africa/Casablanca"
      | "Africa/Ceuta"
      | "Africa/Conakry"
      | "Africa/Dakar"
      | "Africa/Dar_es_Salaam"
      | "Africa/Djibouti"
      | "Africa/Douala"
      | "Africa/El_Aaiun"
      | "Africa/Freetown"
      | "Africa/Gaborone"
      | "Africa/Harare"
      | "Africa/Johannesburg"
      | "Africa/Juba"
      | "Africa/Kampala"
      | "Africa/Khartoum"
      | "Africa/Kigali"
      | "Africa/Kinshasa"
      | "Africa/Lagos"
      | "Africa/Libreville"
      | "Africa/Lome"
      | "Africa/Luanda"
      | "Africa/Lubumbashi"
      | "Africa/Lusaka"
      | "Africa/Malabo"
      | "Africa/Maputo"
      | "Africa/Maseru"
      | "Africa/Mbabane"
      | "Africa/Mogadishu"
      | "Africa/Monrovia"
      | "Africa/Nairobi"
      | "Africa/Ndjamena"
      | "Africa/Niamey"
      | "Africa/Nouakchott"
      | "Africa/Ouagadougou"
      | "Africa/Porto-Novo"
      | "Africa/Sao_Tome"
      | "Africa/Timbuktu"
      | "Africa/Tripoli"
      | "Africa/Tunis"
      | "Africa/Windhoek"
      | "America/Adak"
      | "America/Anchorage"
      | "America/Anguilla"
      | "America/Antigua"
      | "America/Araguaina"
      | "America/Argentina/Buenos_Aires"
      | "America/Argentina/Catamarca"
      | "America/Argentina/ComodRivadavia"
      | "America/Argentina/Cordoba"
      | "America/Argentina/Jujuy"
      | "America/Argentina/La_Rioja"
      | "America/Argentina/Mendoza"
      | "America/Argentina/Rio_Gallegos"
      | "America/Argentina/Salta"
      | "America/Argentina/San_Juan"
      | "America/Argentina/San_Luis"
      | "America/Argentina/Tucuman"
      | "America/Argentina/Ushuaia"
      | "America/Aruba"
      | "America/Asuncion"
      | "America/Atikokan"
      | "America/Atka"
      | "America/Bahia"
      | "America/Bahia_Banderas"
      | "America/Barbados"
      | "America/Belem"
      | "America/Belize"
      | "America/Blanc-Sablon"
      | "America/Boa_Vista"
      | "America/Bogota"
      | "America/Boise"
      | "America/Buenos_Aires"
      | "America/Cambridge_Bay"
      | "America/Campo_Grande"
      | "America/Cancun"
      | "America/Caracas"
      | "America/Catamarca"
      | "America/Cayenne"
      | "America/Cayman"
      | "America/Chicago"
      | "America/Chihuahua"
      | "America/Ciudad_Juarez"
      | "America/Coral_Harbour"
      | "America/Cordoba"
      | "America/Costa_Rica"
      | "America/Creston"
      | "America/Cuiaba"
      | "America/Curacao"
      | "America/Danmarkshavn"
      | "America/Dawson"
      | "America/Dawson_Creek"
      | "America/Denver"
      | "America/Detroit"
      | "America/Dominica"
      | "America/Edmonton"
      | "America/Eirunepe"
      | "America/El_Salvador"
      | "America/Ensenada"
      | "America/Fort_Nelson"
      | "America/Fort_Wayne"
      | "America/Fortaleza"
      | "America/Glace_Bay"
      | "America/Godthab"
      | "America/Goose_Bay"
      | "America/Grand_Turk"
      | "America/Grenada"
      | "America/Guadeloupe"
      | "America/Guatemala"
      | "America/Guayaquil"
      | "America/Guyana"
      | "America/Halifax"
      | "America/Havana"
      | "America/Hermosillo"
      | "America/Indiana/Indianapolis"
      | "America/Indiana/Knox"
      | "America/Indiana/Marengo"
      | "America/Indiana/Petersburg"
      | "America/Indiana/Tell_City"
      | "America/Indiana/Vevay"
      | "America/Indiana/Vincennes"
      | "America/Indiana/Winamac"
      | "America/Indianapolis"
      | "America/Inuvik"
      | "America/Iqaluit"
      | "America/Jamaica"
      | "America/Jujuy"
      | "America/Juneau"
      | "America/Kentucky/Louisville"
      | "America/Kentucky/Monticello"
      | "America/Knox_IN"
      | "America/Kralendijk"
      | "America/La_Paz"
      | "America/Lima"
      | "America/Los_Angeles"
      | "America/Louisville"
      | "America/Lower_Princes"
      | "America/Maceio"
      | "America/Managua"
      | "America/Manaus"
      | "America/Marigot"
      | "America/Martinique"
      | "America/Matamoros"
      | "America/Mazatlan"
      | "America/Mendoza"
      | "America/Menominee"
      | "America/Merida"
      | "America/Metlakatla"
      | "America/Mexico_City"
      | "America/Miquelon"
      | "America/Moncton"
      | "America/Monterrey"
      | "America/Montevideo"
      | "America/Montreal"
      | "America/Montserrat"
      | "America/Nassau"
      | "America/New_York"
      | "America/Nipigon"
      | "America/Nome"
      | "America/Noronha"
      | "America/North_Dakota/Beulah"
      | "America/North_Dakota/Center"
      | "America/North_Dakota/New_Salem"
      | "America/Nuuk"
      | "America/Ojinaga"
      | "America/Panama"
      | "America/Pangnirtung"
      | "America/Paramaribo"
      | "America/Phoenix"
      | "America/Port-au-Prince"
      | "America/Port_of_Spain"
      | "America/Porto_Acre"
      | "America/Porto_Velho"
      | "America/Puerto_Rico"
      | "America/Punta_Arenas"
      | "America/Rainy_River"
      | "America/Rankin_Inlet"
      | "America/Recife"
      | "America/Regina"
      | "America/Resolute"
      | "America/Rio_Branco"
      | "America/Rosario"
      | "America/Santa_Isabel"
      | "America/Santarem"
      | "America/Santiago"
      | "America/Santo_Domingo"
      | "America/Sao_Paulo"
      | "America/Scoresbysund"
      | "America/Shiprock"
      | "America/Sitka"
      | "America/St_Barthelemy"
      | "America/St_Johns"
      | "America/St_Kitts"
      | "America/St_Lucia"
      | "America/St_Thomas"
      | "America/St_Vincent"
      | "America/Swift_Current"
      | "America/Tegucigalpa"
      | "America/Thule"
      | "America/Thunder_Bay"
      | "America/Tijuana"
      | "America/Toronto"
      | "America/Tortola"
      | "America/Vancouver"
      | "America/Virgin"
      | "America/Whitehorse"
      | "America/Winnipeg"
      | "America/Yakutat"
      | "America/Yellowknife"
      | "Antarctica/Casey"
      | "Antarctica/Davis"
      | "Antarctica/DumontDUrville"
      | "Antarctica/Macquarie"
      | "Antarctica/Mawson"
      | "Antarctica/McMurdo"
      | "Antarctica/Palmer"
      | "Antarctica/Rothera"
      | "Antarctica/South_Pole"
      | "Antarctica/Syowa"
      | "Antarctica/Troll"
      | "Antarctica/Vostok"
      | "Arctic/Longyearbyen"
      | "Asia/Aden"
      | "Asia/Almaty"
      | "Asia/Amman"
      | "Asia/Anadyr"
      | "Asia/Aqtau"
      | "Asia/Aqtobe"
      | "Asia/Ashgabat"
      | "Asia/Ashkhabad"
      | "Asia/Atyrau"
      | "Asia/Baghdad"
      | "Asia/Bahrain"
      | "Asia/Baku"
      | "Asia/Bangkok"
      | "Asia/Barnaul"
      | "Asia/Beirut"
      | "Asia/Bishkek"
      | "Asia/Brunei"
      | "Asia/Calcutta"
      | "Asia/Chita"
      | "Asia/Choibalsan"
      | "Asia/Chongqing"
      | "Asia/Chungking"
      | "Asia/Colombo"
      | "Asia/Dacca"
      | "Asia/Damascus"
      | "Asia/Dhaka"
      | "Asia/Dili"
      | "Asia/Dubai"
      | "Asia/Dushanbe"
      | "Asia/Famagusta"
      | "Asia/Gaza"
      | "Asia/Harbin"
      | "Asia/Hebron"
      | "Asia/Ho_Chi_Minh"
      | "Asia/Hong_Kong"
      | "Asia/Hovd"
      | "Asia/Irkutsk"
      | "Asia/Istanbul"
      | "Asia/Jakarta"
      | "Asia/Jayapura"
      | "Asia/Jerusalem"
      | "Asia/Kabul"
      | "Asia/Kamchatka"
      | "Asia/Karachi"
      | "Asia/Kashgar"
      | "Asia/Kathmandu"
      | "Asia/Katmandu"
      | "Asia/Khandyga"
      | "Asia/Kolkata"
      | "Asia/Krasnoyarsk"
      | "Asia/Kuala_Lumpur"
      | "Asia/Kuching"
      | "Asia/Kuwait"
      | "Asia/Macao"
      | "Asia/Macau"
      | "Asia/Magadan"
      | "Asia/Makassar"
      | "Asia/Manila"
      | "Asia/Muscat"
      | "Asia/Nicosia"
      | "Asia/Novokuznetsk"
      | "Asia/Novosibirsk"
      | "Asia/Omsk"
      | "Asia/Oral"
      | "Asia/Phnom_Penh"
      | "Asia/Pontianak"
      | "Asia/Pyongyang"
      | "Asia/Qatar"
      | "Asia/Qostanay"
      | "Asia/Qyzylorda"
      | "Asia/Rangoon"
      | "Asia/Riyadh"
      | "Asia/Saigon"
      | "Asia/Sakhalin"
      | "Asia/Samarkand"
      | "Asia/Seoul"
      | "Asia/Shanghai"
      | "Asia/Singapore"
      | "Asia/Srednekolymsk"
      | "Asia/Taipei"
      | "Asia/Tashkent"
      | "Asia/Tbilisi"
      | "Asia/Tehran"
      | "Asia/Tel_Aviv"
      | "Asia/Thimbu"
      | "Asia/Thimphu"
      | "Asia/Tokyo"
      | "Asia/Tomsk"
      | "Asia/Ujung_Pandang"
      | "Asia/Ulaanbaatar"
      | "Asia/Ulan_Bator"
      | "Asia/Urumqi"
      | "Asia/Ust-Nera"
      | "Asia/Vientiane"
      | "Asia/Vladivostok"
      | "Asia/Yakutsk"
      | "Asia/Yangon"
      | "Asia/Yekaterinburg"
      | "Asia/Yerevan"
      | "Atlantic/Azores"
      | "Atlantic/Bermuda"
      | "Atlantic/Canary"
      | "Atlantic/Cape_Verde"
      | "Atlantic/Faeroe"
      | "Atlantic/Faroe"
      | "Atlantic/Jan_Mayen"
      | "Atlantic/Madeira"
      | "Atlantic/Reykjavik"
      | "Atlantic/South_Georgia"
      | "Atlantic/St_Helena"
      | "Atlantic/Stanley"
      | "Australia/ACT"
      | "Australia/Adelaide"
      | "Australia/Brisbane"
      | "Australia/Broken_Hill"
      | "Australia/Canberra"
      | "Australia/Currie"
      | "Australia/Darwin"
      | "Australia/Eucla"
      | "Australia/Hobart"
      | "Australia/LHI"
      | "Australia/Lindeman"
      | "Australia/Lord_Howe"
      | "Australia/Melbourne"
      | "Australia/NSW"
      | "Australia/North"
      | "Australia/Perth"
      | "Australia/Queensland"
      | "Australia/South"
      | "Australia/Sydney"
      | "Australia/Tasmania"
      | "Australia/Victoria"
      | "Australia/West"
      | "Australia/Yancowinna"
      | "Brazil/Acre"
      | "Brazil/DeNoronha"
      | "Brazil/East"
      | "Brazil/West"
      | "CET"
      | "CST6CDT"
      | "Canada/Atlantic"
      | "Canada/Central"
      | "Canada/Eastern"
      | "Canada/Mountain"
      | "Canada/Newfoundland"
      | "Canada/Pacific"
      | "Canada/Saskatchewan"
      | "Canada/Yukon"
      | "Chile/Continental"
      | "Chile/EasterIsland"
      | "Cuba"
      | "EET"
      | "EST"
      | "EST5EDT"
      | "Egypt"
      | "Eire"
      | "Etc/GMT"
      | "Etc/GMT+0"
      | "Etc/GMT+1"
      | "Etc/GMT+10"
      | "Etc/GMT+11"
      | "Etc/GMT+12"
      | "Etc/GMT+2"
      | "Etc/GMT+3"
      | "Etc/GMT+4"
      | "Etc/GMT+5"
      | "Etc/GMT+6"
      | "Etc/GMT+7"
      | "Etc/GMT+8"
      | "Etc/GMT+9"
      | "Etc/GMT-0"
      | "Etc/GMT-1"
      | "Etc/GMT-10"
      | "Etc/GMT-11"
      | "Etc/GMT-12"
      | "Etc/GMT-13"
      | "Etc/GMT-14"
      | "Etc/GMT-2"
      | "Etc/GMT-3"
      | "Etc/GMT-4"
      | "Etc/GMT-5"
      | "Etc/GMT-6"
      | "Etc/GMT-7"
      | "Etc/GMT-8"
      | "Etc/GMT-9"
      | "Etc/GMT0"
      | "Etc/Greenwich"
      | "Etc/UCT"
      | "Etc/UTC"
      | "Etc/Universal"
      | "Etc/Zulu"
      | "Europe/Amsterdam"
      | "Europe/Andorra"
      | "Europe/Astrakhan"
      | "Europe/Athens"
      | "Europe/Belfast"
      | "Europe/Belgrade"
      | "Europe/Berlin"
      | "Europe/Bratislava"
      | "Europe/Brussels"
      | "Europe/Bucharest"
      | "Europe/Budapest"
      | "Europe/Busingen"
      | "Europe/Chisinau"
      | "Europe/Copenhagen"
      | "Europe/Dublin"
      | "Europe/Gibraltar"
      | "Europe/Guernsey"
      | "Europe/Helsinki"
      | "Europe/Isle_of_Man"
      | "Europe/Istanbul"
      | "Europe/Jersey"
      | "Europe/Kaliningrad"
      | "Europe/Kiev"
      | "Europe/Kirov"
      | "Europe/Kyiv"
      | "Europe/Lisbon"
      | "Europe/Ljubljana"
      | "Europe/London"
      | "Europe/Luxembourg"
      | "Europe/Madrid"
      | "Europe/Malta"
      | "Europe/Mariehamn"
      | "Europe/Minsk"
      | "Europe/Monaco"
      | "Europe/Moscow"
      | "Europe/Nicosia"
      | "Europe/Oslo"
      | "Europe/Paris"
      | "Europe/Podgorica"
      | "Europe/Prague"
      | "Europe/Riga"
      | "Europe/Rome"
      | "Europe/Samara"
      | "Europe/San_Marino"
      | "Europe/Sarajevo"
      | "Europe/Saratov"
      | "Europe/Simferopol"
      | "Europe/Skopje"
      | "Europe/Sofia"
      | "Europe/Stockholm"
      | "Europe/Tallinn"
      | "Europe/Tirane"
      | "Europe/Tiraspol"
      | "Europe/Ulyanovsk"
      | "Europe/Uzhgorod"
      | "Europe/Vaduz"
      | "Europe/Vatican"
      | "Europe/Vienna"
      | "Europe/Vilnius"
      | "Europe/Volgograd"
      | "Europe/Warsaw"
      | "Europe/Zagreb"
      | "Europe/Zaporozhye"
      | "Europe/Zurich"
      | "GB"
      | "GB-Eire"
      | "GMT"
      | "GMT+0"
      | "GMT-0"
      | "GMT0"
      | "Greenwich"
      | "HST"
      | "Hongkong"
      | "Iceland"
      | "Indian/Antananarivo"
      | "Indian/Chagos"
      | "Indian/Christmas"
      | "Indian/Cocos"
      | "Indian/Comoro"
      | "Indian/Kerguelen"
      | "Indian/Mahe"
      | "Indian/Maldives"
      | "Indian/Mauritius"
      | "Indian/Mayotte"
      | "Indian/Reunion"
      | "Iran"
      | "Israel"
      | "Jamaica"
      | "Japan"
      | "Kwajalein"
      | "Libya"
      | "MET"
      | "MST"
      | "MST7MDT"
      | "Mexico/BajaNorte"
      | "Mexico/BajaSur"
      | "Mexico/General"
      | "NZ"
      | "NZ-CHAT"
      | "Navajo"
      | "PRC"
      | "PST8PDT"
      | "Pacific/Apia"
      | "Pacific/Auckland"
      | "Pacific/Bougainville"
      | "Pacific/Chatham"
      | "Pacific/Chuuk"
      | "Pacific/Easter"
      | "Pacific/Efate"
      | "Pacific/Enderbury"
      | "Pacific/Fakaofo"
      | "Pacific/Fiji"
      | "Pacific/Funafuti"
      | "Pacific/Galapagos"
      | "Pacific/Gambier"
      | "Pacific/Guadalcanal"
      | "Pacific/Guam"
      | "Pacific/Honolulu"
      | "Pacific/Johnston"
      | "Pacific/Kanton"
      | "Pacific/Kiritimati"
      | "Pacific/Kosrae"
      | "Pacific/Kwajalein"
      | "Pacific/Majuro"
      | "Pacific/Marquesas"
      | "Pacific/Midway"
      | "Pacific/Nauru"
      | "Pacific/Niue"
      | "Pacific/Norfolk"
      | "Pacific/Noumea"
      | "Pacific/Pago_Pago"
      | "Pacific/Palau"
      | "Pacific/Pitcairn"
      | "Pacific/Pohnpei"
      | "Pacific/Ponape"
      | "Pacific/Port_Moresby"
      | "Pacific/Rarotonga"
      | "Pacific/Saipan"
      | "Pacific/Samoa"
      | "Pacific/Tahiti"
      | "Pacific/Tarawa"
      | "Pacific/Tongatapu"
      | "Pacific/Truk"
      | "Pacific/Wake"
      | "Pacific/Wallis"
      | "Pacific/Yap"
      | "Poland"
      | "Portugal"
      | "ROC"
      | "ROK"
      | "Singapore"
      | "Turkey"
      | "UCT"
      | "US/Alaska"
      | "US/Aleutian"
      | "US/Arizona"
      | "US/Central"
      | "US/East-Indiana"
      | "US/Eastern"
      | "US/Hawaii"
      | "US/Indiana-Starke"
      | "US/Michigan"
      | "US/Mountain"
      | "US/Pacific"
      | "US/Samoa"
      | "UTC"
      | "Universal"
      | "W-SU"
      | "WET"
      | "Zulu";
    /**
     * @description * `disabled` - disabled
     * * `toolbar` - toolbar
     * @enum {string}
     */
    ToolbarModeEnum: "disabled" | "toolbar";
    Trend: {
      /** @description Events to filter on. One of `events` or `actions` is required. */
      events?: components["schemas"]["FilterEvent"][];
      /** @description Actions to filter on. One of `events` or `actions` is required. */
      actions?: components["schemas"]["FilterAction"][];
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /**
       * @description Whether to filter out internal and test accounts. See "project settings" in your PostHog account for the filters.
       * @default false
       */
      filter_test_accounts?: boolean;
      /**
       * @description What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_from?: string;
      /**
       * @description What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_to?: string;
      /**
       * @description A property or cohort to break down on. You can select the type of the property with breakdown_type.
       * - `event` (default): a property key
       * - `person`: a person property key
       * - `cohort`: an array of cohort IDs (ie `[9581,5812]`)
       */
      breakdown?: string;
      /**
       * @description Type of property to break down on.
       *
       * * `event` - event
       * * `person` - person
       * * `cohort` - cohort
       * * `group` - group
       * * `session` - session
       * * `hogql` - hogql
       * @default event
       */
      breakdown_type?: components["schemas"]["BreakdownTypeEnum"];
      /**
       * @description How to display the data. Will change how the data is returned.
       *
       * * `ActionsLineGraph` - ActionsLineGraph
       * * `ActionsLineGraphCumulative` - ActionsLineGraphCumulative
       * * `ActionsTable` - ActionsTable
       * * `ActionsPie` - ActionsPie
       * * `ActionsBar` - ActionsBar
       * * `ActionsBarValue` - ActionsBarValue
       * * `WorldMap` - WorldMap
       * * `BoldNumber` - BoldNumber
       * @default ActionsLineGraph
       */
      display?: components["schemas"]["DisplayEnum"];
      /** @description Combine the result of events or actions into a single number. For example `A + B` or `(A-B)/B`. The letters correspond to the order of the `events` or `actions` lists. */
      formula?: string;
      /** @description For each returned result show the current period and the previous period. The result will contain `compare:true` and a `compare_label` with either `current` or `previous`. */
      compare?: boolean;
    };
    TrendResult: {
      /** @description The requested counts. */
      data: number[];
      /** @description The dates corresponding to the data field above. */
      days: string[];
      /** @description The dates corresponding to the data field above. */
      labels: string[];
      /** @description The insight that's being returned. */
      filter: components["schemas"]["GenericInsights"];
      /**
       * @description A label describing this result. Will include
       * - The event or action
       * - Breakdown value
       * - If `compare:true`, whether it's `current` or `previous`
       */
      label: string;
    };
    TrendResults: {
      /** @description Whether the result is cached. To force a refresh, pass ?refresh=true */
      is_cached: boolean;
      /**
       * Format: date-time
       * @description If the result is cached, when it was last refreshed.
       */
      last_refresh: string;
      /**
       * @description Timezone the chart is displayed in
       *
       * * `Africa/Abidjan` - Africa/Abidjan
       * * `Africa/Accra` - Africa/Accra
       * * `Africa/Addis_Ababa` - Africa/Addis_Ababa
       * * `Africa/Algiers` - Africa/Algiers
       * * `Africa/Asmara` - Africa/Asmara
       * * `Africa/Asmera` - Africa/Asmera
       * * `Africa/Bamako` - Africa/Bamako
       * * `Africa/Bangui` - Africa/Bangui
       * * `Africa/Banjul` - Africa/Banjul
       * * `Africa/Bissau` - Africa/Bissau
       * * `Africa/Blantyre` - Africa/Blantyre
       * * `Africa/Brazzaville` - Africa/Brazzaville
       * * `Africa/Bujumbura` - Africa/Bujumbura
       * * `Africa/Cairo` - Africa/Cairo
       * * `Africa/Casablanca` - Africa/Casablanca
       * * `Africa/Ceuta` - Africa/Ceuta
       * * `Africa/Conakry` - Africa/Conakry
       * * `Africa/Dakar` - Africa/Dakar
       * * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
       * * `Africa/Djibouti` - Africa/Djibouti
       * * `Africa/Douala` - Africa/Douala
       * * `Africa/El_Aaiun` - Africa/El_Aaiun
       * * `Africa/Freetown` - Africa/Freetown
       * * `Africa/Gaborone` - Africa/Gaborone
       * * `Africa/Harare` - Africa/Harare
       * * `Africa/Johannesburg` - Africa/Johannesburg
       * * `Africa/Juba` - Africa/Juba
       * * `Africa/Kampala` - Africa/Kampala
       * * `Africa/Khartoum` - Africa/Khartoum
       * * `Africa/Kigali` - Africa/Kigali
       * * `Africa/Kinshasa` - Africa/Kinshasa
       * * `Africa/Lagos` - Africa/Lagos
       * * `Africa/Libreville` - Africa/Libreville
       * * `Africa/Lome` - Africa/Lome
       * * `Africa/Luanda` - Africa/Luanda
       * * `Africa/Lubumbashi` - Africa/Lubumbashi
       * * `Africa/Lusaka` - Africa/Lusaka
       * * `Africa/Malabo` - Africa/Malabo
       * * `Africa/Maputo` - Africa/Maputo
       * * `Africa/Maseru` - Africa/Maseru
       * * `Africa/Mbabane` - Africa/Mbabane
       * * `Africa/Mogadishu` - Africa/Mogadishu
       * * `Africa/Monrovia` - Africa/Monrovia
       * * `Africa/Nairobi` - Africa/Nairobi
       * * `Africa/Ndjamena` - Africa/Ndjamena
       * * `Africa/Niamey` - Africa/Niamey
       * * `Africa/Nouakchott` - Africa/Nouakchott
       * * `Africa/Ouagadougou` - Africa/Ouagadougou
       * * `Africa/Porto-Novo` - Africa/Porto-Novo
       * * `Africa/Sao_Tome` - Africa/Sao_Tome
       * * `Africa/Timbuktu` - Africa/Timbuktu
       * * `Africa/Tripoli` - Africa/Tripoli
       * * `Africa/Tunis` - Africa/Tunis
       * * `Africa/Windhoek` - Africa/Windhoek
       * * `America/Adak` - America/Adak
       * * `America/Anchorage` - America/Anchorage
       * * `America/Anguilla` - America/Anguilla
       * * `America/Antigua` - America/Antigua
       * * `America/Araguaina` - America/Araguaina
       * * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
       * * `America/Argentina/Catamarca` - America/Argentina/Catamarca
       * * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
       * * `America/Argentina/Cordoba` - America/Argentina/Cordoba
       * * `America/Argentina/Jujuy` - America/Argentina/Jujuy
       * * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
       * * `America/Argentina/Mendoza` - America/Argentina/Mendoza
       * * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
       * * `America/Argentina/Salta` - America/Argentina/Salta
       * * `America/Argentina/San_Juan` - America/Argentina/San_Juan
       * * `America/Argentina/San_Luis` - America/Argentina/San_Luis
       * * `America/Argentina/Tucuman` - America/Argentina/Tucuman
       * * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
       * * `America/Aruba` - America/Aruba
       * * `America/Asuncion` - America/Asuncion
       * * `America/Atikokan` - America/Atikokan
       * * `America/Atka` - America/Atka
       * * `America/Bahia` - America/Bahia
       * * `America/Bahia_Banderas` - America/Bahia_Banderas
       * * `America/Barbados` - America/Barbados
       * * `America/Belem` - America/Belem
       * * `America/Belize` - America/Belize
       * * `America/Blanc-Sablon` - America/Blanc-Sablon
       * * `America/Boa_Vista` - America/Boa_Vista
       * * `America/Bogota` - America/Bogota
       * * `America/Boise` - America/Boise
       * * `America/Buenos_Aires` - America/Buenos_Aires
       * * `America/Cambridge_Bay` - America/Cambridge_Bay
       * * `America/Campo_Grande` - America/Campo_Grande
       * * `America/Cancun` - America/Cancun
       * * `America/Caracas` - America/Caracas
       * * `America/Catamarca` - America/Catamarca
       * * `America/Cayenne` - America/Cayenne
       * * `America/Cayman` - America/Cayman
       * * `America/Chicago` - America/Chicago
       * * `America/Chihuahua` - America/Chihuahua
       * * `America/Ciudad_Juarez` - America/Ciudad_Juarez
       * * `America/Coral_Harbour` - America/Coral_Harbour
       * * `America/Cordoba` - America/Cordoba
       * * `America/Costa_Rica` - America/Costa_Rica
       * * `America/Creston` - America/Creston
       * * `America/Cuiaba` - America/Cuiaba
       * * `America/Curacao` - America/Curacao
       * * `America/Danmarkshavn` - America/Danmarkshavn
       * * `America/Dawson` - America/Dawson
       * * `America/Dawson_Creek` - America/Dawson_Creek
       * * `America/Denver` - America/Denver
       * * `America/Detroit` - America/Detroit
       * * `America/Dominica` - America/Dominica
       * * `America/Edmonton` - America/Edmonton
       * * `America/Eirunepe` - America/Eirunepe
       * * `America/El_Salvador` - America/El_Salvador
       * * `America/Ensenada` - America/Ensenada
       * * `America/Fort_Nelson` - America/Fort_Nelson
       * * `America/Fort_Wayne` - America/Fort_Wayne
       * * `America/Fortaleza` - America/Fortaleza
       * * `America/Glace_Bay` - America/Glace_Bay
       * * `America/Godthab` - America/Godthab
       * * `America/Goose_Bay` - America/Goose_Bay
       * * `America/Grand_Turk` - America/Grand_Turk
       * * `America/Grenada` - America/Grenada
       * * `America/Guadeloupe` - America/Guadeloupe
       * * `America/Guatemala` - America/Guatemala
       * * `America/Guayaquil` - America/Guayaquil
       * * `America/Guyana` - America/Guyana
       * * `America/Halifax` - America/Halifax
       * * `America/Havana` - America/Havana
       * * `America/Hermosillo` - America/Hermosillo
       * * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
       * * `America/Indiana/Knox` - America/Indiana/Knox
       * * `America/Indiana/Marengo` - America/Indiana/Marengo
       * * `America/Indiana/Petersburg` - America/Indiana/Petersburg
       * * `America/Indiana/Tell_City` - America/Indiana/Tell_City
       * * `America/Indiana/Vevay` - America/Indiana/Vevay
       * * `America/Indiana/Vincennes` - America/Indiana/Vincennes
       * * `America/Indiana/Winamac` - America/Indiana/Winamac
       * * `America/Indianapolis` - America/Indianapolis
       * * `America/Inuvik` - America/Inuvik
       * * `America/Iqaluit` - America/Iqaluit
       * * `America/Jamaica` - America/Jamaica
       * * `America/Jujuy` - America/Jujuy
       * * `America/Juneau` - America/Juneau
       * * `America/Kentucky/Louisville` - America/Kentucky/Louisville
       * * `America/Kentucky/Monticello` - America/Kentucky/Monticello
       * * `America/Knox_IN` - America/Knox_IN
       * * `America/Kralendijk` - America/Kralendijk
       * * `America/La_Paz` - America/La_Paz
       * * `America/Lima` - America/Lima
       * * `America/Los_Angeles` - America/Los_Angeles
       * * `America/Louisville` - America/Louisville
       * * `America/Lower_Princes` - America/Lower_Princes
       * * `America/Maceio` - America/Maceio
       * * `America/Managua` - America/Managua
       * * `America/Manaus` - America/Manaus
       * * `America/Marigot` - America/Marigot
       * * `America/Martinique` - America/Martinique
       * * `America/Matamoros` - America/Matamoros
       * * `America/Mazatlan` - America/Mazatlan
       * * `America/Mendoza` - America/Mendoza
       * * `America/Menominee` - America/Menominee
       * * `America/Merida` - America/Merida
       * * `America/Metlakatla` - America/Metlakatla
       * * `America/Mexico_City` - America/Mexico_City
       * * `America/Miquelon` - America/Miquelon
       * * `America/Moncton` - America/Moncton
       * * `America/Monterrey` - America/Monterrey
       * * `America/Montevideo` - America/Montevideo
       * * `America/Montreal` - America/Montreal
       * * `America/Montserrat` - America/Montserrat
       * * `America/Nassau` - America/Nassau
       * * `America/New_York` - America/New_York
       * * `America/Nipigon` - America/Nipigon
       * * `America/Nome` - America/Nome
       * * `America/Noronha` - America/Noronha
       * * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
       * * `America/North_Dakota/Center` - America/North_Dakota/Center
       * * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
       * * `America/Nuuk` - America/Nuuk
       * * `America/Ojinaga` - America/Ojinaga
       * * `America/Panama` - America/Panama
       * * `America/Pangnirtung` - America/Pangnirtung
       * * `America/Paramaribo` - America/Paramaribo
       * * `America/Phoenix` - America/Phoenix
       * * `America/Port-au-Prince` - America/Port-au-Prince
       * * `America/Port_of_Spain` - America/Port_of_Spain
       * * `America/Porto_Acre` - America/Porto_Acre
       * * `America/Porto_Velho` - America/Porto_Velho
       * * `America/Puerto_Rico` - America/Puerto_Rico
       * * `America/Punta_Arenas` - America/Punta_Arenas
       * * `America/Rainy_River` - America/Rainy_River
       * * `America/Rankin_Inlet` - America/Rankin_Inlet
       * * `America/Recife` - America/Recife
       * * `America/Regina` - America/Regina
       * * `America/Resolute` - America/Resolute
       * * `America/Rio_Branco` - America/Rio_Branco
       * * `America/Rosario` - America/Rosario
       * * `America/Santa_Isabel` - America/Santa_Isabel
       * * `America/Santarem` - America/Santarem
       * * `America/Santiago` - America/Santiago
       * * `America/Santo_Domingo` - America/Santo_Domingo
       * * `America/Sao_Paulo` - America/Sao_Paulo
       * * `America/Scoresbysund` - America/Scoresbysund
       * * `America/Shiprock` - America/Shiprock
       * * `America/Sitka` - America/Sitka
       * * `America/St_Barthelemy` - America/St_Barthelemy
       * * `America/St_Johns` - America/St_Johns
       * * `America/St_Kitts` - America/St_Kitts
       * * `America/St_Lucia` - America/St_Lucia
       * * `America/St_Thomas` - America/St_Thomas
       * * `America/St_Vincent` - America/St_Vincent
       * * `America/Swift_Current` - America/Swift_Current
       * * `America/Tegucigalpa` - America/Tegucigalpa
       * * `America/Thule` - America/Thule
       * * `America/Thunder_Bay` - America/Thunder_Bay
       * * `America/Tijuana` - America/Tijuana
       * * `America/Toronto` - America/Toronto
       * * `America/Tortola` - America/Tortola
       * * `America/Vancouver` - America/Vancouver
       * * `America/Virgin` - America/Virgin
       * * `America/Whitehorse` - America/Whitehorse
       * * `America/Winnipeg` - America/Winnipeg
       * * `America/Yakutat` - America/Yakutat
       * * `America/Yellowknife` - America/Yellowknife
       * * `Antarctica/Casey` - Antarctica/Casey
       * * `Antarctica/Davis` - Antarctica/Davis
       * * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
       * * `Antarctica/Macquarie` - Antarctica/Macquarie
       * * `Antarctica/Mawson` - Antarctica/Mawson
       * * `Antarctica/McMurdo` - Antarctica/McMurdo
       * * `Antarctica/Palmer` - Antarctica/Palmer
       * * `Antarctica/Rothera` - Antarctica/Rothera
       * * `Antarctica/South_Pole` - Antarctica/South_Pole
       * * `Antarctica/Syowa` - Antarctica/Syowa
       * * `Antarctica/Troll` - Antarctica/Troll
       * * `Antarctica/Vostok` - Antarctica/Vostok
       * * `Arctic/Longyearbyen` - Arctic/Longyearbyen
       * * `Asia/Aden` - Asia/Aden
       * * `Asia/Almaty` - Asia/Almaty
       * * `Asia/Amman` - Asia/Amman
       * * `Asia/Anadyr` - Asia/Anadyr
       * * `Asia/Aqtau` - Asia/Aqtau
       * * `Asia/Aqtobe` - Asia/Aqtobe
       * * `Asia/Ashgabat` - Asia/Ashgabat
       * * `Asia/Ashkhabad` - Asia/Ashkhabad
       * * `Asia/Atyrau` - Asia/Atyrau
       * * `Asia/Baghdad` - Asia/Baghdad
       * * `Asia/Bahrain` - Asia/Bahrain
       * * `Asia/Baku` - Asia/Baku
       * * `Asia/Bangkok` - Asia/Bangkok
       * * `Asia/Barnaul` - Asia/Barnaul
       * * `Asia/Beirut` - Asia/Beirut
       * * `Asia/Bishkek` - Asia/Bishkek
       * * `Asia/Brunei` - Asia/Brunei
       * * `Asia/Calcutta` - Asia/Calcutta
       * * `Asia/Chita` - Asia/Chita
       * * `Asia/Choibalsan` - Asia/Choibalsan
       * * `Asia/Chongqing` - Asia/Chongqing
       * * `Asia/Chungking` - Asia/Chungking
       * * `Asia/Colombo` - Asia/Colombo
       * * `Asia/Dacca` - Asia/Dacca
       * * `Asia/Damascus` - Asia/Damascus
       * * `Asia/Dhaka` - Asia/Dhaka
       * * `Asia/Dili` - Asia/Dili
       * * `Asia/Dubai` - Asia/Dubai
       * * `Asia/Dushanbe` - Asia/Dushanbe
       * * `Asia/Famagusta` - Asia/Famagusta
       * * `Asia/Gaza` - Asia/Gaza
       * * `Asia/Harbin` - Asia/Harbin
       * * `Asia/Hebron` - Asia/Hebron
       * * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
       * * `Asia/Hong_Kong` - Asia/Hong_Kong
       * * `Asia/Hovd` - Asia/Hovd
       * * `Asia/Irkutsk` - Asia/Irkutsk
       * * `Asia/Istanbul` - Asia/Istanbul
       * * `Asia/Jakarta` - Asia/Jakarta
       * * `Asia/Jayapura` - Asia/Jayapura
       * * `Asia/Jerusalem` - Asia/Jerusalem
       * * `Asia/Kabul` - Asia/Kabul
       * * `Asia/Kamchatka` - Asia/Kamchatka
       * * `Asia/Karachi` - Asia/Karachi
       * * `Asia/Kashgar` - Asia/Kashgar
       * * `Asia/Kathmandu` - Asia/Kathmandu
       * * `Asia/Katmandu` - Asia/Katmandu
       * * `Asia/Khandyga` - Asia/Khandyga
       * * `Asia/Kolkata` - Asia/Kolkata
       * * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
       * * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
       * * `Asia/Kuching` - Asia/Kuching
       * * `Asia/Kuwait` - Asia/Kuwait
       * * `Asia/Macao` - Asia/Macao
       * * `Asia/Macau` - Asia/Macau
       * * `Asia/Magadan` - Asia/Magadan
       * * `Asia/Makassar` - Asia/Makassar
       * * `Asia/Manila` - Asia/Manila
       * * `Asia/Muscat` - Asia/Muscat
       * * `Asia/Nicosia` - Asia/Nicosia
       * * `Asia/Novokuznetsk` - Asia/Novokuznetsk
       * * `Asia/Novosibirsk` - Asia/Novosibirsk
       * * `Asia/Omsk` - Asia/Omsk
       * * `Asia/Oral` - Asia/Oral
       * * `Asia/Phnom_Penh` - Asia/Phnom_Penh
       * * `Asia/Pontianak` - Asia/Pontianak
       * * `Asia/Pyongyang` - Asia/Pyongyang
       * * `Asia/Qatar` - Asia/Qatar
       * * `Asia/Qostanay` - Asia/Qostanay
       * * `Asia/Qyzylorda` - Asia/Qyzylorda
       * * `Asia/Rangoon` - Asia/Rangoon
       * * `Asia/Riyadh` - Asia/Riyadh
       * * `Asia/Saigon` - Asia/Saigon
       * * `Asia/Sakhalin` - Asia/Sakhalin
       * * `Asia/Samarkand` - Asia/Samarkand
       * * `Asia/Seoul` - Asia/Seoul
       * * `Asia/Shanghai` - Asia/Shanghai
       * * `Asia/Singapore` - Asia/Singapore
       * * `Asia/Srednekolymsk` - Asia/Srednekolymsk
       * * `Asia/Taipei` - Asia/Taipei
       * * `Asia/Tashkent` - Asia/Tashkent
       * * `Asia/Tbilisi` - Asia/Tbilisi
       * * `Asia/Tehran` - Asia/Tehran
       * * `Asia/Tel_Aviv` - Asia/Tel_Aviv
       * * `Asia/Thimbu` - Asia/Thimbu
       * * `Asia/Thimphu` - Asia/Thimphu
       * * `Asia/Tokyo` - Asia/Tokyo
       * * `Asia/Tomsk` - Asia/Tomsk
       * * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
       * * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
       * * `Asia/Ulan_Bator` - Asia/Ulan_Bator
       * * `Asia/Urumqi` - Asia/Urumqi
       * * `Asia/Ust-Nera` - Asia/Ust-Nera
       * * `Asia/Vientiane` - Asia/Vientiane
       * * `Asia/Vladivostok` - Asia/Vladivostok
       * * `Asia/Yakutsk` - Asia/Yakutsk
       * * `Asia/Yangon` - Asia/Yangon
       * * `Asia/Yekaterinburg` - Asia/Yekaterinburg
       * * `Asia/Yerevan` - Asia/Yerevan
       * * `Atlantic/Azores` - Atlantic/Azores
       * * `Atlantic/Bermuda` - Atlantic/Bermuda
       * * `Atlantic/Canary` - Atlantic/Canary
       * * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
       * * `Atlantic/Faeroe` - Atlantic/Faeroe
       * * `Atlantic/Faroe` - Atlantic/Faroe
       * * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
       * * `Atlantic/Madeira` - Atlantic/Madeira
       * * `Atlantic/Reykjavik` - Atlantic/Reykjavik
       * * `Atlantic/South_Georgia` - Atlantic/South_Georgia
       * * `Atlantic/St_Helena` - Atlantic/St_Helena
       * * `Atlantic/Stanley` - Atlantic/Stanley
       * * `Australia/ACT` - Australia/ACT
       * * `Australia/Adelaide` - Australia/Adelaide
       * * `Australia/Brisbane` - Australia/Brisbane
       * * `Australia/Broken_Hill` - Australia/Broken_Hill
       * * `Australia/Canberra` - Australia/Canberra
       * * `Australia/Currie` - Australia/Currie
       * * `Australia/Darwin` - Australia/Darwin
       * * `Australia/Eucla` - Australia/Eucla
       * * `Australia/Hobart` - Australia/Hobart
       * * `Australia/LHI` - Australia/LHI
       * * `Australia/Lindeman` - Australia/Lindeman
       * * `Australia/Lord_Howe` - Australia/Lord_Howe
       * * `Australia/Melbourne` - Australia/Melbourne
       * * `Australia/NSW` - Australia/NSW
       * * `Australia/North` - Australia/North
       * * `Australia/Perth` - Australia/Perth
       * * `Australia/Queensland` - Australia/Queensland
       * * `Australia/South` - Australia/South
       * * `Australia/Sydney` - Australia/Sydney
       * * `Australia/Tasmania` - Australia/Tasmania
       * * `Australia/Victoria` - Australia/Victoria
       * * `Australia/West` - Australia/West
       * * `Australia/Yancowinna` - Australia/Yancowinna
       * * `Brazil/Acre` - Brazil/Acre
       * * `Brazil/DeNoronha` - Brazil/DeNoronha
       * * `Brazil/East` - Brazil/East
       * * `Brazil/West` - Brazil/West
       * * `CET` - CET
       * * `CST6CDT` - CST6CDT
       * * `Canada/Atlantic` - Canada/Atlantic
       * * `Canada/Central` - Canada/Central
       * * `Canada/Eastern` - Canada/Eastern
       * * `Canada/Mountain` - Canada/Mountain
       * * `Canada/Newfoundland` - Canada/Newfoundland
       * * `Canada/Pacific` - Canada/Pacific
       * * `Canada/Saskatchewan` - Canada/Saskatchewan
       * * `Canada/Yukon` - Canada/Yukon
       * * `Chile/Continental` - Chile/Continental
       * * `Chile/EasterIsland` - Chile/EasterIsland
       * * `Cuba` - Cuba
       * * `EET` - EET
       * * `EST` - EST
       * * `EST5EDT` - EST5EDT
       * * `Egypt` - Egypt
       * * `Eire` - Eire
       * * `Etc/GMT` - Etc/GMT
       * * `Etc/GMT+0` - Etc/GMT+0
       * * `Etc/GMT+1` - Etc/GMT+1
       * * `Etc/GMT+10` - Etc/GMT+10
       * * `Etc/GMT+11` - Etc/GMT+11
       * * `Etc/GMT+12` - Etc/GMT+12
       * * `Etc/GMT+2` - Etc/GMT+2
       * * `Etc/GMT+3` - Etc/GMT+3
       * * `Etc/GMT+4` - Etc/GMT+4
       * * `Etc/GMT+5` - Etc/GMT+5
       * * `Etc/GMT+6` - Etc/GMT+6
       * * `Etc/GMT+7` - Etc/GMT+7
       * * `Etc/GMT+8` - Etc/GMT+8
       * * `Etc/GMT+9` - Etc/GMT+9
       * * `Etc/GMT-0` - Etc/GMT-0
       * * `Etc/GMT-1` - Etc/GMT-1
       * * `Etc/GMT-10` - Etc/GMT-10
       * * `Etc/GMT-11` - Etc/GMT-11
       * * `Etc/GMT-12` - Etc/GMT-12
       * * `Etc/GMT-13` - Etc/GMT-13
       * * `Etc/GMT-14` - Etc/GMT-14
       * * `Etc/GMT-2` - Etc/GMT-2
       * * `Etc/GMT-3` - Etc/GMT-3
       * * `Etc/GMT-4` - Etc/GMT-4
       * * `Etc/GMT-5` - Etc/GMT-5
       * * `Etc/GMT-6` - Etc/GMT-6
       * * `Etc/GMT-7` - Etc/GMT-7
       * * `Etc/GMT-8` - Etc/GMT-8
       * * `Etc/GMT-9` - Etc/GMT-9
       * * `Etc/GMT0` - Etc/GMT0
       * * `Etc/Greenwich` - Etc/Greenwich
       * * `Etc/UCT` - Etc/UCT
       * * `Etc/UTC` - Etc/UTC
       * * `Etc/Universal` - Etc/Universal
       * * `Etc/Zulu` - Etc/Zulu
       * * `Europe/Amsterdam` - Europe/Amsterdam
       * * `Europe/Andorra` - Europe/Andorra
       * * `Europe/Astrakhan` - Europe/Astrakhan
       * * `Europe/Athens` - Europe/Athens
       * * `Europe/Belfast` - Europe/Belfast
       * * `Europe/Belgrade` - Europe/Belgrade
       * * `Europe/Berlin` - Europe/Berlin
       * * `Europe/Bratislava` - Europe/Bratislava
       * * `Europe/Brussels` - Europe/Brussels
       * * `Europe/Bucharest` - Europe/Bucharest
       * * `Europe/Budapest` - Europe/Budapest
       * * `Europe/Busingen` - Europe/Busingen
       * * `Europe/Chisinau` - Europe/Chisinau
       * * `Europe/Copenhagen` - Europe/Copenhagen
       * * `Europe/Dublin` - Europe/Dublin
       * * `Europe/Gibraltar` - Europe/Gibraltar
       * * `Europe/Guernsey` - Europe/Guernsey
       * * `Europe/Helsinki` - Europe/Helsinki
       * * `Europe/Isle_of_Man` - Europe/Isle_of_Man
       * * `Europe/Istanbul` - Europe/Istanbul
       * * `Europe/Jersey` - Europe/Jersey
       * * `Europe/Kaliningrad` - Europe/Kaliningrad
       * * `Europe/Kiev` - Europe/Kiev
       * * `Europe/Kirov` - Europe/Kirov
       * * `Europe/Kyiv` - Europe/Kyiv
       * * `Europe/Lisbon` - Europe/Lisbon
       * * `Europe/Ljubljana` - Europe/Ljubljana
       * * `Europe/London` - Europe/London
       * * `Europe/Luxembourg` - Europe/Luxembourg
       * * `Europe/Madrid` - Europe/Madrid
       * * `Europe/Malta` - Europe/Malta
       * * `Europe/Mariehamn` - Europe/Mariehamn
       * * `Europe/Minsk` - Europe/Minsk
       * * `Europe/Monaco` - Europe/Monaco
       * * `Europe/Moscow` - Europe/Moscow
       * * `Europe/Nicosia` - Europe/Nicosia
       * * `Europe/Oslo` - Europe/Oslo
       * * `Europe/Paris` - Europe/Paris
       * * `Europe/Podgorica` - Europe/Podgorica
       * * `Europe/Prague` - Europe/Prague
       * * `Europe/Riga` - Europe/Riga
       * * `Europe/Rome` - Europe/Rome
       * * `Europe/Samara` - Europe/Samara
       * * `Europe/San_Marino` - Europe/San_Marino
       * * `Europe/Sarajevo` - Europe/Sarajevo
       * * `Europe/Saratov` - Europe/Saratov
       * * `Europe/Simferopol` - Europe/Simferopol
       * * `Europe/Skopje` - Europe/Skopje
       * * `Europe/Sofia` - Europe/Sofia
       * * `Europe/Stockholm` - Europe/Stockholm
       * * `Europe/Tallinn` - Europe/Tallinn
       * * `Europe/Tirane` - Europe/Tirane
       * * `Europe/Tiraspol` - Europe/Tiraspol
       * * `Europe/Ulyanovsk` - Europe/Ulyanovsk
       * * `Europe/Uzhgorod` - Europe/Uzhgorod
       * * `Europe/Vaduz` - Europe/Vaduz
       * * `Europe/Vatican` - Europe/Vatican
       * * `Europe/Vienna` - Europe/Vienna
       * * `Europe/Vilnius` - Europe/Vilnius
       * * `Europe/Volgograd` - Europe/Volgograd
       * * `Europe/Warsaw` - Europe/Warsaw
       * * `Europe/Zagreb` - Europe/Zagreb
       * * `Europe/Zaporozhye` - Europe/Zaporozhye
       * * `Europe/Zurich` - Europe/Zurich
       * * `GB` - GB
       * * `GB-Eire` - GB-Eire
       * * `GMT` - GMT
       * * `GMT+0` - GMT+0
       * * `GMT-0` - GMT-0
       * * `GMT0` - GMT0
       * * `Greenwich` - Greenwich
       * * `HST` - HST
       * * `Hongkong` - Hongkong
       * * `Iceland` - Iceland
       * * `Indian/Antananarivo` - Indian/Antananarivo
       * * `Indian/Chagos` - Indian/Chagos
       * * `Indian/Christmas` - Indian/Christmas
       * * `Indian/Cocos` - Indian/Cocos
       * * `Indian/Comoro` - Indian/Comoro
       * * `Indian/Kerguelen` - Indian/Kerguelen
       * * `Indian/Mahe` - Indian/Mahe
       * * `Indian/Maldives` - Indian/Maldives
       * * `Indian/Mauritius` - Indian/Mauritius
       * * `Indian/Mayotte` - Indian/Mayotte
       * * `Indian/Reunion` - Indian/Reunion
       * * `Iran` - Iran
       * * `Israel` - Israel
       * * `Jamaica` - Jamaica
       * * `Japan` - Japan
       * * `Kwajalein` - Kwajalein
       * * `Libya` - Libya
       * * `MET` - MET
       * * `MST` - MST
       * * `MST7MDT` - MST7MDT
       * * `Mexico/BajaNorte` - Mexico/BajaNorte
       * * `Mexico/BajaSur` - Mexico/BajaSur
       * * `Mexico/General` - Mexico/General
       * * `NZ` - NZ
       * * `NZ-CHAT` - NZ-CHAT
       * * `Navajo` - Navajo
       * * `PRC` - PRC
       * * `PST8PDT` - PST8PDT
       * * `Pacific/Apia` - Pacific/Apia
       * * `Pacific/Auckland` - Pacific/Auckland
       * * `Pacific/Bougainville` - Pacific/Bougainville
       * * `Pacific/Chatham` - Pacific/Chatham
       * * `Pacific/Chuuk` - Pacific/Chuuk
       * * `Pacific/Easter` - Pacific/Easter
       * * `Pacific/Efate` - Pacific/Efate
       * * `Pacific/Enderbury` - Pacific/Enderbury
       * * `Pacific/Fakaofo` - Pacific/Fakaofo
       * * `Pacific/Fiji` - Pacific/Fiji
       * * `Pacific/Funafuti` - Pacific/Funafuti
       * * `Pacific/Galapagos` - Pacific/Galapagos
       * * `Pacific/Gambier` - Pacific/Gambier
       * * `Pacific/Guadalcanal` - Pacific/Guadalcanal
       * * `Pacific/Guam` - Pacific/Guam
       * * `Pacific/Honolulu` - Pacific/Honolulu
       * * `Pacific/Johnston` - Pacific/Johnston
       * * `Pacific/Kanton` - Pacific/Kanton
       * * `Pacific/Kiritimati` - Pacific/Kiritimati
       * * `Pacific/Kosrae` - Pacific/Kosrae
       * * `Pacific/Kwajalein` - Pacific/Kwajalein
       * * `Pacific/Majuro` - Pacific/Majuro
       * * `Pacific/Marquesas` - Pacific/Marquesas
       * * `Pacific/Midway` - Pacific/Midway
       * * `Pacific/Nauru` - Pacific/Nauru
       * * `Pacific/Niue` - Pacific/Niue
       * * `Pacific/Norfolk` - Pacific/Norfolk
       * * `Pacific/Noumea` - Pacific/Noumea
       * * `Pacific/Pago_Pago` - Pacific/Pago_Pago
       * * `Pacific/Palau` - Pacific/Palau
       * * `Pacific/Pitcairn` - Pacific/Pitcairn
       * * `Pacific/Pohnpei` - Pacific/Pohnpei
       * * `Pacific/Ponape` - Pacific/Ponape
       * * `Pacific/Port_Moresby` - Pacific/Port_Moresby
       * * `Pacific/Rarotonga` - Pacific/Rarotonga
       * * `Pacific/Saipan` - Pacific/Saipan
       * * `Pacific/Samoa` - Pacific/Samoa
       * * `Pacific/Tahiti` - Pacific/Tahiti
       * * `Pacific/Tarawa` - Pacific/Tarawa
       * * `Pacific/Tongatapu` - Pacific/Tongatapu
       * * `Pacific/Truk` - Pacific/Truk
       * * `Pacific/Wake` - Pacific/Wake
       * * `Pacific/Wallis` - Pacific/Wallis
       * * `Pacific/Yap` - Pacific/Yap
       * * `Poland` - Poland
       * * `Portugal` - Portugal
       * * `ROC` - ROC
       * * `ROK` - ROK
       * * `Singapore` - Singapore
       * * `Turkey` - Turkey
       * * `UCT` - UCT
       * * `US/Alaska` - US/Alaska
       * * `US/Aleutian` - US/Aleutian
       * * `US/Arizona` - US/Arizona
       * * `US/Central` - US/Central
       * * `US/East-Indiana` - US/East-Indiana
       * * `US/Eastern` - US/Eastern
       * * `US/Hawaii` - US/Hawaii
       * * `US/Indiana-Starke` - US/Indiana-Starke
       * * `US/Michigan` - US/Michigan
       * * `US/Mountain` - US/Mountain
       * * `US/Pacific` - US/Pacific
       * * `US/Samoa` - US/Samoa
       * * `UTC` - UTC
       * * `Universal` - Universal
       * * `W-SU` - W-SU
       * * `WET` - WET
       * * `Zulu` - Zulu
       * @default UTC
       */
      timezone?: components["schemas"]["TimezoneEnum"];
      result: components["schemas"]["TrendResult"][];
    };
    /** TrendsFilter */
    TrendsFilter: {
      /** @default null */
      aggregationAxisFormat?: components["schemas"]["AggregationAxisFormat"] | null;
      /**
       * Aggregationaxispostfix
       * @default null
       */
      aggregationAxisPostfix?: string | null;
      /**
       * Aggregationaxisprefix
       * @default null
       */
      aggregationAxisPrefix?: string | null;
      /**
       * Breakdown Histogram Bin Count
       * @default null
       */
      breakdown_histogram_bin_count?: number | null;
      /**
       * Compare
       * @default null
       */
      compare?: boolean | null;
      /**
       * Decimalplaces
       * @default null
       */
      decimalPlaces?: number | null;
      /** @default null */
      display?: components["schemas"]["ChartDisplayType"] | null;
      /**
       * Formula
       * @default null
       */
      formula?: string | null;
      /**
       * Hidden Legend Indexes
       * @default null
       */
      hidden_legend_indexes?: number[] | null;
      /**
       * Showlabelsonseries
       * @default null
       */
      showLabelsOnSeries?: boolean | null;
      /**
       * Showlegend
       * @default null
       */
      showLegend?: boolean | null;
      /**
       * Showpercentstackview
       * @default null
       */
      showPercentStackView?: boolean | null;
      /**
       * Showvaluesonseries
       * @default null
       */
      showValuesOnSeries?: boolean | null;
      /**
       * Smoothingintervals
       * @default null
       */
      smoothingIntervals?: number | null;
    };
    /** TrendsQuery */
    TrendsQuery: {
      /**
       * Aggregation Group Type Index
       * @description Groups aggregation
       * @default null
       */
      aggregation_group_type_index?: number | null;
      /**
       * @description Breakdown of the events and actions
       * @default null
       */
      breakdownFilter?: components["schemas"]["BreakdownFilter"] | null;
      /**
       * @description Date range for the query
       * @default null
       */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Filtertestaccounts
       * @description Exclude internal and test users by applying the respective filters
       * @default null
       */
      filterTestAccounts?: boolean | null;
      /**
       * @description Granularity of the response. Can be one of `hour`, `day`, `week` or `month`
       * @default null
       */
      interval?: components["schemas"]["IntervalType"] | null;
      /**
       * Kind
       * @default TrendsQuery
       * @constant
       */
      kind?: "TrendsQuery";
      /**
       * @description Modifiers used when performing the query
       * @default null
       */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Properties
       * @description Property filters for all series
       * @default null
       */
      properties?:
        | (
            | components["schemas"]["EventPropertyFilter"]
            | components["schemas"]["PersonPropertyFilter"]
            | components["schemas"]["ElementPropertyFilter"]
            | components["schemas"]["SessionPropertyFilter"]
            | components["schemas"]["CohortPropertyFilter"]
            | components["schemas"]["RecordingDurationFilter"]
            | components["schemas"]["GroupPropertyFilter"]
            | components["schemas"]["FeaturePropertyFilter"]
            | components["schemas"]["HogQLPropertyFilter"]
            | components["schemas"]["EmptyPropertyFilter"]
            | components["schemas"]["DataWarehousePropertyFilter"]
            | components["schemas"]["DataWarehousePersonPropertyFilter"]
          )[]
        | components["schemas"]["PropertyGroupFilter"]
        | null;
      /** @default null */
      response?: components["schemas"]["TrendsQueryResponse"] | null;
      /**
       * Samplingfactor
       * @description Sampling rate
       * @default null
       */
      samplingFactor?: number | null;
      /**
       * Series
       * @description Events and actions to include
       */
      series: (
        | components["schemas"]["EventsNode"]
        | components["schemas"]["ActionsNode"]
        | components["schemas"]["DataWarehouseNode"]
      )[];
      /**
       * @description Properties specific to the trends insight
       * @default null
       */
      trendsFilter?: components["schemas"]["TrendsFilter"] | null;
    };
    /** TrendsQueryResponse */
    TrendsQueryResponse: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: Record<string, never>[];
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /**
     * @description * `popover` - popover
     * * `widget` - widget
     * * `button` - button
     * * `email` - email
     * * `full_screen` - full screen
     * * `api` - api
     * @enum {string}
     */
    Type7baEnum: "popover" | "widget" | "button" | "email" | "full_screen" | "api";
    /**
     * @description * `contains` - contains
     * * `regex` - regex
     * * `exact` - exact
     * @enum {string}
     */
    UrlMatchingEnum: "contains" | "regex" | "exact";
    User: {
      /** Format: date-time */
      date_joined: string;
      /** Format: uuid */
      uuid: string;
      distinct_id: string | null;
      first_name?: string;
      last_name?: string;
      /**
       * Email address
       * Format: email
       */
      email: string;
      /**
       * Pending email address awaiting verification
       * Format: email
       */
      pending_email: string | null;
      email_opt_in?: boolean | null;
      is_email_verified: boolean | null;
      notification_settings?: {
        [key: string]: unknown;
      };
      anonymize_data?: boolean | null;
      toolbar_mode?:
        | components["schemas"]["ToolbarModeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
      has_password: boolean;
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      is_staff?: boolean;
      is_impersonated: boolean | null;
      team: components["schemas"]["TeamBasic"];
      organization: components["schemas"]["Organization"];
      organizations: readonly components["schemas"]["OrganizationBasic"][];
      set_current_organization?: string;
      set_current_team?: string;
      password: string;
      current_password?: string;
      events_column_config?: unknown;
      is_2fa_enabled: boolean;
      has_social_auth: boolean;
      has_seen_product_intro_for?: unknown;
      scene_personalisation: readonly components["schemas"]["ScenePersonalisationBasic"][];
      theme_mode?:
        | components["schemas"]["ThemeModeEnum"]
        | components["schemas"]["BlankEnum"]
        | components["schemas"]["NullEnum"]
        | null;
    };
    UserBasic: {
      id: number;
      /** Format: uuid */
      uuid: string;
      distinct_id?: string | null;
      first_name?: string;
      last_name?: string;
      /**
       * Email address
       * Format: email
       */
      email: string;
      is_email_verified?: boolean | null;
    };
    /** VizSpecificOptions */
    VizSpecificOptions: {
      /**
       * Actionspie
       * @default null
       */
      ActionsPie?: null;
      /**
       * Retention
       * @default null
       */
      RETENTION?: null;
    };
    /** WebOverviewItem */
    WebOverviewItem: {
      /**
       * Changefrompreviouspct
       * @default null
       */
      changeFromPreviousPct?: number | null;
      /**
       * Isincreasebad
       * @default null
       */
      isIncreaseBad?: boolean | null;
      /** Key */
      key: string;
      kind: components["schemas"]["Kind2"];
      /**
       * Previous
       * @default null
       */
      previous?: number | null;
      /**
       * Value
       * @default null
       */
      value?: number | null;
    };
    /** WebOverviewQuery */
    WebOverviewQuery: {
      /**
       * Compare
       * @default null
       */
      compare?: boolean | null;
      /** @default null */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Kind
       * @default WebOverviewQuery
       * @constant
       */
      kind?: "WebOverviewQuery";
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** Properties */
      properties: (
        | components["schemas"]["EventPropertyFilter"]
        | components["schemas"]["PersonPropertyFilter"]
        | components["schemas"]["SessionPropertyFilter"]
      )[];
      /** @default null */
      response?: components["schemas"]["WebOverviewQueryResponse"] | null;
      /** @default null */
      sampling?: components["schemas"]["Sampling"] | null;
      /**
       * Usesessionstable
       * @default null
       */
      useSessionsTable?: boolean | null;
    };
    /** WebOverviewQueryResponse */
    WebOverviewQueryResponse: {
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: components["schemas"]["WebOverviewItem"][];
      /** @default null */
      samplingRate?: components["schemas"]["SamplingRate"] | null;
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
    };
    /**
     * WebStatsBreakdown
     * @enum {string}
     */
    WebStatsBreakdown:
      | "Page"
      | "InitialPage"
      | "InitialChannelType"
      | "InitialReferringDomain"
      | "InitialUTMSource"
      | "InitialUTMCampaign"
      | "InitialUTMMedium"
      | "InitialUTMTerm"
      | "InitialUTMContent"
      | "Browser"
      | "OS"
      | "DeviceType"
      | "Country"
      | "Region"
      | "City";
    /** WebStatsTableQuery */
    WebStatsTableQuery: {
      breakdownBy: components["schemas"]["WebStatsBreakdown"];
      /** @default null */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Dopathcleaning
       * @default null
       */
      doPathCleaning?: boolean | null;
      /**
       * Includebouncerate
       * @default null
       */
      includeBounceRate?: boolean | null;
      /**
       * Includescrolldepth
       * @default null
       */
      includeScrollDepth?: boolean | null;
      /**
       * Kind
       * @default WebStatsTableQuery
       * @constant
       */
      kind?: "WebStatsTableQuery";
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** Properties */
      properties: (
        | components["schemas"]["EventPropertyFilter"]
        | components["schemas"]["PersonPropertyFilter"]
        | components["schemas"]["SessionPropertyFilter"]
      )[];
      /** @default null */
      response?: components["schemas"]["WebStatsTableQueryResponse"] | null;
      /** @default null */
      sampling?: components["schemas"]["Sampling"] | null;
      /**
       * Usesessionstable
       * @default null
       */
      useSessionsTable?: boolean | null;
    };
    /** WebStatsTableQueryResponse */
    WebStatsTableQueryResponse: {
      /**
       * Columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Hasmore
       * @default null
       */
      hasMore?: boolean | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /**
       * Limit
       * @default null
       */
      limit?: number | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /**
       * Offset
       * @default null
       */
      offset?: number | null;
      /** Results */
      results: unknown[];
      /** @default null */
      samplingRate?: components["schemas"]["SamplingRate"] | null;
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @default null
       */
      types?: unknown[] | null;
    };
    /** WebTopClicksQuery */
    WebTopClicksQuery: {
      /** @default null */
      dateRange?: components["schemas"]["DateRange"] | null;
      /**
       * Kind
       * @default WebTopClicksQuery
       * @constant
       */
      kind?: "WebTopClicksQuery";
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /** Properties */
      properties: (
        | components["schemas"]["EventPropertyFilter"]
        | components["schemas"]["PersonPropertyFilter"]
        | components["schemas"]["SessionPropertyFilter"]
      )[];
      /** @default null */
      response?: components["schemas"]["WebTopClicksQueryResponse"] | null;
      /** @default null */
      sampling?: components["schemas"]["Sampling"] | null;
      /**
       * Usesessionstable
       * @default null
       */
      useSessionsTable?: boolean | null;
    };
    /** WebTopClicksQueryResponse */
    WebTopClicksQueryResponse: {
      /**
       * Columns
       * @default null
       */
      columns?: unknown[] | null;
      /**
       * Hogql
       * @default null
       */
      hogql?: string | null;
      /**
       * Is Cached
       * @default null
       */
      is_cached?: boolean | null;
      /**
       * Last Refresh
       * @default null
       */
      last_refresh?: string | null;
      /** @default null */
      modifiers?: components["schemas"]["HogQLQueryModifiers"] | null;
      /**
       * Next Allowed Client Refresh
       * @default null
       */
      next_allowed_client_refresh?: string | null;
      /** Results */
      results: unknown[];
      /** @default null */
      samplingRate?: components["schemas"]["SamplingRate"] | null;
      /**
       * Timings
       * @default null
       */
      timings?: components["schemas"]["QueryTiming"][] | null;
      /**
       * Types
       * @default null
       */
      types?: unknown[] | null;
    };
    /**
     * @description * `0` - Sunday
     * * `1` - Monday
     * @enum {integer}
     */
    WeekStartDayEnum: 0 | 1;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationList"];
        };
      };
    };
  };
  create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Organization"];
        "application/x-www-form-urlencoded": components["schemas"]["Organization"];
        "multipart/form-data": components["schemas"]["Organization"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this organization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this organization. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Organization"];
        "application/x-www-form-urlencoded": components["schemas"]["Organization"];
        "multipart/form-data": components["schemas"]["Organization"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this organization. */
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this organization. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedOrganization"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOrganization"];
        "multipart/form-data": components["schemas"]["PatchedOrganization"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
    };
  };
  batch_exports_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBatchExportList"];
        };
      };
    };
  };
  batch_exports_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  batch_exports_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  batch_exports_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  batch_exports_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  batch_exports_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedBatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedBatchExport"];
        "multipart/form-data": components["schemas"]["PatchedBatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  /** @description Trigger a backfill for a BatchExport. */
  batch_exports_backfill_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  /** @description Pause a BatchExport. */
  batch_exports_pause_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  /** @description Unpause a BatchExport. */
  batch_exports_unpause_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  domains_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationDomainList"];
        };
      };
    };
  };
  domains_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationDomain"];
        "multipart/form-data": components["schemas"]["OrganizationDomain"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
  };
  domains_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this domain. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
  };
  domains_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this domain. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationDomain"];
        "multipart/form-data": components["schemas"]["OrganizationDomain"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
  };
  domains_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this domain. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  domains_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this domain. */
        id: string;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedOrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOrganizationDomain"];
        "multipart/form-data": components["schemas"]["PatchedOrganizationDomain"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
  };
  domains_verify_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this domain. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationDomain"];
        "multipart/form-data": components["schemas"]["OrganizationDomain"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
  };
  invites_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationInviteList"];
        };
      };
    };
  };
  invites_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInvite"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationInvite"];
        "multipart/form-data": components["schemas"]["OrganizationInvite"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationInvite"];
        };
      };
    };
  };
  invites_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this organization invite. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  invites_bulk_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInvite"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationInvite"];
        "multipart/form-data": components["schemas"]["OrganizationInvite"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvite"];
        };
      };
    };
  };
  members_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationMemberList"];
        };
      };
    };
  };
  members_update: {
    parameters: {
      path: {
        organization_id: string;
        user__uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrganizationMember"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationMember"];
        "multipart/form-data": components["schemas"]["OrganizationMember"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMember"];
        };
      };
    };
  };
  members_destroy: {
    parameters: {
      path: {
        organization_id: string;
        user__uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  members_partial_update: {
    parameters: {
      path: {
        organization_id: string;
        user__uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedOrganizationMember"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOrganizationMember"];
        "multipart/form-data": components["schemas"]["PatchedOrganizationMember"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMember"];
        };
      };
    };
  };
  pipeline_destinations_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginList"];
        };
      };
    };
  };
  pipeline_destinations_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_destinations_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_check_for_updates_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_source_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_update_source_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_upgrade_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_activity_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_exports_unsubscribe_configs_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_repository_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_destinations_unused_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginList"];
        };
      };
    };
  };
  pipeline_frontend_apps_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_frontend_apps_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_check_for_updates_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_source_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_update_source_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_upgrade_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_activity_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_exports_unsubscribe_configs_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_repository_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_frontend_apps_unused_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginList"];
        };
      };
    };
  };
  pipeline_import_apps_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_import_apps_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_check_for_updates_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_source_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_update_source_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_upgrade_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_activity_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_exports_unsubscribe_configs_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_repository_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_import_apps_unused_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginList"];
        };
      };
    };
  };
  pipeline_transformations_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_transformations_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_check_for_updates_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_source_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_update_source_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_upgrade_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_activity_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_exports_unsubscribe_configs_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_repository_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  pipeline_transformations_unused_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginList"];
        };
      };
    };
  };
  plugins_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  plugins_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_check_for_updates_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_source_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_update_source_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_upgrade_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_activity_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_exports_unsubscribe_configs_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_repository_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_unused_retrieve: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  list_2: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamBasicList"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  create_2: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  retrieve_2: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  update_2: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  destroy_2: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Projects for the current organization. */
  partial_update_2: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeam"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeam"];
        "multipart/form-data": components["schemas"]["PatchedTeam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  activity_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  is_generating_demo_data_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Projects for the current organization. */
  reset_token_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeam"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeam"];
        "multipart/form-data": components["schemas"]["PatchedTeam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  roles_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRoleList"];
        };
      };
    };
  };
  roles_create: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Role"];
        "application/x-www-form-urlencoded": components["schemas"]["Role"];
        "multipart/form-data": components["schemas"]["Role"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  roles_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this role. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  roles_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this role. */
        id: string;
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Role"];
        "application/x-www-form-urlencoded": components["schemas"]["Role"];
        "multipart/form-data": components["schemas"]["Role"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  roles_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this role. */
        id: string;
        organization_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  roles_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this role. */
        id: string;
        organization_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedRole"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedRole"];
        "multipart/form-data": components["schemas"]["PatchedRole"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  roles_role_memberships_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        organization_id: string;
        role_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRoleMembershipList"];
        };
      };
    };
  };
  roles_role_memberships_create: {
    parameters: {
      path: {
        organization_id: string;
        role_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleMembership"];
        "application/x-www-form-urlencoded": components["schemas"]["RoleMembership"];
        "multipart/form-data": components["schemas"]["RoleMembership"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RoleMembership"];
        };
      };
    };
  };
  roles_role_memberships_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this role membership. */
        id: string;
        organization_id: string;
        role_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  actions_list: {
    parameters: {
      query?: {
        format?: "csv" | "json";
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedActionList"];
          "text/csv": components["schemas"]["PaginatedActionList"];
        };
      };
    };
  };
  actions_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Action"];
        "application/x-www-form-urlencoded": components["schemas"]["Action"];
        "multipart/form-data": components["schemas"]["Action"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  actions_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this action. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  actions_update: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this action. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Action"];
        "application/x-www-form-urlencoded": components["schemas"]["Action"];
        "multipart/form-data": components["schemas"]["Action"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  actions_destroy: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this action. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  actions_partial_update: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this action. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAction"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAction"];
        "multipart/form-data": components["schemas"]["PatchedAction"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  activity_log_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedActivityLogList"];
        };
      };
    };
  };
  activity_log_bookmark_activity_notification_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityLog"];
        "application/x-www-form-urlencoded": components["schemas"]["ActivityLog"];
        "multipart/form-data": components["schemas"]["ActivityLog"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityLog"];
        };
      };
    };
  };
  activity_log_important_changes_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityLog"];
        };
      };
    };
  };
  /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAnnotationList"];
        };
      };
    };
  };
  /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Annotation"];
        "application/x-www-form-urlencoded": components["schemas"]["Annotation"];
        "multipart/form-data": components["schemas"]["Annotation"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
  };
  /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this annotation. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
  };
  /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this annotation. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Annotation"];
        "application/x-www-form-urlencoded": components["schemas"]["Annotation"];
        "multipart/form-data": components["schemas"]["Annotation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  annotations_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this annotation. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  /** @description Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this annotation. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAnnotation"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAnnotation"];
        "multipart/form-data": components["schemas"]["PatchedAnnotation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
  };
  app_metrics_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  app_metrics_error_details_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  app_metrics_historical_exports_retrieve: {
    parameters: {
      path: {
        plugin_config_id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  app_metrics_historical_exports_retrieve_2: {
    parameters: {
      path: {
        id: string;
        plugin_config_id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  batch_exports_list_2: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBatchExportList"];
        };
      };
    };
  };
  batch_exports_create_2: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  batch_exports_logs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        batch_export_id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBatchExportLogEntryList"];
        };
      };
    };
  };
  batch_exports_runs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
      };
      path: {
        batch_export_id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBatchExportRunList"];
        };
      };
    };
  };
  batch_exports_runs_retrieve: {
    parameters: {
      path: {
        batch_export_id: string;
        /** @description A UUID string identifying this batch export run. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExportRun"];
        };
      };
    };
  };
  batch_exports_runs_logs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        batch_export_id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        run_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBatchExportLogEntryList"];
        };
      };
    };
  };
  batch_exports_retrieve_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  batch_exports_update_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  batch_exports_destroy_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  batch_exports_partial_update_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedBatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedBatchExport"];
        "multipart/form-data": components["schemas"]["PatchedBatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  /** @description Trigger a backfill for a BatchExport. */
  batch_exports_backfill_create_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  /** @description Pause a BatchExport. */
  batch_exports_pause_create_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  /** @description Unpause a BatchExport. */
  batch_exports_unpause_create_2: {
    parameters: {
      path: {
        /** @description A UUID string identifying this batch export. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchExport"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchExport"];
        "multipart/form-data": components["schemas"]["BatchExport"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BatchExport"];
        };
      };
    };
  };
  cohorts_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCohortList"];
        };
      };
    };
  };
  cohorts_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Cohort"];
        "application/x-www-form-urlencoded": components["schemas"]["Cohort"];
        "multipart/form-data": components["schemas"]["Cohort"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
  };
  cohorts_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this cohort. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
  };
  cohorts_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this cohort. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Cohort"];
        "application/x-www-form-urlencoded": components["schemas"]["Cohort"];
        "multipart/form-data": components["schemas"]["Cohort"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  cohorts_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this cohort. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  cohorts_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this cohort. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedCohort"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedCohort"];
        "multipart/form-data": components["schemas"]["PatchedCohort"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
  };
  cohorts_duplicate_as_static_cohort_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this cohort. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
  };
  cohorts_persons_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this cohort. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
          "text/csv": components["schemas"]["Cohort"];
        };
      };
    };
  };
  dashboard_templates_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDashboardTemplateList"];
        };
      };
    };
  };
  dashboard_templates_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DashboardTemplate"];
        "application/x-www-form-urlencoded": components["schemas"]["DashboardTemplate"];
        "multipart/form-data": components["schemas"]["DashboardTemplate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DashboardTemplate"];
        };
      };
    };
  };
  dashboard_templates_retrieve: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DashboardTemplate"];
        };
      };
    };
  };
  dashboard_templates_update: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DashboardTemplate"];
        "application/x-www-form-urlencoded": components["schemas"]["DashboardTemplate"];
        "multipart/form-data": components["schemas"]["DashboardTemplate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DashboardTemplate"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  dashboard_templates_destroy: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  dashboard_templates_partial_update: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDashboardTemplate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDashboardTemplate"];
        "multipart/form-data": components["schemas"]["PatchedDashboardTemplate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DashboardTemplate"];
        };
      };
    };
  };
  dashboard_templates_json_schema_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DashboardTemplate"];
        };
      };
    };
  };
  dashboards_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDashboardBasicList"];
        };
      };
    };
  };
  dashboards_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Dashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["Dashboard"];
        "multipart/form-data": components["schemas"]["Dashboard"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  dashboards_collaborators_list: {
    parameters: {
      path: {
        dashboard_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DashboardCollaborator"][];
        };
      };
    };
  };
  dashboards_collaborators_create: {
    parameters: {
      path: {
        dashboard_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DashboardCollaborator"];
        "application/x-www-form-urlencoded": components["schemas"]["DashboardCollaborator"];
        "multipart/form-data": components["schemas"]["DashboardCollaborator"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DashboardCollaborator"];
        };
      };
    };
  };
  dashboards_collaborators_destroy: {
    parameters: {
      path: {
        dashboard_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        user__uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  dashboards_sharing_list: {
    parameters: {
      path: {
        dashboard_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharingConfiguration"][];
        };
      };
    };
  };
  dashboards_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this dashboard. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  dashboards_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this dashboard. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Dashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["Dashboard"];
        "multipart/form-data": components["schemas"]["Dashboard"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  dashboards_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this dashboard. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  dashboards_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this dashboard. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDashboard"];
        "multipart/form-data": components["schemas"]["PatchedDashboard"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  dashboards_move_tile_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this dashboard. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDashboard"];
        "multipart/form-data": components["schemas"]["PatchedDashboard"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  dashboards_create_from_template_json_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Dashboard"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  early_access_feature_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEarlyAccessFeatureList"];
        };
      };
    };
  };
  early_access_feature_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EarlyAccessFeatureSerializerCreateOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["EarlyAccessFeatureSerializerCreateOnly"];
        "multipart/form-data": components["schemas"]["EarlyAccessFeatureSerializerCreateOnly"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EarlyAccessFeatureSerializerCreateOnly"];
        };
      };
    };
  };
  early_access_feature_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this early access feature. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EarlyAccessFeature"];
        };
      };
    };
  };
  early_access_feature_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this early access feature. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EarlyAccessFeature"];
        "application/x-www-form-urlencoded": components["schemas"]["EarlyAccessFeature"];
        "multipart/form-data": components["schemas"]["EarlyAccessFeature"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EarlyAccessFeature"];
        };
      };
    };
  };
  early_access_feature_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this early access feature. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  early_access_feature_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this early access feature. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedEarlyAccessFeature"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedEarlyAccessFeature"];
        "multipart/form-data": components["schemas"]["PatchedEarlyAccessFeature"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EarlyAccessFeature"];
        };
      };
    };
  };
  event_definitions_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  event_definitions_retrieve_2: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  event_definitions_update: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  event_definitions_destroy: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  event_definitions_partial_update: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description
   *         This endpoint allows you to list and filter events.
   *         It is effectively deprecated and is kept only for backwards compatibility.
   *         If you ever ask about it you will be advised to not use it...
   *         If you want to ad-hoc list or aggregate events, use the Query endpoint instead.
   *         If you want to export all events or many pages of events you should use our CDP/Batch Exports products instead.
   */
  events_list: {
    parameters: {
      query?: {
        /** @description Only return events with a timestamp after this time. */
        after?: string;
        /** @description Only return events with a timestamp before this time. */
        before?: string;
        /** @description Filter list by distinct id. */
        distinct_id?: number;
        /** @description Filter list by event. For example `user sign up` or `$pageview`. */
        event?: string;
        format?: "csv" | "json";
        /** @description The maximum number of results to return */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Filter list by person id. */
        person_id?: number;
        /** @description Filter events by event property, person property, cohort, groups and more. */
        properties?: components["schemas"]["Property"][];
        /** @description (Experimental) JSON-serialized array of HogQL expressions to return */
        select?: string[];
        /** @description (Experimental) JSON-serialized array of HogQL expressions that must pass */
        where?: string[];
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedClickhouseEventList"];
          "text/csv": components["schemas"]["PaginatedClickhouseEventList"];
        };
      };
    };
  };
  events_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClickhouseEvent"];
          "text/csv": components["schemas"]["ClickhouseEvent"];
        };
      };
    };
  };
  events_values_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClickhouseEvent"];
          "text/csv": components["schemas"]["ClickhouseEvent"];
        };
      };
    };
  };
  experiments_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExperimentList"];
        };
      };
    };
  };
  experiments_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Experiment"];
        "application/x-www-form-urlencoded": components["schemas"]["Experiment"];
        "multipart/form-data": components["schemas"]["Experiment"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Experiment"];
        "application/x-www-form-urlencoded": components["schemas"]["Experiment"];
        "multipart/form-data": components["schemas"]["Experiment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  experiments_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedExperiment"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedExperiment"];
        "multipart/form-data": components["schemas"]["PatchedExperiment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_create_exposure_cohort_for_experiment_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Experiment"];
        "application/x-www-form-urlencoded": components["schemas"]["Experiment"];
        "multipart/form-data": components["schemas"]["Experiment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_results_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_secondary_results_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this experiment. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_requires_flag_implementation_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  explicit_members_list: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExplicitTeamMember"][];
        };
      };
    };
  };
  explicit_members_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExplicitTeamMember"];
        "application/x-www-form-urlencoded": components["schemas"]["ExplicitTeamMember"];
        "multipart/form-data": components["schemas"]["ExplicitTeamMember"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExplicitTeamMember"];
        };
      };
    };
  };
  explicit_members_retrieve: {
    parameters: {
      path: {
        parent_membership__user__uuid: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExplicitTeamMember"];
        };
      };
    };
  };
  explicit_members_update: {
    parameters: {
      path: {
        parent_membership__user__uuid: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExplicitTeamMember"];
        "application/x-www-form-urlencoded": components["schemas"]["ExplicitTeamMember"];
        "multipart/form-data": components["schemas"]["ExplicitTeamMember"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExplicitTeamMember"];
        };
      };
    };
  };
  explicit_members_destroy: {
    parameters: {
      path: {
        parent_membership__user__uuid: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  explicit_members_partial_update: {
    parameters: {
      path: {
        parent_membership__user__uuid: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedExplicitTeamMember"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedExplicitTeamMember"];
        "multipart/form-data": components["schemas"]["PatchedExplicitTeamMember"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExplicitTeamMember"];
        };
      };
    };
  };
  exports_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExportedAssetList"];
        };
      };
    };
  };
  exports_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportedAsset"];
        "application/x-www-form-urlencoded": components["schemas"]["ExportedAsset"];
        "multipart/form-data": components["schemas"]["ExportedAsset"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExportedAsset"];
        };
      };
    };
  };
  exports_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this exported asset. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExportedAsset"];
        };
      };
    };
  };
  exports_content_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this exported asset. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExportedAsset"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFeatureFlagList"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  feature_flags_role_access_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        feature_flag_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFeatureFlagRoleAccessList"];
        };
      };
    };
  };
  feature_flags_role_access_create: {
    parameters: {
      path: {
        feature_flag_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlagRoleAccess"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlagRoleAccess"];
        "multipart/form-data": components["schemas"]["FeatureFlagRoleAccess"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FeatureFlagRoleAccess"];
        };
      };
    };
  };
  feature_flags_role_access_retrieve: {
    parameters: {
      path: {
        feature_flag_id: number;
        /** @description A unique integer value identifying this feature flag role access. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlagRoleAccess"];
        };
      };
    };
  };
  feature_flags_role_access_destroy: {
    parameters: {
      path: {
        feature_flag_id: number;
        /** @description A unique integer value identifying this feature flag role access. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  feature_flags_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedFeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFeatureFlag"];
        "multipart/form-data": components["schemas"]["PatchedFeatureFlag"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_activity_retrieve_2: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_create_static_cohort_for_flag_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_dashboard_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_enrich_usage_dashboard_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this feature flag. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_activity_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_evaluation_reasons_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_local_evaluation_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_my_flags_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * @description Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_user_blast_radius_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /** @description List all groups of a specific group type. You must pass ?group_type_index= in the URL. To get a list of valid group types, call /api/:project_id/groups_types/ */
  groups_list: {
    parameters: {
      query: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Specify the group type to list */
        group_type_index: number;
        /** @description Search the group name */
        search: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGroupList"];
        };
      };
    };
  };
  groups_find_retrieve: {
    parameters: {
      query: {
        /** @description Specify the key of the group to find */
        group_key: string;
        /** @description Specify the group type to find */
        group_type_index: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_property_definitions_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_property_values_retrieve: {
    parameters: {
      query: {
        /** @description Specify the group type to find property values of */
        group_type_index: number;
        /** @description Specify the property key to find values for */
        key: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_related_retrieve: {
    parameters: {
      query: {
        /** @description Specify the group type to find */
        group_type_index: number;
        /** @description Specify the id of the user to find groups for */
        id: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_types_list: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupType"][];
        };
      };
    };
  };
  groups_types_update_metadata_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedGroupType"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedGroupType"];
        "multipart/form-data": components["schemas"]["PatchedGroupType"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupType"];
        };
      };
    };
  };
  insights_list: {
    parameters: {
      query?: {
        created_by?: number;
        format?: "csv" | "json";
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        short_id?: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedInsightList"];
          "text/csv": components["schemas"]["PaginatedInsightList"];
        };
      };
    };
  };
  insights_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_sharing_list: {
    parameters: {
      path: {
        insight_id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharingConfiguration"][];
        };
      };
    };
  };
  insights_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
        /**
         * @description
         * When loading an insight for a dashboard pass a `from_dashboard` query parameter containing the dashboard ID
         *
         * e.g. `"/api/projects/{team_id}/insights/{insight_id}?from_dashboard={dashboard_id}"`
         *
         * Insights can be added to more than one dashboard, this allows the insight to be loaded in the correct context.
         *
         * Using the correct cache and enriching the response with dashboard specific config (e.g. layouts or colors)
         */
        from_dashboard?: number;
        /**
         * @description
         *                 The client can request that an insight be refreshed by setting the `refresh=true` parameter.
         *                 The server will then decide if the data should or not be refreshed based on a set of heuristics
         *                 meant to determine the staleness of cached data. The result will contain as `is_cached` field
         *                 that indicates whether the insight was actually refreshed or not through the request.
         */
        refresh?: boolean;
      };
      path: {
        /** @description A unique integer value identifying this insight. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_update: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this insight. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  insights_destroy: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this insight. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  insights_partial_update: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this insight. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedInsight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_activity_retrieve_2: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this insight. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_viewed_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this insight. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_activity_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_cancel_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_funnel_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  Funnels: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Funnel"];
      };
    };
    responses: {
      /** @description Note, if funnel_viz_type is set the response will be different. */
      200: {
        content: {
          "application/json": components["schemas"]["FunnelStepsResults"];
          "text/csv": components["schemas"]["FunnelStepsResults"];
        };
      };
    };
  };
  insights_funnel_correlation_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_funnel_correlation_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  /** @description Returns basic details about the last 5 insights viewed by this user. Most recently viewed first. */
  insights_my_last_viewed_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_path_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_path_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_retention_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_retention_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_timing_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Insight"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_trend_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  Trends: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Trend"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrendResults"];
          "text/csv": components["schemas"]["TrendResults"];
        };
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_list: {
    parameters: {
      query?: {
        /**
         * @description Filter for notebooks that match a provided filter.
         *                 Each match pair is separated by a colon,
         *                 multiple match pairs can be sent separated by a space or a comma
         */
        contains?: string;
        /** @description The UUID of the Notebook's creator */
        created_by?: number;
        /** @description Filter for notebooks created after this date & time */
        date_from?: string;
        /** @description Filter for notebooks created before this date & time */
        date_to?: string;
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description If any value is provided for this parameter, return notebooks created by the logged in user. */
        user?: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedNotebookMinimalList"];
        };
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Notebook"];
        "application/x-www-form-urlencoded": components["schemas"]["Notebook"];
        "multipart/form-data": components["schemas"]["Notebook"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Notebook"];
        };
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notebook"];
        };
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Notebook"];
        "application/x-www-form-urlencoded": components["schemas"]["Notebook"];
        "multipart/form-data": components["schemas"]["Notebook"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notebook"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  notebooks_destroy: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedNotebook"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedNotebook"];
        "multipart/form-data": components["schemas"]["PatchedNotebook"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notebook"];
        };
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_activity_retrieve_2: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notebook"];
        };
      };
    };
  };
  /** @description The API for interacting with Notebooks. This feature is in early access and the API can have breaking changes without announcement. */
  notebooks_activity_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notebook"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_list: {
    parameters: {
      query?: {
        /** @description Filter list by distinct id. */
        distinct_id?: string;
        /** @description Filter persons by email (exact match) */
        email?: string;
        format?: "csv" | "json";
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Filter Persons by person properties. */
        properties?: components["schemas"]["Property"][];
        /** @description Search persons, either by email (full text search) or distinct_id (exact match). */
        search?: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPersonList"];
          "text/csv": components["schemas"]["PaginatedPersonList"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Only for setting properties on the person. "properties" from the request data will be updated via a "$set" event.
   * This means that only the properties listed will be updated, but other properties won't be removed nor updated.
   * If you would like to remove a property use the `delete_property` endpoint.
   */
  persons_update: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_destroy: {
    parameters: {
      query?: {
        /** @description If true, a task to delete all events associated with this person will be created and queued. The task does not run immediately and instead is batched together and at 5AM UTC every Sunday (controlled by environment variable CLEAR_CLICKHOUSE_REMOVED_DATA_SCHEDULE_CRON) */
        delete_events?: boolean;
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_partial_update: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPerson"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPerson"];
        "multipart/form-data": components["schemas"]["PatchedPerson"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_activity_retrieve_2: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_delete_property_create: {
    parameters: {
      query: {
        /** @description Specify the property key to delete */
        $unset: string;
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_properties_timeline_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_split_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_update_property_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
        /** @description Specify the property key */
        key: string;
        /** @description Specify the property value */
        value: unknown;
      };
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_activity_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_cohorts_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_funnel_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_funnel_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_funnel_correlation_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_funnel_correlation_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_lifecycle_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_path_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_path_create: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_retention_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_stickiness_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_trends_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description To create or update persons, use a PostHog library of your choice and [use an identify call](/product-analytics/identify). This API endpoint is only for reading and deleting. */
  persons_values_retrieve: {
    parameters: {
      query?: {
        format?: "csv" | "json";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  pipeline_destination_configs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginConfigList"];
        };
      };
    };
  };
  pipeline_destination_configs_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_destination_configs_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_destination_configs_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_destination_configs_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_destination_configs_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_destination_configs_frontend_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_destination_configs_job_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_destination_configs_rearrange_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginConfigList"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_frontend_apps_configs_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_frontend_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_job_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_frontend_apps_configs_rearrange_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginConfigList"];
        };
      };
    };
  };
  pipeline_import_apps_configs_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_import_apps_configs_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_frontend_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_job_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_import_apps_configs_rearrange_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginConfigList"];
        };
      };
    };
  };
  pipeline_transformation_configs_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  pipeline_transformation_configs_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_frontend_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_job_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  pipeline_transformation_configs_rearrange_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginConfigList"];
        };
      };
    };
  };
  plugin_configs_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  plugin_configs_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_frontend_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_job_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this plugin config. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_logs_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        plugin_config_id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginLogEntryList"];
        };
      };
    };
  };
  plugin_configs_rearrange_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  property_definitions_retrieve: {
    parameters: {
      query?: {
        /** @description If sent, response value will have `is_seen_on_filtered_events` populated. JSON-encoded */
        event_names?: string;
        /** @description JSON-encoded list of excluded properties */
        excluded_properties?: string;
        /** @description Whether to return only properties for events in `event_names` */
        filter_by_event_names?: boolean | null;
        /** @description What group type is the property for. Only should be set if `type=group` */
        group_type_index?: number;
        /** @description Whether to return only (or excluding) feature flag properties */
        is_feature_flag?: boolean | null;
        /** @description Whether to return only (or excluding) numerical property definitions */
        is_numerical?: boolean | null;
        /** @description Comma-separated list of properties to filter */
        properties?: string;
        /** @description Searches properties by name */
        search?: string;
        /**
         * @description What property definitions to return
         *
         * * `event` - event
         * * `person` - person
         * * `group` - group
         * * `session` - session
         */
        type?: "event" | "person" | "group" | "session";
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  property_definitions_retrieve_2: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  property_definitions_update: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  property_definitions_destroy: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  property_definitions_partial_update: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description Allows a caller to provide a list of event names and a single property name
   * Returns a map of the event names to a boolean representing whether that property has ever been seen with that event_name
   */
  property_definitions_seen_together_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  query_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["QueryRequest"];
        "multipart/form-data": components["schemas"]["QueryRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["QueryResponseAlternative"];
        };
      };
    };
  };
  /** @description (Experimental) */
  query_retrieve: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description Query status */
      200: {
        content: never;
      };
    };
  };
  /** @description (Experimental) */
  query_destroy: {
    parameters: {
      path: {
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description Query cancelled */
      204: {
        content: never;
      };
    };
  };
  query_draft_sql_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  session_recording_playlists_list: {
    parameters: {
      query?: {
        created_by?: number;
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        short_id?: string;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSessionRecordingPlaylistList"];
        };
      };
    };
  };
  session_recording_playlists_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SessionRecordingPlaylist"];
        "application/x-www-form-urlencoded": components["schemas"]["SessionRecordingPlaylist"];
        "multipart/form-data": components["schemas"]["SessionRecordingPlaylist"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SessionRecordingPlaylist"];
        };
      };
    };
  };
  session_recording_playlists_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecordingPlaylist"];
        };
      };
    };
  };
  session_recording_playlists_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SessionRecordingPlaylist"];
        "application/x-www-form-urlencoded": components["schemas"]["SessionRecordingPlaylist"];
        "multipart/form-data": components["schemas"]["SessionRecordingPlaylist"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecordingPlaylist"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  session_recording_playlists_destroy: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  session_recording_playlists_partial_update: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSessionRecordingPlaylist"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSessionRecordingPlaylist"];
        "multipart/form-data": components["schemas"]["PatchedSessionRecordingPlaylist"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecordingPlaylist"];
        };
      };
    };
  };
  session_recording_playlists_recordings_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        short_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecordingPlaylist"];
        };
      };
    };
  };
  session_recording_playlists_recordings_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        session_recording_id: string;
        short_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SessionRecordingPlaylist"];
        "application/x-www-form-urlencoded": components["schemas"]["SessionRecordingPlaylist"];
        "multipart/form-data": components["schemas"]["SessionRecordingPlaylist"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecordingPlaylist"];
        };
      };
    };
  };
  session_recording_playlists_recordings_destroy: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        session_recording_id: string;
        short_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  session_recordings_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSessionRecordingList"];
        };
      };
    };
  };
  session_recordings_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this session recording. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  session_recordings_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this session recording. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  session_recordings_persist_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this session recording. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SessionRecording"];
        "application/x-www-form-urlencoded": components["schemas"]["SessionRecording"];
        "multipart/form-data": components["schemas"]["SessionRecording"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  session_recordings_similar_sessions_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this session recording. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  /**
   * @description Snapshots can be loaded from multiple places:
   * 1. From S3 if the session is older than our ingestion limit. This will be multiple files that can be streamed to the client
   * 2. or from Redis if the session is newer than our ingestion limit.
   *
   * Clients need to call this API twice.
   * First without a source parameter to get a list of sources supported by the given session.
   * And then once for each source in the returned list to get the actual snapshots.
   *
   * NB version 1 of this API has been deprecated and ClickHouse stored snapshots are no longer supported.
   */
  session_recordings_snapshots_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this session recording. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  session_recordings_summarize_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this session recording. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SessionRecording"];
        "application/x-www-form-urlencoded": components["schemas"]["SessionRecording"];
        "multipart/form-data": components["schemas"]["SessionRecording"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  session_recordings_sharing_list: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
        recording_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharingConfiguration"][];
        };
      };
    };
  };
  session_recordings_error_clusters_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  /**
   * @description
   *         Gets a list of event ids that match the given session recording filter.
   *         The filter must include a single session ID.
   *         And must include at least one event or action filter.
   *         This API is intended for internal use and might have unannounced breaking changes.
   */
  session_recordings_matching_events_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  session_recordings_properties_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SessionRecording"];
        };
      };
    };
  };
  sessions_property_definitions_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  sessions_values_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  subscriptions_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubscriptionList"];
        };
      };
    };
  };
  subscriptions_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Subscription"];
        "application/x-www-form-urlencoded": components["schemas"]["Subscription"];
        "multipart/form-data": components["schemas"]["Subscription"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  subscriptions_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this subscription. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  subscriptions_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this subscription. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Subscription"];
        "application/x-www-form-urlencoded": components["schemas"]["Subscription"];
        "multipart/form-data": components["schemas"]["Subscription"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  /** @description Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  subscriptions_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this subscription. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      405: {
        content: never;
      };
    };
  };
  subscriptions_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this subscription. */
        id: number;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSubscription"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubscription"];
        "multipart/form-data": components["schemas"]["PatchedSubscription"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  surveys_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSurveyList"];
        };
      };
    };
  };
  surveys_create: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurveySerializerCreateUpdateOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["SurveySerializerCreateUpdateOnly"];
        "multipart/form-data": components["schemas"]["SurveySerializerCreateUpdateOnly"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SurveySerializerCreateUpdateOnly"];
        };
      };
    };
  };
  surveys_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this survey. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  surveys_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this survey. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Survey"];
        "application/x-www-form-urlencoded": components["schemas"]["Survey"];
        "multipart/form-data": components["schemas"]["Survey"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  surveys_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this survey. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  surveys_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this survey. */
        id: string;
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSurveySerializerCreateUpdateOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSurveySerializerCreateUpdateOnly"];
        "multipart/form-data": components["schemas"]["PatchedSurveySerializerCreateUpdateOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveySerializerCreateUpdateOnly"];
        };
      };
    };
  };
  surveys_responses_count_retrieve: {
    parameters: {
      path: {
        /** @description Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  users_list: {
    parameters: {
      query?: {
        is_staff?: boolean;
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedUserList"];
        };
      };
    };
  };
  users_retrieve: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_update: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_partial_update: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUser"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
        "multipart/form-data": components["schemas"]["PatchedUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_request_email_verification_create: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_scene_personalisation_create: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_start_2fa_setup_retrieve: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_validate_2fa_create: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  users_verify_email_create: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
}
